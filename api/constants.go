package api

///////////////////////////////////////////////
//                                           //
//                     !                     //
//   This file is automatically generated!   //
//           Do not directly edit!           //
//                                           //
///////////////////////////////////////////////

// Spec version = ed83574d1b85ef4c52f267ee5558e3c1c3ffb412

import (
	"time"

	"github.com/Kyagara/equinox/cache"
	"go.uber.org/zap/zapcore"
)

// Configuration for the Equinox client.
type EquinoxConfig struct {
	// Riot API Key.
	Key string
	// Log level, api.NopLevel disables logging.
	LogLevel LogLevel
	// Timeout for the internal http.Client in seconds, 0 disables the timeout.
	Timeout int
	// Allows retrying a request if it returns a 429 status code.
	Retry bool
	// The cache used to store all GET requests done by the client.
	Cache *cache.Cache
}

func (c *EquinoxConfig) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	encoder.AddBool("retry-if-429", c.Retry)
	encoder.AddInt("http-client-timeout", c.Timeout)
	if c.Cache.TTL > 0 {
		cache := CacheConfig{Store: string(c.Cache.StoreType), TTL: c.Cache.TTL}
		err := encoder.AddObject("cache", cache)
		if err != nil {
			return err
		}
	}
	return nil
}

type CacheConfig struct {
	TTL   time.Duration
	Store string
}

func (c CacheConfig) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	encoder.AddString("store", c.Store)
	encoder.AddDuration("cache-ttl", c.TTL)
	return nil
}

// Base API URLs formats.
const (
	BaseURLFormat = "https://%s.api.riotgames.com"
	DataDragonURLFormat      = "https://ddragon.leagueoflegends.com%s"
	CommunityDragonURLFormat = "https://cdn.communitydragon.org%s"
	DataDragonLOLVersionURL = "/api/versions.json"
)

// Rate limit headers
const (
	RateLimitTypeHeader = "X-Rate-Limit-Type"
	RetryAfterHeader    = "Retry-After"
)

type LogLevel int8

const (
	// NopLevel won't log anything, this is the default behaviour for the Default client.
	NopLevel LogLevel = iota - 2
	// DebugLevel will log everything.
	DebugLevel
	// InfoLevel will log the requests being made and if they were successful.
	InfoLevel
	// WarnLevel will log when a request was rate limited.
	WarnLevel
	// ErrorLevel will log every error.
	ErrorLevel
)

// Regional routes, used in tournament services, Legends of Runeterra (LoR), and some other endpoints.
type RegionalRoute string

const (
    // North and South America.
    AMERICAS RegionalRoute = "americas"
    // Asia, used for LoL matches (`match-v5`) and TFT matches (`tft-match-v1`).
    ASIA RegionalRoute = "asia"
    // Europe.
    EUROPE RegionalRoute = "europe"
    // South East Asia, used for LoR, LoL matches (`match-v5`), and TFT matches (`tft-match-v1`).
    SEA RegionalRoute = "sea"
    // Asia-Pacific, deprecated, for some old matches in `lor-match-v1`.
    // Deprecated
    APAC RegionalRoute = "apac"
    // Special esports platform for `account-v1`. Do not confuse with the `esports` Valorant platform route.
    ESPORTS RegionalRoute = "esports"
)
