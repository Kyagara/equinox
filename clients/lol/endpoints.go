package lol

///////////////////////////////////////////////
//                                           //
//                     !                     //
//   This file is automatically generated!   //
//           Do not directly edit!           //
//                                           //
///////////////////////////////////////////////

// Spec version = 2099d6a309eb237d31b9c5fc1071c36eca85d91f

import (
	"context"
	"fmt"
	"net/http"

	"github.com/Kyagara/equinox/api"
	"github.com/Kyagara/equinox/internal"
)

// # Riot API Reference
//
// [champion-mastery-v4]
//
// Note: this struct is automatically generated.
//
// [champion-mastery-v4]: https://developer.riotgames.com/apis#champion-mastery-v4
type ChampionMasteryV4 struct {
	internal *internal.Client
}

// Get all champion mastery entries sorted by number of champion points descending.
//
// # Parameters
//   - `route` - Route to query.
//   - `encryptedPUUID` (required, in path)
//
// # Riot API Reference
//
// [champion-mastery-v4.getAllChampionMasteriesByPUUID]
//
// Note: this method is automatically generated.
//
// [champion-mastery-v4.getAllChampionMasteriesByPUUID]: https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getAllChampionMasteriesByPUUID
func (e *ChampionMasteryV4) AllMasteriesByPUUID(ctx context.Context, route PlatformRoute, encryptedPUUID string) ([]ChampionMasteryV4DTO, error) {
	logger := e.internal.Logger("LOL_ChampionMasteryV4_AllMasteriesByPUUID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/champion-mastery/v4/champion-masteries/by-puuid/%v", encryptedPUUID), "champion-mastery-v4.getAllChampionMasteriesByPUUID", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new([]ChampionMasteryV4DTO), err
	}
	var data []ChampionMasteryV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new([]ChampionMasteryV4DTO), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// Get a champion mastery by puuid and champion ID.
//
// # Parameters
//   - `route` - Route to query.
//   - `encryptedPUUID` (required, in path)
//   - `championId` (required, in path) - Champion ID to retrieve Champion Mastery.
//
// # Riot API Reference
//
// [champion-mastery-v4.getChampionMasteryByPUUID]
//
// Note: this method is automatically generated.
//
// [champion-mastery-v4.getChampionMasteryByPUUID]: https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMasteryByPUUID
func (e *ChampionMasteryV4) MasteryByPUUID(ctx context.Context, route PlatformRoute, encryptedPUUID string, championId int64) (*ChampionMasteryV4DTO, error) {
	logger := e.internal.Logger("LOL_ChampionMasteryV4_MasteryByPUUID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/champion-mastery/v4/champion-masteries/by-puuid/%v/by-champion/%v", encryptedPUUID, championId), "champion-mastery-v4.getChampionMasteryByPUUID", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data ChampionMasteryV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Get specified number of top champion mastery entries sorted by number of champion points descending.
//
// # Parameters
//   - `route` - Route to query.
//   - `encryptedPUUID` (required, in path)
//   - `count` (optional, in query) - Number of entries to retrieve, defaults to 3.
//
// # Riot API Reference
//
// [champion-mastery-v4.getTopChampionMasteriesByPUUID]
//
// Note: this method is automatically generated.
//
// [champion-mastery-v4.getTopChampionMasteriesByPUUID]: https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getTopChampionMasteriesByPUUID
func (e *ChampionMasteryV4) TopMasteriesByPUUID(ctx context.Context, route PlatformRoute, encryptedPUUID string, count int32) ([]ChampionMasteryV4DTO, error) {
	logger := e.internal.Logger("LOL_ChampionMasteryV4_TopMasteriesByPUUID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/champion-mastery/v4/champion-masteries/by-puuid/%v/top", encryptedPUUID), "champion-mastery-v4.getTopChampionMasteriesByPUUID", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new([]ChampionMasteryV4DTO), err
	}
	values := equinoxReq.Request.URL.Query()
	if count != -1 {
		values.Set("count", fmt.Sprint(count))
	}
	equinoxReq.Request.URL.RawQuery = values.Encode()
	var data []ChampionMasteryV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new([]ChampionMasteryV4DTO), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// Get all champion mastery entries sorted by number of champion points descending,
//
// # Parameters
//   - `route` - Route to query.
//   - `encryptedSummonerId` (required, in path) - Summoner ID associated with the player
//
// # Riot API Reference
//
// [champion-mastery-v4.getAllChampionMasteries]
//
// Note: this method is automatically generated.
//
// [champion-mastery-v4.getAllChampionMasteries]: https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getAllChampionMasteries
func (e *ChampionMasteryV4) AllMasteriesBySummonerID(ctx context.Context, route PlatformRoute, encryptedSummonerId string) ([]ChampionMasteryV4DTO, error) {
	logger := e.internal.Logger("LOL_ChampionMasteryV4_AllMasteriesBySummonerID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/champion-mastery/v4/champion-masteries/by-summoner/%v", encryptedSummonerId), "champion-mastery-v4.getAllChampionMasteries", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new([]ChampionMasteryV4DTO), err
	}
	var data []ChampionMasteryV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new([]ChampionMasteryV4DTO), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// Get a champion mastery by player ID and champion ID.
//
// # Parameters
//   - `route` - Route to query.
//   - `championId` (required, in path) - Champion ID to retrieve Champion Mastery for
//   - `encryptedSummonerId` (required, in path) - Summoner ID associated with the player
//
// # Riot API Reference
//
// [champion-mastery-v4.getChampionMastery]
//
// Note: this method is automatically generated.
//
// [champion-mastery-v4.getChampionMastery]: https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMastery
func (e *ChampionMasteryV4) MasteryBySummonerID(ctx context.Context, route PlatformRoute, encryptedSummonerId string, championId int64) (*ChampionMasteryV4DTO, error) {
	logger := e.internal.Logger("LOL_ChampionMasteryV4_MasteryBySummonerID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/champion-mastery/v4/champion-masteries/by-summoner/%v/by-champion/%v", encryptedSummonerId, championId), "champion-mastery-v4.getChampionMastery", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data ChampionMasteryV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Get specified number of top champion mastery entries sorted by number of champion points descending.
//
// # Parameters
//   - `route` - Route to query.
//   - `encryptedSummonerId` (required, in path) - Summoner ID associated with the player
//   - `count` (optional, in query) - Number of entries to retrieve, defaults to 3
//
// # Riot API Reference
//
// [champion-mastery-v4.getTopChampionMasteries]
//
// Note: this method is automatically generated.
//
// [champion-mastery-v4.getTopChampionMasteries]: https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getTopChampionMasteries
func (e *ChampionMasteryV4) TopMasteriesBySummonerID(ctx context.Context, route PlatformRoute, encryptedSummonerId string, count int32) ([]ChampionMasteryV4DTO, error) {
	logger := e.internal.Logger("LOL_ChampionMasteryV4_TopMasteriesBySummonerID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/champion-mastery/v4/champion-masteries/by-summoner/%v/top", encryptedSummonerId), "champion-mastery-v4.getTopChampionMasteries", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new([]ChampionMasteryV4DTO), err
	}
	values := equinoxReq.Request.URL.Query()
	if count != -1 {
		values.Set("count", fmt.Sprint(count))
	}
	equinoxReq.Request.URL.RawQuery = values.Encode()
	var data []ChampionMasteryV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new([]ChampionMasteryV4DTO), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// Get a player's total champion mastery score, which is the sum of individual champion mastery levels.
//
// # Parameters
//   - `route` - Route to query.
//   - `encryptedPUUID` (required, in path)
//
// # Riot API Reference
//
// [champion-mastery-v4.getChampionMasteryScoreByPUUID]
//
// Note: this method is automatically generated.
//
// [champion-mastery-v4.getChampionMasteryScoreByPUUID]: https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMasteryScoreByPUUID
func (e *ChampionMasteryV4) MasteryScoreByPUUID(ctx context.Context, route PlatformRoute, encryptedPUUID string) (int32, error) {
	logger := e.internal.Logger("LOL_ChampionMasteryV4_MasteryScoreByPUUID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/champion-mastery/v4/scores/by-puuid/%v", encryptedPUUID), "champion-mastery-v4.getChampionMasteryScoreByPUUID", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new(int32), err
	}
	var data int32
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new(int32), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// Get a player's total champion mastery score, which is the sum of individual champion mastery levels.
//
// # Parameters
//   - `route` - Route to query.
//   - `encryptedSummonerId` (required, in path) - Summoner ID associated with the player
//
// # Riot API Reference
//
// [champion-mastery-v4.getChampionMasteryScore]
//
// Note: this method is automatically generated.
//
// [champion-mastery-v4.getChampionMasteryScore]: https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMasteryScore
func (e *ChampionMasteryV4) ScoreBySummonerID(ctx context.Context, route PlatformRoute, encryptedSummonerId string) (int32, error) {
	logger := e.internal.Logger("LOL_ChampionMasteryV4_ScoreBySummonerID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/champion-mastery/v4/scores/by-summoner/%v", encryptedSummonerId), "champion-mastery-v4.getChampionMasteryScore", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new(int32), err
	}
	var data int32
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new(int32), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// # Riot API Reference
//
// [champion-v3]
//
// Note: this struct is automatically generated.
//
// [champion-v3]: https://developer.riotgames.com/apis#champion-v3
type ChampionV3 struct {
	internal *internal.Client
}

// Returns champion rotations, including free-to-play and low-level free-to-play rotations (REST)
//
// # Parameters
//   - `route` - Route to query.
//
// # Riot API Reference
//
// [champion-v3.getChampionInfo]
//
// Note: this method is automatically generated.
//
// [champion-v3.getChampionInfo]: https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampionInfo
func (e *ChampionV3) Rotation(ctx context.Context, route PlatformRoute) (*ChampionRotationV3DTO, error) {
	logger := e.internal.Logger("LOL_ChampionV3_Rotation")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, "/lol/platform/v3/champion-rotations", "champion-v3.getChampionInfo", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data ChampionRotationV3DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// # Riot API Reference
//
// [clash-v1]
//
// Note: this struct is automatically generated.
//
// [clash-v1]: https://developer.riotgames.com/apis#clash-v1
type ClashV1 struct {
	internal *internal.Client
}

// Get players by summoner ID.
//
// # Implementation Notes
//
// This endpoint returns a list of active Clash players for a given summoner ID. If a summoner registers for multiple tournaments at the same time (e.g., Saturday and Sunday) then both registrations would appear in this list.
//
// # Parameters
//   - `route` - Route to query.
//   - `summonerId` (required, in path)
//
// # Riot API Reference
//
// [clash-v1.getPlayersBySummoner]
//
// Note: this method is automatically generated.
//
// [clash-v1.getPlayersBySummoner]: https://developer.riotgames.com/api-methods/#clash-v1/GET_getPlayersBySummoner
func (e *ClashV1) SummonerEntriesBySummonerID(ctx context.Context, route PlatformRoute, summonerId string) ([]PlayerV1DTO, error) {
	logger := e.internal.Logger("LOL_ClashV1_SummonerEntriesBySummonerID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/clash/v1/players/by-summoner/%v", summonerId), "clash-v1.getPlayersBySummoner", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new([]PlayerV1DTO), err
	}
	var data []PlayerV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new([]PlayerV1DTO), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// Get team by ID.
//
// # Parameters
//   - `route` - Route to query.
//   - `teamId` (required, in path)
//
// # Riot API Reference
//
// [clash-v1.getTeamById]
//
// Note: this method is automatically generated.
//
// [clash-v1.getTeamById]: https://developer.riotgames.com/api-methods/#clash-v1/GET_getTeamById
func (e *ClashV1) TeamByTeamID(ctx context.Context, route PlatformRoute, teamId string) (*TeamV1DTO, error) {
	logger := e.internal.Logger("LOL_ClashV1_TeamByTeamID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/clash/v1/teams/%v", teamId), "clash-v1.getTeamById", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data TeamV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Get all active or upcoming tournaments.
//
// # Parameters
//   - `route` - Route to query.
//
// # Riot API Reference
//
// [clash-v1.getTournaments]
//
// Note: this method is automatically generated.
//
// [clash-v1.getTournaments]: https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournaments
func (e *ClashV1) Tournaments(ctx context.Context, route PlatformRoute) ([]TournamentV1DTO, error) {
	logger := e.internal.Logger("LOL_ClashV1_Tournaments")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, "/lol/clash/v1/tournaments", "clash-v1.getTournaments", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new([]TournamentV1DTO), err
	}
	var data []TournamentV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new([]TournamentV1DTO), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// Get tournament by team ID.
//
// # Parameters
//   - `route` - Route to query.
//   - `teamId` (required, in path)
//
// # Riot API Reference
//
// [clash-v1.getTournamentByTeam]
//
// Note: this method is automatically generated.
//
// [clash-v1.getTournamentByTeam]: https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournamentByTeam
func (e *ClashV1) ByTeamID(ctx context.Context, route PlatformRoute, teamId string) (*TournamentV1DTO, error) {
	logger := e.internal.Logger("LOL_ClashV1_ByTeamID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/clash/v1/tournaments/by-team/%v", teamId), "clash-v1.getTournamentByTeam", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data TournamentV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Get tournament by ID.
//
// # Parameters
//   - `route` - Route to query.
//   - `tournamentId` (required, in path)
//
// # Riot API Reference
//
// [clash-v1.getTournamentById]
//
// Note: this method is automatically generated.
//
// [clash-v1.getTournamentById]: https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournamentById
func (e *ClashV1) ByID(ctx context.Context, route PlatformRoute, tournamentId int32) (*TournamentV1DTO, error) {
	logger := e.internal.Logger("LOL_ClashV1_ByID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/clash/v1/tournaments/%v", tournamentId), "clash-v1.getTournamentById", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data TournamentV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// # Riot API Reference
//
// [league-exp-v4]
//
// Note: this struct is automatically generated.
//
// [league-exp-v4]: https://developer.riotgames.com/apis#league-exp-v4
type LeagueExpV4 struct {
	internal *internal.Client
}

// Get all the league entries.
//
// # Parameters
//   - `route` - Route to query.
//   - `queue` (required, in path) - Note that the queue value must be a valid ranked queue.
//   - `tier` (required, in path)
//   - `division` (required, in path)
//   - `page` (optional, in query) - Defaults to 1. Starts with page 1.
//
// # Riot API Reference
//
// [league-exp-v4.getLeagueEntries]
//
// Note: this method is automatically generated.
//
// [league-exp-v4.getLeagueEntries]: https://developer.riotgames.com/api-methods/#league-exp-v4/GET_getLeagueEntries
func (e *LeagueExpV4) Entries(ctx context.Context, route PlatformRoute, queue QueueType, tier Tier, division Division, page int32) ([]LeagueEntryV4DTO, error) {
	logger := e.internal.Logger("LOL_LeagueExpV4_Entries")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/league-exp/v4/entries/%v/%v/%v", queue, tier, division), "league-exp-v4.getLeagueEntries", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new([]LeagueEntryV4DTO), err
	}
	values := equinoxReq.Request.URL.Query()
	if page != -1 {
		values.Set("page", fmt.Sprint(page))
	}
	equinoxReq.Request.URL.RawQuery = values.Encode()
	var data []LeagueEntryV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new([]LeagueEntryV4DTO), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// # Riot API Reference
//
// [league-v4]
//
// Note: this struct is automatically generated.
//
// [league-v4]: https://developer.riotgames.com/apis#league-v4
type LeagueV4 struct {
	internal *internal.Client
}

// Get the challenger league for given queue.
//
// # Parameters
//   - `route` - Route to query.
//   - `queue` (required, in path)
//
// # Riot API Reference
//
// [league-v4.getChallengerLeague]
//
// Note: this method is automatically generated.
//
// [league-v4.getChallengerLeague]: https://developer.riotgames.com/api-methods/#league-v4/GET_getChallengerLeague
func (e *LeagueV4) ChallengerByQueue(ctx context.Context, route PlatformRoute, queue QueueType) (*LeagueListV4DTO, error) {
	logger := e.internal.Logger("LOL_LeagueV4_ChallengerByQueue")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/league/v4/challengerleagues/by-queue/%v", queue), "league-v4.getChallengerLeague", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data LeagueListV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Get league entries in all queues for a given summoner ID.
//
// # Parameters
//   - `route` - Route to query.
//   - `encryptedSummonerId` (required, in path)
//
// # Riot API Reference
//
// [league-v4.getLeagueEntriesForSummoner]
//
// Note: this method is automatically generated.
//
// [league-v4.getLeagueEntriesForSummoner]: https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntriesForSummoner
func (e *LeagueV4) SummonerEntries(ctx context.Context, route PlatformRoute, encryptedSummonerId string) ([]LeagueEntryV4DTO, error) {
	logger := e.internal.Logger("LOL_LeagueV4_SummonerEntries")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/league/v4/entries/by-summoner/%v", encryptedSummonerId), "league-v4.getLeagueEntriesForSummoner", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new([]LeagueEntryV4DTO), err
	}
	var data []LeagueEntryV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new([]LeagueEntryV4DTO), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// Get all the league entries.
//
// # Parameters
//   - `route` - Route to query.
//   - `division` (required, in path)
//   - `tier` (required, in path)
//   - `queue` (required, in path) - Note that the queue value must be a valid ranked queue.
//   - `page` (optional, in query) - Defaults to 1. Starts with page 1.
//
// # Riot API Reference
//
// [league-v4.getLeagueEntries]
//
// Note: this method is automatically generated.
//
// [league-v4.getLeagueEntries]: https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntries
func (e *LeagueV4) Entries(ctx context.Context, route PlatformRoute, queue QueueType, tier Tier, division Division, page int32) ([]LeagueEntryV4DTO, error) {
	logger := e.internal.Logger("LOL_LeagueV4_Entries")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/league/v4/entries/%v/%v/%v", queue, tier, division), "league-v4.getLeagueEntries", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new([]LeagueEntryV4DTO), err
	}
	values := equinoxReq.Request.URL.Query()
	if page != -1 {
		values.Set("page", fmt.Sprint(page))
	}
	equinoxReq.Request.URL.RawQuery = values.Encode()
	var data []LeagueEntryV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new([]LeagueEntryV4DTO), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// Get the grandmaster league of a specific queue.
//
// # Parameters
//   - `route` - Route to query.
//   - `queue` (required, in path)
//
// # Riot API Reference
//
// [league-v4.getGrandmasterLeague]
//
// Note: this method is automatically generated.
//
// [league-v4.getGrandmasterLeague]: https://developer.riotgames.com/api-methods/#league-v4/GET_getGrandmasterLeague
func (e *LeagueV4) GrandmasterByQueue(ctx context.Context, route PlatformRoute, queue QueueType) (*LeagueListV4DTO, error) {
	logger := e.internal.Logger("LOL_LeagueV4_GrandmasterByQueue")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/league/v4/grandmasterleagues/by-queue/%v", queue), "league-v4.getGrandmasterLeague", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data LeagueListV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Get league with given ID, including inactive entries.
//
// # Parameters
//   - `route` - Route to query.
//   - `leagueId` (required, in path) - The UUID of the league.
//
// # Riot API Reference
//
// [league-v4.getLeagueById]
//
// Note: this method is automatically generated.
//
// [league-v4.getLeagueById]: https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueById
func (e *LeagueV4) ByID(ctx context.Context, route PlatformRoute, leagueId string) (*LeagueListV4DTO, error) {
	logger := e.internal.Logger("LOL_LeagueV4_ByID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/league/v4/leagues/%v", leagueId), "league-v4.getLeagueById", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data LeagueListV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Get the master league for given queue.
//
// # Parameters
//   - `route` - Route to query.
//   - `queue` (required, in path)
//
// # Riot API Reference
//
// [league-v4.getMasterLeague]
//
// Note: this method is automatically generated.
//
// [league-v4.getMasterLeague]: https://developer.riotgames.com/api-methods/#league-v4/GET_getMasterLeague
func (e *LeagueV4) MasterByQueue(ctx context.Context, route PlatformRoute, queue QueueType) (*LeagueListV4DTO, error) {
	logger := e.internal.Logger("LOL_LeagueV4_MasterByQueue")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/league/v4/masterleagues/by-queue/%v", queue), "league-v4.getMasterLeague", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data LeagueListV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// # Riot API Reference
//
// [lol-challenges-v1]
//
// Note: this struct is automatically generated.
//
// [lol-challenges-v1]: https://developer.riotgames.com/apis#lol-challenges-v1
type ChallengesV1 struct {
	internal *internal.Client
}

// List of all basic challenge configuration information (includes all translations for names and descriptions)
//
// # Parameters
//   - `route` - Route to query.
//
// # Riot API Reference
//
// [lol-challenges-v1.getAllChallengeConfigs]
//
// Note: this method is automatically generated.
//
// [lol-challenges-v1.getAllChallengeConfigs]: https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getAllChallengeConfigs
func (e *ChallengesV1) AllConfigs(ctx context.Context, route PlatformRoute) ([]ChallengeConfigInfoV1DTO, error) {
	logger := e.internal.Logger("LOL_ChallengesV1_AllConfigs")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, "/lol/challenges/v1/challenges/config", "lol-challenges-v1.getAllChallengeConfigs", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new([]ChallengeConfigInfoV1DTO), err
	}
	var data []ChallengeConfigInfoV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new([]ChallengeConfigInfoV1DTO), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// Map of level to percentile of players who have achieved it - keys: ChallengeId -> Season -> Level -> percentile of players who achieved it
//
// # Parameters
//   - `route` - Route to query.
//
// # Riot API Reference
//
// [lol-challenges-v1.getAllChallengePercentiles]
//
// Note: this method is automatically generated.
//
// [lol-challenges-v1.getAllChallengePercentiles]: https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getAllChallengePercentiles
func (e *ChallengesV1) AllPercentiles(ctx context.Context, route PlatformRoute) (map[int64]map[Tier]float64, error) {
	logger := e.internal.Logger("LOL_ChallengesV1_AllPercentiles")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, "/lol/challenges/v1/challenges/percentiles", "lol-challenges-v1.getAllChallengePercentiles", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new(map[int64]map[Tier]float64), err
	}
	var data map[int64]map[Tier]float64
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new(map[int64]map[Tier]float64), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// Get challenge configuration (REST)
//
// # Parameters
//   - `route` - Route to query.
//   - `challengeId` (required, in path)
//
// # Riot API Reference
//
// [lol-challenges-v1.getChallengeConfigs]
//
// Note: this method is automatically generated.
//
// [lol-challenges-v1.getChallengeConfigs]: https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getChallengeConfigs
func (e *ChallengesV1) ConfigByID(ctx context.Context, route PlatformRoute, challengeId int64) (*ChallengeConfigInfoV1DTO, error) {
	logger := e.internal.Logger("LOL_ChallengesV1_ConfigByID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/challenges/v1/challenges/%v/config", challengeId), "lol-challenges-v1.getChallengeConfigs", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data ChallengeConfigInfoV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Return top players for each level. Level must be MASTER, GRANDMASTER or CHALLENGER.
//
// # Parameters
//   - `route` - Route to query.
//   - `level` (required, in path)
//   - `challengeId` (required, in path)
//   - `limit` (optional, in query)
//
// # Riot API Reference
//
// [lol-challenges-v1.getChallengeLeaderboards]
//
// Note: this method is automatically generated.
//
// [lol-challenges-v1.getChallengeLeaderboards]: https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getChallengeLeaderboards
func (e *ChallengesV1) Leaderboards(ctx context.Context, route PlatformRoute, challengeId int64, level Tier, limit int32) ([]ApexPlayerInfoV1DTO, error) {
	logger := e.internal.Logger("LOL_ChallengesV1_Leaderboards")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/challenges/v1/challenges/%v/leaderboards/by-level/%v", challengeId, level), "lol-challenges-v1.getChallengeLeaderboards", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new([]ApexPlayerInfoV1DTO), err
	}
	values := equinoxReq.Request.URL.Query()
	if limit != -1 {
		values.Set("limit", fmt.Sprint(limit))
	}
	equinoxReq.Request.URL.RawQuery = values.Encode()
	var data []ApexPlayerInfoV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new([]ApexPlayerInfoV1DTO), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// Map of level to percentile of players who have achieved it
//
// # Parameters
//   - `route` - Route to query.
//   - `challengeId` (required, in path)
//
// # Riot API Reference
//
// [lol-challenges-v1.getChallengePercentiles]
//
// Note: this method is automatically generated.
//
// [lol-challenges-v1.getChallengePercentiles]: https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getChallengePercentiles
func (e *ChallengesV1) Percentiles(ctx context.Context, route PlatformRoute, challengeId int64) (map[Tier]float64, error) {
	logger := e.internal.Logger("LOL_ChallengesV1_Percentiles")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/challenges/v1/challenges/%v/percentiles", challengeId), "lol-challenges-v1.getChallengePercentiles", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new(map[Tier]float64), err
	}
	var data map[Tier]float64
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new(map[Tier]float64), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// Returns player information with list of all progressed challenges (REST)
//
// # Parameters
//   - `route` - Route to query.
//   - `puuid` (required, in path)
//
// # Riot API Reference
//
// [lol-challenges-v1.getPlayerData]
//
// Note: this method is automatically generated.
//
// [lol-challenges-v1.getPlayerData]: https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getPlayerData
func (e *ChallengesV1) ByPUUID(ctx context.Context, route PlatformRoute, puuid string) (*PlayerInfoV1DTO, error) {
	logger := e.internal.Logger("LOL_ChallengesV1_ByPUUID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/challenges/v1/player-data/%v", puuid), "lol-challenges-v1.getPlayerData", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data PlayerInfoV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// # Riot API Reference
//
// [lol-status-v3]
//
// Note: this struct is automatically generated.
//
// [lol-status-v3]: https://developer.riotgames.com/apis#lol-status-v3
type StatusV3 struct {
	internal *internal.Client
}

// Get League of Legends status for the given shard.
//
// # Rate Limit Notes
//
// Requests to this API are not counted against the application Rate Limits.
//
// # Parameters
//   - `route` - Route to query.
//
// # Riot API Reference
//
// [lol-status-v3.getShardData]
//
// Note: this method is automatically generated.
//
// [lol-status-v3.getShardData]: https://developer.riotgames.com/api-methods/#lol-status-v3/GET_getShardData
func (e *StatusV3) Shard(ctx context.Context, route PlatformRoute) (*ShardStatusV3DTO, error) {
	logger := e.internal.Logger("LOL_StatusV3_Shard")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, "/lol/status/v3/shard-data", "lol-status-v3.getShardData", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data ShardStatusV3DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// # Riot API Reference
//
// [lol-status-v4]
//
// Note: this struct is automatically generated.
//
// [lol-status-v4]: https://developer.riotgames.com/apis#lol-status-v4
type StatusV4 struct {
	internal *internal.Client
}

// Get League of Legends status for the given platform.
//
// # Parameters
//   - `route` - Route to query.
//
// # Riot API Reference
//
// [lol-status-v4.getPlatformData]
//
// Note: this method is automatically generated.
//
// [lol-status-v4.getPlatformData]: https://developer.riotgames.com/api-methods/#lol-status-v4/GET_getPlatformData
func (e *StatusV4) Platform(ctx context.Context, route PlatformRoute) (*PlatformDataV4DTO, error) {
	logger := e.internal.Logger("LOL_StatusV4_Platform")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, "/lol/status/v4/platform-data", "lol-status-v4.getPlatformData", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data PlatformDataV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// # Riot API Reference
//
// [match-v5]
//
// Note: this struct is automatically generated.
//
// [match-v5]: https://developer.riotgames.com/apis#match-v5
type MatchV5 struct {
	internal *internal.Client
}

// Get a list of match ids by puuid
//
// # Parameters
//   - `route` - Route to query.
//   - `puuid` (required, in path)
//   - `startTime` (optional, in query) - Epoch timestamp in seconds. The matchlist started storing timestamps on June 16th, 2021. Any matches played before June 16th, 2021 won't be included in the results if the startTime filter is set.
//   - `endTime` (optional, in query) - Epoch timestamp in seconds.
//   - `queue` (optional, in query) - Filter the list of match ids by a specific queue id. This filter is mutually inclusive of the type filter meaning any match ids returned must match both the queue and type filters.
//   - `type` (optional, in query) - Filter the list of match ids by the type of match. This filter is mutually inclusive of the queue filter meaning any match ids returned must match both the queue and type filters.
//   - `start` (optional, in query) - Defaults to 0. Start index.
//   - `count` (optional, in query) - Defaults to 20. Valid values: 0 to 100. Number of match ids to return.
//
// # Riot API Reference
//
// [match-v5.getMatchIdsByPUUID]
//
// Note: this method is automatically generated.
//
// [match-v5.getMatchIdsByPUUID]: https://developer.riotgames.com/api-methods/#match-v5/GET_getMatchIdsByPUUID
func (e *MatchV5) ListByPUUID(ctx context.Context, route api.RegionalRoute, puuid string, startTime int64, endTime int64, queue int32, type_ string, start int32, count int32) ([]string, error) {
	logger := e.internal.Logger("LOL_MatchV5_ListByPUUID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/match/v5/matches/by-puuid/%v/ids", puuid), "match-v5.getMatchIdsByPUUID", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new([]string), err
	}
	values := equinoxReq.Request.URL.Query()
	if startTime != -1 {
		values.Set("startTime", fmt.Sprint(startTime))
	}
	if endTime != -1 {
		values.Set("endTime", fmt.Sprint(endTime))
	}
	if queue != -1 {
		values.Set("queue", fmt.Sprint(queue))
	}
	if type_ != "" {
		values.Set("type", type_)
	}
	if start != -1 {
		values.Set("start", fmt.Sprint(start))
	}
	if count != -1 {
		values.Set("count", fmt.Sprint(count))
	}
	equinoxReq.Request.URL.RawQuery = values.Encode()
	var data []string
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new([]string), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// Get a match by match id
//
// # Parameters
//   - `route` - Route to query.
//   - `matchId` (required, in path)
//
// # Riot API Reference
//
// [match-v5.getMatch]
//
// Note: this method is automatically generated.
//
// [match-v5.getMatch]: https://developer.riotgames.com/api-methods/#match-v5/GET_getMatch
func (e *MatchV5) ByID(ctx context.Context, route api.RegionalRoute, matchId string) (*MatchV5DTO, error) {
	logger := e.internal.Logger("LOL_MatchV5_ByID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/match/v5/matches/%v", matchId), "match-v5.getMatch", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data MatchV5DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Get a match timeline by match id
//
// # Parameters
//   - `route` - Route to query.
//   - `matchId` (required, in path)
//
// # Riot API Reference
//
// [match-v5.getTimeline]
//
// Note: this method is automatically generated.
//
// [match-v5.getTimeline]: https://developer.riotgames.com/api-methods/#match-v5/GET_getTimeline
func (e *MatchV5) Timeline(ctx context.Context, route api.RegionalRoute, matchId string) (*MatchTimelineV5DTO, error) {
	logger := e.internal.Logger("LOL_MatchV5_Timeline")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/match/v5/matches/%v/timeline", matchId), "match-v5.getTimeline", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data MatchTimelineV5DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// # Riot API Reference
//
// [spectator-v4]
//
// Note: this struct is automatically generated.
//
// [spectator-v4]: https://developer.riotgames.com/apis#spectator-v4
type SpectatorV4 struct {
	internal *internal.Client
}

// Get current game information for the given summoner ID.
//
// # Parameters
//   - `route` - Route to query.
//   - `encryptedSummonerId` (required, in path) - The ID of the summoner.
//
// # Riot API Reference
//
// [spectator-v4.getCurrentGameInfoBySummoner]
//
// Note: this method is automatically generated.
//
// [spectator-v4.getCurrentGameInfoBySummoner]: https://developer.riotgames.com/api-methods/#spectator-v4/GET_getCurrentGameInfoBySummoner
func (e *SpectatorV4) CurrentGameBySummonerID(ctx context.Context, route PlatformRoute, encryptedSummonerId string) (*CurrentGameInfoV4DTO, error) {
	logger := e.internal.Logger("LOL_SpectatorV4_CurrentGameBySummonerID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/spectator/v4/active-games/by-summoner/%v", encryptedSummonerId), "spectator-v4.getCurrentGameInfoBySummoner", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data CurrentGameInfoV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Get list of featured games.
//
// # Parameters
//   - `route` - Route to query.
//
// # Riot API Reference
//
// [spectator-v4.getFeaturedGames]
//
// Note: this method is automatically generated.
//
// [spectator-v4.getFeaturedGames]: https://developer.riotgames.com/api-methods/#spectator-v4/GET_getFeaturedGames
func (e *SpectatorV4) Featured(ctx context.Context, route PlatformRoute) (*FeaturedGamesV4DTO, error) {
	logger := e.internal.Logger("LOL_SpectatorV4_Featured")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, "/lol/spectator/v4/featured-games", "spectator-v4.getFeaturedGames", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data FeaturedGamesV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// # Riot API Reference
//
// [summoner-v4]
//
// Note: this struct is automatically generated.
//
// [summoner-v4]: https://developer.riotgames.com/apis#summoner-v4
type SummonerV4 struct {
	internal *internal.Client
}

// Get a summoner by its RSO encrypted PUUID.
//
// # Parameters
//   - `route` - Route to query.
//   - `rsoPUUID` (required, in path) - Summoner ID
//
// # Riot API Reference
//
// [summoner-v4.getByRSOPUUID]
//
// Note: this method is automatically generated.
//
// [summoner-v4.getByRSOPUUID]: https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByRSOPUUID
func (e *SummonerV4) ByRSOPUUID(ctx context.Context, route PlatformRoute, rsoPUUID string) (*SummonerV4DTO, error) {
	logger := e.internal.Logger("LOL_SummonerV4_ByRSOPUUID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/fulfillment/v1/summoners/by-puuid/%v", rsoPUUID), "summoner-v4.getByRSOPUUID", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data SummonerV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Get a summoner by account ID.
//
// # Parameters
//   - `route` - Route to query.
//   - `encryptedAccountId` (required, in path)
//
// # Riot API Reference
//
// [summoner-v4.getByAccountId]
//
// Note: this method is automatically generated.
//
// [summoner-v4.getByAccountId]: https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByAccountId
func (e *SummonerV4) ByAccountID(ctx context.Context, route PlatformRoute, encryptedAccountId string) (*SummonerV4DTO, error) {
	logger := e.internal.Logger("LOL_SummonerV4_ByAccountID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/summoner/v4/summoners/by-account/%v", encryptedAccountId), "summoner-v4.getByAccountId", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data SummonerV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Get a summoner by summoner name.
//
// # Parameters
//   - `route` - Route to query.
//   - `summonerName` (required, in path) - Summoner Name
//
// # Riot API Reference
//
// [summoner-v4.getBySummonerName]
//
// Note: this method is automatically generated.
//
// [summoner-v4.getBySummonerName]: https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerName
func (e *SummonerV4) ByName(ctx context.Context, route PlatformRoute, summonerName string) (*SummonerV4DTO, error) {
	logger := e.internal.Logger("LOL_SummonerV4_ByName")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/summoner/v4/summoners/by-name/%v", summonerName), "summoner-v4.getBySummonerName", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data SummonerV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Get a summoner by PUUID.
//
// # Parameters
//   - `route` - Route to query.
//   - `encryptedPUUID` (required, in path) - Summoner ID
//
// # Riot API Reference
//
// [summoner-v4.getByPUUID]
//
// Note: this method is automatically generated.
//
// [summoner-v4.getByPUUID]: https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByPUUID
func (e *SummonerV4) ByPUUID(ctx context.Context, route PlatformRoute, encryptedPUUID string) (*SummonerV4DTO, error) {
	logger := e.internal.Logger("LOL_SummonerV4_ByPUUID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/summoner/v4/summoners/by-puuid/%v", encryptedPUUID), "summoner-v4.getByPUUID", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data SummonerV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Get a summoner by access token.
//
// # Parameters
//   - `route` - Route to query.
//   - `authorization` (optional, in header) - Bearer token
//
// # Riot API Reference
//
// [summoner-v4.getByAccessToken]
//
// Note: this method is automatically generated.
//
// [summoner-v4.getByAccessToken]: https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByAccessToken
func (e *SummonerV4) ByAccessToken(ctx context.Context, route PlatformRoute, authorization string) (*SummonerV4DTO, error) {
	logger := e.internal.Logger("LOL_SummonerV4_ByAccessToken")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, "/lol/summoner/v4/summoners/me", "summoner-v4.getByAccessToken", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	if authorization == "" {
		return new(SummonerV4DTO), fmt.Errorf("'authorization' header is required")
	}
	equinoxReq.Request.Header.Set("authorization", authorization)
	var data SummonerV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Get a summoner by summoner ID.
//
// # Parameters
//   - `route` - Route to query.
//   - `encryptedSummonerId` (required, in path) - Summoner ID
//
// # Riot API Reference
//
// [summoner-v4.getBySummonerId]
//
// Note: this method is automatically generated.
//
// [summoner-v4.getBySummonerId]: https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerId
func (e *SummonerV4) BySummonerID(ctx context.Context, route PlatformRoute, encryptedSummonerId string) (*SummonerV4DTO, error) {
	logger := e.internal.Logger("LOL_SummonerV4_BySummonerID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/summoner/v4/summoners/%v", encryptedSummonerId), "summoner-v4.getBySummonerId", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data SummonerV4DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// # Riot API Reference
//
// [tournament-stub-v5]
//
// Note: this struct is automatically generated.
//
// [tournament-stub-v5]: https://developer.riotgames.com/apis#tournament-stub-v5
type TournamentStubV5 struct {
	internal *internal.Client
}

// Create a tournament code for the given tournament - Stub method
//
// # Parameters
//   - `route` - Route to query.
//   - `count` (optional, in query) - The number of codes to create (max 1000)
//   - `tournamentId` (required, in query) - The tournament ID
//
// # Riot API Reference
//
// [tournament-stub-v5.createTournamentCode]
//
// Note: this method is automatically generated.
//
// [tournament-stub-v5.createTournamentCode]: https://developer.riotgames.com/api-methods/#tournament-stub-v5/POST_createTournamentCode
func (e *TournamentStubV5) CreateTournamentCode(ctx context.Context, route api.RegionalRoute, body *StubTournamentCodeParametersV5DTO, count int32, tournamentId int64) ([]string, error) {
	logger := e.internal.Logger("LOL_TournamentStubV5_CreateTournamentCode")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodPost, route, "/lol/tournament-stub/v5/codes", "tournament-stub-v5.createTournamentCode", body)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new([]string), err
	}
	values := equinoxReq.Request.URL.Query()
	if count != -1 {
		values.Set("count", fmt.Sprint(count))
	}
	if tournamentId != -1 {
		values.Set("tournamentId", fmt.Sprint(tournamentId))
	}
	equinoxReq.Request.URL.RawQuery = values.Encode()
	var data []string
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new([]string), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// Returns the tournament code DTO associated with a tournament code string - Stub Method
//
// # Parameters
//   - `route` - Route to query.
//   - `tournamentCode` (required, in path) - The tournament code string.
//
// # Riot API Reference
//
// [tournament-stub-v5.getTournamentCode]
//
// Note: this method is automatically generated.
//
// [tournament-stub-v5.getTournamentCode]: https://developer.riotgames.com/api-methods/#tournament-stub-v5/GET_getTournamentCode
func (e *TournamentStubV5) TournamentCode(ctx context.Context, route api.RegionalRoute, tournamentCode string) (*StubTournamentCodeV5DTO, error) {
	logger := e.internal.Logger("LOL_TournamentStubV5_TournamentCode")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/tournament-stub/v5/codes/%v", tournamentCode), "tournament-stub-v5.getTournamentCode", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data StubTournamentCodeV5DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Gets a list of lobby events by tournament code - Stub method
//
// # Parameters
//   - `route` - Route to query.
//   - `tournamentCode` (required, in path) - The short code to look up lobby events for
//
// # Riot API Reference
//
// [tournament-stub-v5.getLobbyEventsByCode]
//
// Note: this method is automatically generated.
//
// [tournament-stub-v5.getLobbyEventsByCode]: https://developer.riotgames.com/api-methods/#tournament-stub-v5/GET_getLobbyEventsByCode
func (e *TournamentStubV5) LobbyEventsByCode(ctx context.Context, route api.RegionalRoute, tournamentCode string) (*StubLobbyEventWrapperV5DTO, error) {
	logger := e.internal.Logger("LOL_TournamentStubV5_LobbyEventsByCode")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/tournament-stub/v5/lobby-events/by-code/%v", tournamentCode), "tournament-stub-v5.getLobbyEventsByCode", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data StubLobbyEventWrapperV5DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Creates a tournament provider and returns its ID - Stub method
//
// # Implementation Notes
//
// Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
//
// # Parameters
//   - `route` - Route to query.
//
// # Riot API Reference
//
// [tournament-stub-v5.registerProviderData]
//
// Note: this method is automatically generated.
//
// [tournament-stub-v5.registerProviderData]: https://developer.riotgames.com/api-methods/#tournament-stub-v5/POST_registerProviderData
func (e *TournamentStubV5) RegisterProviderData(ctx context.Context, route api.RegionalRoute, body *StubProviderRegistrationParametersV5DTO) (int32, error) {
	logger := e.internal.Logger("LOL_TournamentStubV5_RegisterProviderData")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodPost, route, "/lol/tournament-stub/v5/providers", "tournament-stub-v5.registerProviderData", body)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new(int32), err
	}
	var data int32
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new(int32), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// Creates a tournament and returns its ID - Stub method
//
// # Parameters
//   - `route` - Route to query.
//
// # Riot API Reference
//
// [tournament-stub-v5.registerTournament]
//
// Note: this method is automatically generated.
//
// [tournament-stub-v5.registerTournament]: https://developer.riotgames.com/api-methods/#tournament-stub-v5/POST_registerTournament
func (e *TournamentStubV5) RegisterTournament(ctx context.Context, route api.RegionalRoute, body *StubTournamentRegistrationParametersV5DTO) (int32, error) {
	logger := e.internal.Logger("LOL_TournamentStubV5_RegisterTournament")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodPost, route, "/lol/tournament-stub/v5/tournaments", "tournament-stub-v5.registerTournament", body)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new(int32), err
	}
	var data int32
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new(int32), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// # Riot API Reference
//
// [tournament-v5]
//
// Note: this struct is automatically generated.
//
// [tournament-v5]: https://developer.riotgames.com/apis#tournament-v5
type TournamentV5 struct {
	internal *internal.Client
}

// Create a tournament code for the given tournament.
//
// # Parameters
//   - `route` - Route to query.
//   - `tournamentId` (required, in query) - The tournament ID
//   - `count` (optional, in query) - The number of codes to create (max 1000)
//
// # Riot API Reference
//
// [tournament-v5.createTournamentCode]
//
// Note: this method is automatically generated.
//
// [tournament-v5.createTournamentCode]: https://developer.riotgames.com/api-methods/#tournament-v5/POST_createTournamentCode
func (e *TournamentV5) CreateTournamentCode(ctx context.Context, route api.RegionalRoute, body *TournamentCodeParametersV5DTO, tournamentId int64, count int32) ([]string, error) {
	logger := e.internal.Logger("LOL_TournamentV5_CreateTournamentCode")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodPost, route, "/lol/tournament/v5/codes", "tournament-v5.createTournamentCode", body)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new([]string), err
	}
	values := equinoxReq.Request.URL.Query()
	if tournamentId != -1 {
		values.Set("tournamentId", fmt.Sprint(tournamentId))
	}
	if count != -1 {
		values.Set("count", fmt.Sprint(count))
	}
	equinoxReq.Request.URL.RawQuery = values.Encode()
	var data []string
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new([]string), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// Returns the tournament code DTO associated with a tournament code string.
//
// # Parameters
//   - `route` - Route to query.
//   - `tournamentCode` (required, in path) - The tournament code string.
//
// # Riot API Reference
//
// [tournament-v5.getTournamentCode]
//
// Note: this method is automatically generated.
//
// [tournament-v5.getTournamentCode]: https://developer.riotgames.com/api-methods/#tournament-v5/GET_getTournamentCode
func (e *TournamentV5) TournamentCode(ctx context.Context, route api.RegionalRoute, tournamentCode string) (*TournamentCodeV5DTO, error) {
	logger := e.internal.Logger("LOL_TournamentV5_TournamentCode")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/tournament/v5/codes/%v", tournamentCode), "tournament-v5.getTournamentCode", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data TournamentCodeV5DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Update the pick type, map, spectator type, or allowed puuids for a code.
//
// # Parameters
//   - `route` - Route to query.
//   - `tournamentCode` (required, in path) - The tournament code to update
//
// # Riot API Reference
//
// [tournament-v5.updateCode]
//
// Note: this method is automatically generated.
//
// [tournament-v5.updateCode]: https://developer.riotgames.com/api-methods/#tournament-v5/PUT_updateCode
func (e *TournamentV5) UpdateCode(ctx context.Context, route api.RegionalRoute, body *TournamentCodeUpdateParametersV5DTO, tournamentCode string) error {
	logger := e.internal.Logger("LOL_TournamentV5_UpdateCode")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodPut, route, fmt.Sprintf("/lol/tournament/v5/codes/%v", tournamentCode), "tournament-v5.updateCode", body)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil
	}

	err = e.internal.Execute(ctx, equinoxReq, nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil
	}
	logger.Debug().Msg("Method executed successfully")
	return nil
}

// Get games details
//
// # Implementation Notes
//
// Additional endpoint to get tournament games. From this endpoint, you are able to get participants PUUID (the callback doesn't contain this info).
//
// You can also use it to check if the game was recorded and validate callbacks. If the endpoint returns the game, it means a callback was attempted.
//
// This will only work for tournament codes created after November 10, 2023.
//
// # Parameters
//   - `route` - Route to query.
//   - `tournamentCode` (required, in path)
//
// # Riot API Reference
//
// [tournament-v5.getGames]
//
// Note: this method is automatically generated.
//
// [tournament-v5.getGames]: https://developer.riotgames.com/api-methods/#tournament-v5/GET_getGames
func (e *TournamentV5) Games(ctx context.Context, route api.RegionalRoute, tournamentCode string) ([]TournamentGamesV5DTO, error) {
	logger := e.internal.Logger("LOL_TournamentV5_Games")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/tournament/v5/games/by-code/%v", tournamentCode), "tournament-v5.getGames", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new([]TournamentGamesV5DTO), err
	}
	var data []TournamentGamesV5DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new([]TournamentGamesV5DTO), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// Gets a list of lobby events by tournament code.
//
// # Parameters
//   - `route` - Route to query.
//   - `tournamentCode` (required, in path) - The short code to look up lobby events for
//
// # Riot API Reference
//
// [tournament-v5.getLobbyEventsByCode]
//
// Note: this method is automatically generated.
//
// [tournament-v5.getLobbyEventsByCode]: https://developer.riotgames.com/api-methods/#tournament-v5/GET_getLobbyEventsByCode
func (e *TournamentV5) LobbyEventsByCode(ctx context.Context, route api.RegionalRoute, tournamentCode string) (*LobbyEventWrapperV5DTO, error) {
	logger := e.internal.Logger("LOL_TournamentV5_LobbyEventsByCode")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/lol/tournament/v5/lobby-events/by-code/%v", tournamentCode), "tournament-v5.getLobbyEventsByCode", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data LobbyEventWrapperV5DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Creates a tournament provider and returns its ID.
//
// # Implementation Notes
//
// Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
//
// # Parameters
//   - `route` - Route to query.
//
// # Riot API Reference
//
// [tournament-v5.registerProviderData]
//
// Note: this method is automatically generated.
//
// [tournament-v5.registerProviderData]: https://developer.riotgames.com/api-methods/#tournament-v5/POST_registerProviderData
func (e *TournamentV5) RegisterProviderData(ctx context.Context, route api.RegionalRoute, body *ProviderRegistrationParametersV5DTO) (int32, error) {
	logger := e.internal.Logger("LOL_TournamentV5_RegisterProviderData")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodPost, route, "/lol/tournament/v5/providers", "tournament-v5.registerProviderData", body)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new(int32), err
	}
	var data int32
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new(int32), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}

// Creates a tournament and returns its ID.
//
// # Parameters
//   - `route` - Route to query.
//
// # Riot API Reference
//
// [tournament-v5.registerTournament]
//
// Note: this method is automatically generated.
//
// [tournament-v5.registerTournament]: https://developer.riotgames.com/api-methods/#tournament-v5/POST_registerTournament
func (e *TournamentV5) RegisterTournament(ctx context.Context, route api.RegionalRoute, body *TournamentRegistrationParametersV5DTO) (int32, error) {
	logger := e.internal.Logger("LOL_TournamentV5_RegisterTournament")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodPost, route, "/lol/tournament/v5/tournaments", "tournament-v5.registerTournament", body)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return *new(int32), err
	}
	var data int32
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return *new(int32), err
	}
	logger.Debug().Msg("Method executed successfully")
	return data, nil
}
