package lol

///////////////////////////////////////////////
//                                           //
//                     !                     //
//   This file is automatically generated!   //
//           Do not directly edit!           //
//                                           //
///////////////////////////////////////////////

// Spec version = c5f59a3e27f5101b78b8c7eb9b3fb88318b4225d

// lol-challenges-v1.ApexPlayerInfoDto
type ChallengesApexPlayerInfoV1DTO struct {
	PUUID    string  `json:"puuid,omitempty"`
	Position int     `json:"position,omitempty"`
	Value    float64 `json:"value,omitempty"`
}

// lol-challenges-v1.ChallengeConfigInfoDto
type ChallengesChallengeConfigInfoV1DTO struct {
	LocalizedNames map[string]map[string]string `json:"localizedNames,omitempty"`
	Thresholds     map[string]float64           `json:"thresholds,omitempty"`
	// DISABLED - not visible and not calculated, HIDDEN - not visible, but calculated, ENABLED - visible and calculated, ARCHIVED - visible, but not calculated
	State string `json:"state,omitempty"`
	// LIFETIME - stats are incremented without reset, SEASON - stats are accumulated by season and reset at the beginning of new season
	Tracking       string `json:"tracking,omitempty"`
	EndTimestamp   int    `json:"endTimestamp,omitempty"`
	ID             int    `json:"id,omitempty"`
	StartTimestamp int    `json:"startTimestamp,omitempty"`
	Leaderboard    bool   `json:"leaderboard,omitempty"`
}

// lol-challenges-v1.ChallengeInfo
type ChallengesChallengeInfoV1DTO struct {
	Level          Tier    `json:"level,omitempty"`
	AchievedTime   int     `json:"achievedTime,omitempty"`
	ChallengeID    int     `json:"challengeId,omitempty"`
	Percentile     float64 `json:"percentile,omitempty"`
	PlayersInLevel int     `json:"playersInLevel,omitempty"`
	Position       int     `json:"position,omitempty"`
	Value          float64 `json:"value,omitempty"`
}

// lol-challenges-v1.ChallengePoints
type ChallengesChallengePointsV1DTO struct {
	Level      Tier    `json:"level,omitempty"`
	Current    int     `json:"current,omitempty"`
	Max        int     `json:"max,omitempty"`
	Percentile float64 `json:"percentile,omitempty"`
}

// lol-challenges-v1.Level
type ChallengesLevelV1DTO struct {
}

// lol-challenges-v1.PlayerClientPreferences
type ChallengesPlayerClientPreferencesV1DTO struct {
	BannerAccent             string `json:"bannerAccent,omitempty"`
	CrestBorder              string `json:"crestBorder,omitempty"`
	Title                    string `json:"title,omitempty"`
	ChallengeIDs             []int  `json:"challengeIds,omitempty"`
	PrestigeCrestBorderLevel int    `json:"prestigeCrestBorderLevel,omitempty"`
}

// lol-challenges-v1.PlayerInfoDto
type ChallengesPlayerInfoV1DTO struct {
	CategoryPoints map[string]ChallengesChallengePointsV1DTO `json:"categoryPoints,omitempty"`
	Challenges     []ChallengesChallengeInfoV1DTO            `json:"challenges,omitempty"`
	Preferences    ChallengesPlayerClientPreferencesV1DTO    `json:"preferences"`
	TotalPoints    ChallengesChallengePointsV1DTO            `json:"totalPoints"`
}

// lol-challenges-v1.State
type ChallengesStateV1DTO struct {
}

// lol-challenges-v1.Tracking
type ChallengesTrackingV1DTO struct {
}

// champion-mastery-v4.NextSeasonMilestonesDto
type ChampionMasteryNextSeasonMilestonesV4DTO struct {
	RequireGradeCounts map[string]int `json:"requireGradeCounts,omitempty"`
	// Reward configuration.
	RewardConfig ChampionMasteryRewardConfigV4DTO `json:"rewardConfig"`
	// Reward marks.
	RewardMarks        int `json:"rewardMarks,omitempty"`
	TotalGamesRequires int `json:"totalGamesRequires,omitempty"`
	// Bonus.
	Bonus bool `json:"bonus,omitempty"`
}

// champion-mastery-v4.RewardConfigDto
type ChampionMasteryRewardConfigV4DTO struct {
	// Reward type
	RewardType string `json:"rewardType,omitempty"`
	// Reward value
	RewardValue string `json:"rewardValue,omitempty"`
	// Maximun reward
	MaximumReward int `json:"maximumReward,omitempty"`
}

// champion-mastery-v4.ChampionMasteryDto
type ChampionMasteryV4DTO struct {
	// Player Universal Unique Identifier. Exact length of 78 characters. (Encrypted)
	PUUID               string                                   `json:"puuid,omitempty"`
	MilestoneGrades     []string                                 `json:"milestoneGrades,omitempty"`
	NextSeasonMilestone ChampionMasteryNextSeasonMilestonesV4DTO `json:"nextSeasonMilestone"`
	// Champion ID for this entry.
	ChampionID int `json:"championId,omitempty"`
	// Champion level for specified player and champion combination.
	ChampionLevel int `json:"championLevel,omitempty"`
	// Total number of champion points for this player and champion combination - they are used to determine championLevel.
	ChampionPoints int `json:"championPoints,omitempty"`
	// Number of points earned since current level has been achieved.
	ChampionPointsSinceLastLevel int `json:"championPointsSinceLastLevel,omitempty"`
	// Number of points needed to achieve next level. Zero if player reached maximum champion level for this champion.
	ChampionPointsUntilNextLevel int `json:"championPointsUntilNextLevel,omitempty"`
	ChampionSeasonMilestone      int `json:"championSeasonMilestone,omitempty"`
	// Last time this champion was played by this player - in Unix milliseconds time format.
	LastPlayTime             int `json:"lastPlayTime,omitempty"`
	MarkRequiredForNextLevel int `json:"markRequiredForNextLevel,omitempty"`
	// The token earned for this champion at the current championLevel. When the championLevel is advanced the tokensEarned resets to 0.
	TokensEarned int `json:"tokensEarned,omitempty"`
	// Is chest granted for this champion or not in current season.
	ChestGranted bool `json:"chestGranted,omitempty"`
}

// champion-v3.ChampionInfo
type ChampionRotationV3DTO struct {
	FreeChampionIDs              []int `json:"freeChampionIds,omitempty"`
	FreeChampionIDsForNewPlayers []int `json:"freeChampionIdsForNewPlayers,omitempty"`
	MaxNewPlayerLevel            int   `json:"maxNewPlayerLevel,omitempty"`
}

// clash-v1.PlayerDto
type ClashPlayerV1DTO struct {
	PUUID string `json:"puuid,omitempty"`
	// (Legal values:  UNSELECTED,  FILL,  TOP,  JUNGLE,  MIDDLE,  BOTTOM,  UTILITY)
	Position string `json:"position,omitempty"`
	// (Legal values:  CAPTAIN,  MEMBER)
	Role   string `json:"role,omitempty"`
	TeamID string `json:"teamId,omitempty"`
}

// clash-v1.TeamDto
type ClashTeamV1DTO struct {
	Abbreviation string `json:"abbreviation,omitempty"`
	// Summoner ID of the team captain.
	Captain string `json:"captain,omitempty"`
	ID      string `json:"id,omitempty"`
	Name    string `json:"name,omitempty"`
	// Team members.
	Players      []ClashPlayerV1DTO `json:"players,omitempty"`
	IconID       int                `json:"iconId,omitempty"`
	Tier         int                `json:"tier,omitempty"`
	TournamentID int                `json:"tournamentId,omitempty"`
}

// clash-v1.TournamentPhaseDto
type ClashTournamentPhaseV1DTO struct {
	Cancelled        bool `json:"cancelled,omitempty"`
	ID               int  `json:"id,omitempty"`
	RegistrationTime int  `json:"registrationTime,omitempty"`
	StartTime        int  `json:"startTime,omitempty"`
}

// clash-v1.TournamentDto
type ClashTournamentV1DTO struct {
	NameKey          string `json:"nameKey,omitempty"`
	NameKeySecondary string `json:"nameKeySecondary,omitempty"`
	// Tournament phase.
	Schedule []ClashTournamentPhaseV1DTO `json:"schedule,omitempty"`
	ID       int                         `json:"id,omitempty"`
	ThemeID  int                         `json:"themeId,omitempty"`
}

// league-v4.LeagueEntryDTO
type LeagueEntryV4DTO struct {
	LeagueID string `json:"leagueId,omitempty"`
	// Player's encrypted puuid.
	PUUID     string    `json:"puuid,omitempty"`
	QueueType QueueType `json:"queueType,omitempty"`
	// The player's division within a tier.
	Rank Division `json:"rank,omitempty"`
	// Encrypted summoner ID. This field is deprecated and will be removed. Use `puuid` instead.
	//
	// Deprecated
	SummonerID   string                `json:"summonerId,omitempty"`
	Tier         Tier                  `json:"tier,omitempty"`
	MiniSeries   LeagueMiniSeriesV4DTO `json:"miniSeries"`
	LeaguePoints int                   `json:"leaguePoints,omitempty"`
	// Losing team on Summoners Rift.
	Losses int `json:"losses,omitempty"`
	// Winning team on Summoners Rift.
	Wins       int  `json:"wins,omitempty"`
	FreshBlood bool `json:"freshBlood,omitempty"`
	HotStreak  bool `json:"hotStreak,omitempty"`
	Inactive   bool `json:"inactive,omitempty"`
	Veteran    bool `json:"veteran,omitempty"`
}

// league-exp-v4.LeagueEntryDTO
type LeagueExpLeagueEntryV4DTO struct {
	LeagueID string `json:"leagueId,omitempty"`
	// Player's encrypted puuid.
	PUUID     string    `json:"puuid,omitempty"`
	QueueType QueueType `json:"queueType,omitempty"`
	// The player's division within a tier.
	Rank Division `json:"rank,omitempty"`
	// Player's summonerId (Encrypted)
	SummonerID   string                   `json:"summonerId,omitempty"`
	Tier         Tier                     `json:"tier,omitempty"`
	MiniSeries   LeagueExpMiniSeriesV4DTO `json:"miniSeries"`
	LeaguePoints int                      `json:"leaguePoints,omitempty"`
	// Losing team on Summoners Rift. Second through eighth placement in Teamfight Tactics.
	Losses int `json:"losses,omitempty"`
	// Winning team on Summoners Rift. First placement in Teamfight Tactics.
	Wins       int  `json:"wins,omitempty"`
	FreshBlood bool `json:"freshBlood,omitempty"`
	HotStreak  bool `json:"hotStreak,omitempty"`
	Inactive   bool `json:"inactive,omitempty"`
	Veteran    bool `json:"veteran,omitempty"`
}

// league-exp-v4.MiniSeriesDTO
type LeagueExpMiniSeriesV4DTO struct {
	Progress string `json:"progress,omitempty"`
	Losses   int    `json:"losses,omitempty"`
	Target   int    `json:"target,omitempty"`
	Wins     int    `json:"wins,omitempty"`
}

// league-v4.LeagueItemDTO
type LeagueItemV4DTO struct {
	// Player's encrypted puuid.
	PUUID string   `json:"puuid,omitempty"`
	Rank  Division `json:"rank,omitempty"`
	// Encrypted summoner ID. This field is deprecated and will be removed. Use `puuid` instead.
	//
	// Deprecated
	SummonerID   string                `json:"summonerId,omitempty"`
	MiniSeries   LeagueMiniSeriesV4DTO `json:"miniSeries"`
	LeaguePoints int                   `json:"leaguePoints,omitempty"`
	// Losing team on Summoners Rift.
	Losses int `json:"losses,omitempty"`
	// Winning team on Summoners Rift.
	Wins       int  `json:"wins,omitempty"`
	FreshBlood bool `json:"freshBlood,omitempty"`
	HotStreak  bool `json:"hotStreak,omitempty"`
	Inactive   bool `json:"inactive,omitempty"`
	Veteran    bool `json:"veteran,omitempty"`
}

// league-v4.LeagueListDTO
type LeagueListV4DTO struct {
	LeagueID string            `json:"leagueId,omitempty"`
	Name     string            `json:"name,omitempty"`
	Queue    QueueType         `json:"queue,omitempty"`
	Tier     Tier              `json:"tier,omitempty"`
	Entries  []LeagueItemV4DTO `json:"entries,omitempty"`
}

// league-v4.MiniSeriesDTO
type LeagueMiniSeriesV4DTO struct {
	Progress string `json:"progress,omitempty"`
	Losses   int    `json:"losses,omitempty"`
	Target   int    `json:"target,omitempty"`
	Wins     int    `json:"wins,omitempty"`
}

// match-v5.BanDto
type MatchBanV5DTO struct {
	ChampionID int `json:"championId,omitempty"`
	PickTurn   int `json:"pickTurn,omitempty"`
}

// match-v5.ChallengesDto
type MatchChallengesV5DTO struct {
	LegendaryItemUsed                         []int   `json:"legendaryItemUsed,omitempty"`
	AbilityUses                               int     `json:"abilityUses,omitempty"`
	AcesBefore15Minutes                       int     `json:"acesBefore15Minutes,omitempty"`
	AlliedJungleMonsterKills                  float64 `json:"alliedJungleMonsterKills,omitempty"`
	BaronBuffGoldAdvantageOverThreshold       int     `json:"baronBuffGoldAdvantageOverThreshold,omitempty"`
	BaronTakedowns                            int     `json:"baronTakedowns,omitempty"`
	BlastConeOppositeOpponentCount            int     `json:"blastConeOppositeOpponentCount,omitempty"`
	BountyGold                                float64 `json:"bountyGold,omitempty"`
	BuffsStolen                               int     `json:"buffsStolen,omitempty"`
	CompleteSupportQuestInTime                int     `json:"completeSupportQuestInTime,omitempty"`
	ControlWardTimeCoverageInRiverOrEnemyHalf float64 `json:"controlWardTimeCoverageInRiverOrEnemyHalf,omitempty"`
	ControlWardsPlaced                        int     `json:"controlWardsPlaced,omitempty"`
	DamagePerMinute                           float64 `json:"damagePerMinute,omitempty"`
	DamageTakenOnTeamPercentage               float64 `json:"damageTakenOnTeamPercentage,omitempty"`
	DancedWithRiftHerald                      int     `json:"dancedWithRiftHerald,omitempty"`
	DeathsByEnemyChamps                       int     `json:"deathsByEnemyChamps,omitempty"`
	DodgeSkillShotsSmallWindow                int     `json:"dodgeSkillShotsSmallWindow,omitempty"`
	DoubleAces                                int     `json:"doubleAces,omitempty"`
	DragonTakedowns                           int     `json:"dragonTakedowns,omitempty"`
	EarliestBaron                             float64 `json:"earliestBaron,omitempty"`
	EarliestDragonTakedown                    float64 `json:"earliestDragonTakedown,omitempty"`
	EarliestElderDragon                       float64 `json:"earliestElderDragon,omitempty"`
	EarlyLaningPhaseGoldExpAdvantage          float64 `json:"earlyLaningPhaseGoldExpAdvantage,omitempty"`
	EffectiveHealAndShielding                 float64 `json:"effectiveHealAndShielding,omitempty"`
	ElderDragonKillsWithOpposingSoul          int     `json:"elderDragonKillsWithOpposingSoul,omitempty"`
	ElderDragonMultikills                     int     `json:"elderDragonMultikills,omitempty"`
	EnemyChampionImmobilizations              int     `json:"enemyChampionImmobilizations,omitempty"`
	EnemyJungleMonsterKills                   float64 `json:"enemyJungleMonsterKills,omitempty"`
	EpicMonsterKillsNearEnemyJungler          int     `json:"epicMonsterKillsNearEnemyJungler,omitempty"`
	EpicMonsterKillsWithin30SecondsOfSpawn    int     `json:"epicMonsterKillsWithin30SecondsOfSpawn,omitempty"`
	EpicMonsterSteals                         int     `json:"epicMonsterSteals,omitempty"`
	EpicMonsterStolenWithoutSmite             int     `json:"epicMonsterStolenWithoutSmite,omitempty"`
	FasterSupportQuestCompletion              int     `json:"fasterSupportQuestCompletion,omitempty"`
	FastestLegendary                          float64 `json:"fastestLegendary,omitempty"`
	FirstTurretKilled                         float64 `json:"firstTurretKilled,omitempty"`
	FirstTurretKilledTime                     float64 `json:"firstTurretKilledTime,omitempty"`
	FistBumpParticipation                     int     `json:"fistBumpParticipation,omitempty"`
	FlawlessAces                              int     `json:"flawlessAces,omitempty"`
	FullTeamTakedown                          int     `json:"fullTeamTakedown,omitempty"`
	GameLength                                float64 `json:"gameLength,omitempty"`
	GetTakedownsInAllLanesEarlyJungleAsLaner  int     `json:"getTakedownsInAllLanesEarlyJungleAsLaner,omitempty"`
	GoldPerMinute                             float64 `json:"goldPerMinute,omitempty"`
	HadAfkTeammate                            int     `json:"hadAfkTeammate,omitempty"`
	HadOpenNexus                              int     `json:"hadOpenNexus,omitempty"`
	HealFromMapSources                        float64 `json:"HealFromMapSources,omitempty"`
	HighestChampionDamage                     int     `json:"highestChampionDamage,omitempty"`
	HighestCrowdControlScore                  int     `json:"highestCrowdControlScore,omitempty"`
	HighestWardKills                          int     `json:"highestWardKills,omitempty"`
	ImmobilizeAndKillWithAlly                 int     `json:"immobilizeAndKillWithAlly,omitempty"`
	InfernalScalePickup                       int     `json:"InfernalScalePickup,omitempty"`
	InitialBuffCount                          int     `json:"initialBuffCount,omitempty"`
	InitialCrabCount                          int     `json:"initialCrabCount,omitempty"`
	JungleCsBefore10Minutes                   float64 `json:"jungleCsBefore10Minutes,omitempty"`
	JunglerKillsEarlyJungle                   int     `json:"junglerKillsEarlyJungle,omitempty"`
	JunglerTakedownsNearDamagedEpicMonster    int     `json:"junglerTakedownsNearDamagedEpicMonster,omitempty"`
	KTurretsDestroyedBeforePlatesFall         int     `json:"kTurretsDestroyedBeforePlatesFall,omitempty"`
	Kda                                       float64 `json:"kda,omitempty"`
	KillAfterHiddenWithAlly                   int     `json:"killAfterHiddenWithAlly,omitempty"`
	KillParticipation                         float64 `json:"killParticipation,omitempty"`
	KilledChampTookFullTeamDamageSurvived     int     `json:"killedChampTookFullTeamDamageSurvived,omitempty"`
	KillingSprees                             int     `json:"killingSprees,omitempty"`
	KillsNearEnemyTurret                      int     `json:"killsNearEnemyTurret,omitempty"`
	KillsOnLanersEarlyJungleAsJungler         int     `json:"killsOnLanersEarlyJungleAsJungler,omitempty"`
	KillsOnOtherLanesEarlyJungleAsLaner       int     `json:"killsOnOtherLanesEarlyJungleAsLaner,omitempty"`
	KillsOnRecentlyHealedByAramPack           int     `json:"killsOnRecentlyHealedByAramPack,omitempty"`
	KillsUnderOwnTurret                       int     `json:"killsUnderOwnTurret,omitempty"`
	KillsWithHelpFromEpicMonster              int     `json:"killsWithHelpFromEpicMonster,omitempty"`
	KnockEnemyIntoTeamAndKill                 int     `json:"knockEnemyIntoTeamAndKill,omitempty"`
	LandSkillShotsEarlyGame                   int     `json:"landSkillShotsEarlyGame,omitempty"`
	LaneMinionsFirst10Minutes                 int     `json:"laneMinionsFirst10Minutes,omitempty"`
	LaningPhaseGoldExpAdvantage               int     `json:"laningPhaseGoldExpAdvantage,omitempty"`
	LegendaryCount                            int     `json:"legendaryCount,omitempty"`
	LostAnInhibitor                           int     `json:"lostAnInhibitor,omitempty"`
	MaxCsAdvantageOnLaneOpponent              float64 `json:"maxCsAdvantageOnLaneOpponent,omitempty"`
	MaxKillDeficit                            int     `json:"maxKillDeficit,omitempty"`
	MaxLevelLeadLaneOpponent                  int     `json:"maxLevelLeadLaneOpponent,omitempty"`
	MejaisFullStackInTime                     int     `json:"mejaisFullStackInTime,omitempty"`
	MoreEnemyJungleThanOpponent               float64 `json:"moreEnemyJungleThanOpponent,omitempty"`
	MostWardsDestroyedOneSweeper              int     `json:"mostWardsDestroyedOneSweeper,omitempty"`
	// This is an offshoot of the OneStone challenge. The code checks if a spell with the same instance ID does the final point of damage to at least 2 Champions. It doesn't matter if they're enemies, but you cannot hurt your friends.
	MultiKillOneSpell                   int     `json:"multiKillOneSpell,omitempty"`
	MultiTurretRiftHeraldCount          int     `json:"multiTurretRiftHeraldCount,omitempty"`
	Multikills                          int     `json:"multikills,omitempty"`
	MultikillsAfterAggressiveFlash      int     `json:"multikillsAfterAggressiveFlash,omitempty"`
	MythicItemUsed                      int     `json:"mythicItemUsed,omitempty"`
	OuterTurretExecutesBefore10Minutes  int     `json:"outerTurretExecutesBefore10Minutes,omitempty"`
	OutnumberedKills                    int     `json:"outnumberedKills,omitempty"`
	OutnumberedNexusKill                int     `json:"outnumberedNexusKill,omitempty"`
	PerfectDragonSoulsTaken             int     `json:"perfectDragonSoulsTaken,omitempty"`
	PerfectGame                         int     `json:"perfectGame,omitempty"`
	PickKillWithAlly                    int     `json:"pickKillWithAlly,omitempty"`
	PlayedChampSelectPosition           int     `json:"playedChampSelectPosition,omitempty"`
	PoroExplosions                      int     `json:"poroExplosions,omitempty"`
	QuickCleanse                        int     `json:"quickCleanse,omitempty"`
	QuickFirstTurret                    int     `json:"quickFirstTurret,omitempty"`
	QuickSoloKills                      int     `json:"quickSoloKills,omitempty"`
	RiftHeraldTakedowns                 int     `json:"riftHeraldTakedowns,omitempty"`
	SaveAllyFromDeath                   int     `json:"saveAllyFromDeath,omitempty"`
	ScuttleCrabKills                    int     `json:"scuttleCrabKills,omitempty"`
	ShortestTimeToAceFromFirstTakedown  float64 `json:"shortestTimeToAceFromFirstTakedown,omitempty"`
	SkillshotsDodged                    int     `json:"skillshotsDodged,omitempty"`
	SkillshotsHit                       int     `json:"skillshotsHit,omitempty"`
	SnowballsHit                        int     `json:"snowballsHit,omitempty"`
	SoloBaronKills                      int     `json:"soloBaronKills,omitempty"`
	SoloKills                           int     `json:"soloKills,omitempty"`
	SoloTurretsLategame                 int     `json:"soloTurretsLategame,omitempty"`
	StealthWardsPlaced                  int     `json:"stealthWardsPlaced,omitempty"`
	SurvivedSingleDigitHpCount          int     `json:"survivedSingleDigitHpCount,omitempty"`
	SurvivedThreeImmobilizesInFight     int     `json:"survivedThreeImmobilizesInFight,omitempty"`
	SwarmDefeatAatrox                   int     `json:"SWARM_DefeatAatrox,omitempty"`
	SwarmDefeatBriar                    int     `json:"SWARM_DefeatBriar,omitempty"`
	SwarmDefeatMiniBosses               int     `json:"SWARM_DefeatMiniBosses,omitempty"`
	SwarmEvolveWeapon                   int     `json:"SWARM_EvolveWeapon,omitempty"`
	SwarmHave3Passives                  int     `json:"SWARM_Have3Passives,omitempty"`
	SwarmKillEnemy                      int     `json:"SWARM_KillEnemy,omitempty"`
	SwarmPickupGold                     float64 `json:"SWARM_PickupGold,omitempty"`
	SwarmReachLevel50                   int     `json:"SWARM_ReachLevel50,omitempty"`
	SwarmSurvive15Min                   int     `json:"SWARM_Survive15Min,omitempty"`
	SwarmWinWith5EvolvedWeapons         int     `json:"SWARM_WinWith5EvolvedWeapons,omitempty"`
	TakedownOnFirstTurret               int     `json:"takedownOnFirstTurret,omitempty"`
	Takedowns                           int     `json:"takedowns,omitempty"`
	TakedownsAfterGainingLevelAdvantage int     `json:"takedownsAfterGainingLevelAdvantage,omitempty"`
	TakedownsBeforeJungleMinionSpawn    int     `json:"takedownsBeforeJungleMinionSpawn,omitempty"`
	TakedownsFirst25Minutes             int     `json:"takedownsFirst25Minutes,omitempty"`
	TakedownsFirstXMinutes              int     `json:"takedownsFirstXMinutes,omitempty"`
	TakedownsInAlcove                   int     `json:"takedownsInAlcove,omitempty"`
	TakedownsInEnemyFountain            int     `json:"takedownsInEnemyFountain,omitempty"`
	TeamBaronKills                      int     `json:"teamBaronKills,omitempty"`
	TeamDamagePercentage                float64 `json:"teamDamagePercentage,omitempty"`
	TeamElderDragonKills                int     `json:"teamElderDragonKills,omitempty"`
	TeamRiftHeraldKills                 int     `json:"teamRiftHeraldKills,omitempty"`
	TeleportTakedowns                   int     `json:"teleportTakedowns,omitempty"`
	ThirdInhibitorDestroyedTime         float64 `json:"thirdInhibitorDestroyedTime,omitempty"`
	ThreeWardsOneSweeperCount           int     `json:"threeWardsOneSweeperCount,omitempty"`
	TookLargeDamageSurvived             int     `json:"tookLargeDamageSurvived,omitempty"`
	TurretPlatesTaken                   int     `json:"turretPlatesTaken,omitempty"`
	TurretTakedowns                     int     `json:"turretTakedowns,omitempty"`
	// Any player who damages a tower that is destroyed within 30 seconds of a Rift Herald charge will receive credit. A player who does not damage the tower will not receive credit.
	TurretsTakenWithRiftHerald       int     `json:"turretsTakenWithRiftHerald,omitempty"`
	TwentyMinionsIn3SecondsCount     int     `json:"twentyMinionsIn3SecondsCount,omitempty"`
	TwoWardsOneSweeperCount          int     `json:"twoWardsOneSweeperCount,omitempty"`
	UnseenRecalls                    int     `json:"unseenRecalls,omitempty"`
	VisionScoreAdvantageLaneOpponent float64 `json:"visionScoreAdvantageLaneOpponent,omitempty"`
	VisionScorePerMinute             float64 `json:"visionScorePerMinute,omitempty"`
	VoidMonsterKill                  int     `json:"voidMonsterKill,omitempty"`
	WardTakedowns                    int     `json:"wardTakedowns,omitempty"`
	WardTakedownsBefore20M           int     `json:"wardTakedownsBefore20M,omitempty"`
	WardsGuarded                     int     `json:"wardsGuarded,omitempty"`
	X12AssistStreakCount             int     `json:"12AssistStreakCount,omitempty"`
}

// match-v5.ChampionStatsDto
type MatchChampionStatsV5DTO struct {
	AbilityHaste         int `json:"abilityHaste,omitempty"`
	AbilityPower         int `json:"abilityPower,omitempty"`
	Armor                int `json:"armor,omitempty"`
	ArmorPen             int `json:"armorPen,omitempty"`
	ArmorPenPercent      int `json:"armorPenPercent,omitempty"`
	AttackDamage         int `json:"attackDamage,omitempty"`
	AttackSpeed          int `json:"attackSpeed,omitempty"`
	BonusArmorPenPercent int `json:"bonusArmorPenPercent,omitempty"`
	BonusMagicPenPercent int `json:"bonusMagicPenPercent,omitempty"`
	CcReduction          int `json:"ccReduction,omitempty"`
	CooldownReduction    int `json:"cooldownReduction,omitempty"`
	Health               int `json:"health,omitempty"`
	HealthMax            int `json:"healthMax,omitempty"`
	HealthRegen          int `json:"healthRegen,omitempty"`
	Lifesteal            int `json:"lifesteal,omitempty"`
	MagicPen             int `json:"magicPen,omitempty"`
	MagicPenPercent      int `json:"magicPenPercent,omitempty"`
	MagicResist          int `json:"magicResist,omitempty"`
	MovementSpeed        int `json:"movementSpeed,omitempty"`
	Omnivamp             int `json:"omnivamp,omitempty"`
	PhysicalVamp         int `json:"physicalVamp,omitempty"`
	Power                int `json:"power,omitempty"`
	PowerMax             int `json:"powerMax,omitempty"`
	PowerRegen           int `json:"powerRegen,omitempty"`
	SpellVamp            int `json:"spellVamp,omitempty"`
}

// match-v5.DamageStatsDto
type MatchDamageStatsV5DTO struct {
	MagicDamageDone               int `json:"magicDamageDone,omitempty"`
	MagicDamageDoneToChampions    int `json:"magicDamageDoneToChampions,omitempty"`
	MagicDamageTaken              int `json:"magicDamageTaken,omitempty"`
	PhysicalDamageDone            int `json:"physicalDamageDone,omitempty"`
	PhysicalDamageDoneToChampions int `json:"physicalDamageDoneToChampions,omitempty"`
	PhysicalDamageTaken           int `json:"physicalDamageTaken,omitempty"`
	TotalDamageDone               int `json:"totalDamageDone,omitempty"`
	TotalDamageDoneToChampions    int `json:"totalDamageDoneToChampions,omitempty"`
	TotalDamageTaken              int `json:"totalDamageTaken,omitempty"`
	TrueDamageDone                int `json:"trueDamageDone,omitempty"`
	TrueDamageDoneToChampions     int `json:"trueDamageDoneToChampions,omitempty"`
	TrueDamageTaken               int `json:"trueDamageTaken,omitempty"`
}

// match-v5.EventsTimeLineDto
type MatchEventsTimeLineV5DTO struct {
	BuildingType            string                           `json:"buildingType,omitempty"`
	KillType                string                           `json:"killType,omitempty"`
	LaneType                string                           `json:"laneType,omitempty"`
	LevelUpType             string                           `json:"levelUpType,omitempty"`
	MonsterSubType          string                           `json:"monsterSubType,omitempty"`
	MonsterType             string                           `json:"monsterType,omitempty"`
	Name                    string                           `json:"name,omitempty"`
	TowerType               string                           `json:"towerType,omitempty"`
	TransformType           string                           `json:"transformType,omitempty"`
	Type                    string                           `json:"type,omitempty"`
	WardType                string                           `json:"wardType,omitempty"`
	AssistingParticipantIDs []int                            `json:"assistingParticipantIds,omitempty"`
	VictimDamageDealt       []MatchTimelineVictimDamageV5DTO `json:"victimDamageDealt,omitempty"`
	VictimDamageReceived    []MatchTimelineVictimDamageV5DTO `json:"victimDamageReceived,omitempty"`
	Position                MatchPositionV5DTO               `json:"position"`
	ActualStartTime         int                              `json:"actualStartTime,omitempty"`
	AfterID                 int                              `json:"afterId,omitempty"`
	BeforeID                int                              `json:"beforeId,omitempty"`
	Bounty                  int                              `json:"bounty,omitempty"`
	CreatorID               int                              `json:"creatorId,omitempty"`
	FeatType                int                              `json:"featType,omitempty"`
	FeatValue               int                              `json:"featValue,omitempty"`
	GameID                  int                              `json:"gameId,omitempty"`
	GoldGain                int                              `json:"goldGain,omitempty"`
	ItemID                  int                              `json:"itemId,omitempty"`
	KillStreakLength        int                              `json:"killStreakLength,omitempty"`
	KillerID                int                              `json:"killerId,omitempty"`
	KillerTeamID            Team                             `json:"killerTeamId,omitempty"`
	Level                   int                              `json:"level,omitempty"`
	MultiKillLength         int                              `json:"multiKillLength,omitempty"`
	ParticipantID           int                              `json:"participantId,omitempty"`
	RealTimestamp           int                              `json:"realTimestamp,omitempty"`
	ShutdownBounty          int                              `json:"shutdownBounty,omitempty"`
	SkillSlot               int                              `json:"skillSlot,omitempty"`
	TeamID                  Team                             `json:"teamId,omitempty"`
	Timestamp               int                              `json:"timestamp,omitempty"`
	VictimID                int                              `json:"victimId,omitempty"`
	WinningTeam             int                              `json:"winningTeam,omitempty"`
}

// match-v5.FeatDto
type MatchFeatV5DTO struct {
	FeatState int `json:"featState,omitempty"`
}

// match-v5.FeatsDto
type MatchFeatsV5DTO struct {
	EpicMonsterKill MatchFeatV5DTO `json:"EPIC_MONSTER_KILL"`
	FirstBlood      MatchFeatV5DTO `json:"FIRST_BLOOD"`
	FirstTurret     MatchFeatV5DTO `json:"FIRST_TURRET"`
}

// match-v5.FramesTimeLineDto
type MatchFramesTimeLineV5DTO struct {
	ParticipantFrames map[int]MatchParticipantFrameV5DTO `json:"participantFrames,omitempty"`
	Events            []MatchEventsTimeLineV5DTO         `json:"events,omitempty"`
	Timestamp         int                                `json:"timestamp,omitempty"`
}

// match-v5.InfoTimeLineDto
type MatchInfoTimeLineV5DTO struct {
	// Refer to indicate if the game ended in termination.
	EndOfGameResult string                          `json:"endOfGameResult,omitempty"`
	Frames          []MatchFramesTimeLineV5DTO      `json:"frames,omitempty"`
	Participants    []MatchParticipantTimeLineV5DTO `json:"participants,omitempty"`
	FrameInterval   int                             `json:"frameInterval,omitempty"`
	GameID          int                             `json:"gameId,omitempty"`
}

// match-v5.InfoDto
type MatchInfoV5DTO struct {
	// Refer to indicate if the game ended in termination.
	EndOfGameResult string `json:"endOfGameResult,omitempty"`
	// Refer to the Game Constants documentation.
	GameMode GameMode `json:"gameMode,omitempty"`
	GameName string   `json:"gameName,omitempty"`
	GameType GameType `json:"gameType,omitempty"`
	// The first two parts can be used to determine the patch a game was played on.
	GameVersion string `json:"gameVersion,omitempty"`
	// Platform where the match was played.
	PlatformID string `json:"platformId,omitempty"`
	// Tournament code used to generate the match. This field was added to match-v5 in patch 11.13 on June 23rd, 2021.
	TournamentCode   string                  `json:"tournamentCode,omitempty"`
	GameModeMutators []string                `json:"gameModeMutators,omitempty"`
	Participants     []MatchParticipantV5DTO `json:"participants,omitempty"`
	Teams            []MatchTeamV5DTO        `json:"teams,omitempty"`
	// Unix timestamp for when the game is created on the game server (i.e., the loading screen).
	GameCreation int `json:"gameCreation,omitempty"`
	// Prior to patch 11.20, this field returns the game length in milliseconds calculated from gameEndTimestamp - gameStartTimestamp. Post patch 11.20, this field returns the max timePlayed of any participant in the game in seconds, which makes the behavior of this field consistent with that of match-v4. The best way to handling the change in this field is to treat the value as milliseconds if the gameEndTimestamp field isn't in the response and to treat the value as seconds if gameEndTimestamp is in the response.
	GameDuration int `json:"gameDuration,omitempty"`
	// Unix timestamp for when match ends on the game server. This timestamp can occasionally be significantly longer than when the match "ends". The most reliable way of determining the timestamp for the end of the match would be to add the max time played of any participant to the gameStartTimestamp. This field was added to match-v5 in patch 11.20 on Oct 5th, 2021.
	GameEndTimestamp int `json:"gameEndTimestamp,omitempty"`
	GameID           int `json:"gameId,omitempty"`
	// Unix timestamp for when match starts on the game server.
	GameStartTimestamp int `json:"gameStartTimestamp,omitempty"`
	// Refer to the Game Constants documentation.
	MapID Map `json:"mapId,omitempty"`
	// Refer to the Game Constants documentation.
	QueueID Queue `json:"queueId,omitempty"`
}

// match-v5.MetadataTimeLineDto
type MatchMetadataTimeLineV5DTO struct {
	// Match data version.
	DataVersion string `json:"dataVersion,omitempty"`
	// Match id.
	MatchID string `json:"matchId,omitempty"`
	// A list of participant PUUIDs.
	Participants []string `json:"participants,omitempty"`
}

// match-v5.MetadataDto
type MatchMetadataV5DTO struct {
	// Match data version.
	DataVersion string `json:"dataVersion,omitempty"`
	// Match id.
	MatchID string `json:"matchId,omitempty"`
	// A list of participant PUUIDs.
	Participants []string `json:"participants,omitempty"`
}

// match-v5.MissionsDto
type MatchMissionsV5DTO struct {
	PlayerScore0  float64 `json:"playerScore0,omitempty"`
	PlayerScore1  float64 `json:"playerScore1,omitempty"`
	PlayerScore10 float64 `json:"playerScore10,omitempty"`
	PlayerScore11 float64 `json:"playerScore11,omitempty"`
	PlayerScore2  float64 `json:"playerScore2,omitempty"`
	PlayerScore3  float64 `json:"playerScore3,omitempty"`
	PlayerScore4  float64 `json:"playerScore4,omitempty"`
	PlayerScore5  float64 `json:"playerScore5,omitempty"`
	PlayerScore6  float64 `json:"playerScore6,omitempty"`
	PlayerScore7  float64 `json:"playerScore7,omitempty"`
	PlayerScore8  float64 `json:"playerScore8,omitempty"`
	PlayerScore9  float64 `json:"playerScore9,omitempty"`
}

// match-v5.ObjectiveDto
type MatchObjectiveV5DTO struct {
	First bool `json:"first,omitempty"`
	Kills int  `json:"kills,omitempty"`
}

// match-v5.ObjectivesDto
type MatchObjectivesV5DTO struct {
	Atakhan    MatchObjectiveV5DTO `json:"atakhan"`
	Baron      MatchObjectiveV5DTO `json:"baron"`
	Champion   MatchObjectiveV5DTO `json:"champion"`
	Dragon     MatchObjectiveV5DTO `json:"dragon"`
	Horde      MatchObjectiveV5DTO `json:"horde"`
	Inhibitor  MatchObjectiveV5DTO `json:"inhibitor"`
	RiftHerald MatchObjectiveV5DTO `json:"riftHerald"`
	Tower      MatchObjectiveV5DTO `json:"tower"`
}

// match-v5.ParticipantFrameDto
type MatchParticipantFrameV5DTO struct {
	ChampionStats            MatchChampionStatsV5DTO `json:"championStats"`
	CurrentGold              int                     `json:"currentGold,omitempty"`
	DamageStats              MatchDamageStatsV5DTO   `json:"damageStats"`
	GoldPerSecond            int                     `json:"goldPerSecond,omitempty"`
	JungleMinionsKilled      int                     `json:"jungleMinionsKilled,omitempty"`
	Level                    int                     `json:"level,omitempty"`
	MinionsKilled            int                     `json:"minionsKilled,omitempty"`
	ParticipantID            int                     `json:"participantId,omitempty"`
	Position                 MatchPositionV5DTO      `json:"position"`
	TimeEnemySpentControlled int                     `json:"timeEnemySpentControlled,omitempty"`
	TotalGold                int                     `json:"totalGold,omitempty"`
	XP                       int                     `json:"xp,omitempty"`
}

// match-v5.ParticipantFramesDto
type MatchParticipantFramesV5DTO struct {
	// Key value mapping for each participant
	X19 MatchParticipantFrameV5DTO `json:"1-9"`
}

// match-v5.ParticipantTimeLineDto
type MatchParticipantTimeLineV5DTO struct {
	PUUID         string `json:"puuid,omitempty"`
	ParticipantID int    `json:"participantId,omitempty"`
}

// match-v5.ParticipantDto
type MatchParticipantV5DTO struct {
	ChampionName string `json:"championName,omitempty"`
	// Both individualPosition and teamPosition are computed by the game server and are different versions of the most likely position played by a player. The individualPosition is the best guess for which position the player actually played in isolation of anything else. The teamPosition is the best guess for which position the player actually played if we add the constraint that each team must have one top player, one jungle, one middle, etc. Generally the recommendation is to use the teamPosition field over the individualPosition field.
	IndividualPosition string `json:"individualPosition,omitempty"`
	Lane               string `json:"lane,omitempty"`
	PUUID              string `json:"puuid,omitempty"`
	RiotIDGameName     string `json:"riotIdGameName,omitempty"`
	// Deprecated, use `riotIdGameName`. This field name was briefly used instead of `riotIdGameName`, prior to patch 14.5.
	//
	// Deprecated
	RiotIDName    string `json:"riotIdName,omitempty"`
	RiotIDTagline string `json:"riotIdTagline,omitempty"`
	Role          string `json:"role,omitempty"`
	SummonerID    string `json:"summonerId,omitempty"`
	SummonerName  string `json:"summonerName,omitempty"`
	// Both individualPosition and teamPosition are computed by the game server and are different versions of the most likely position played by a player. The individualPosition is the best guess for which position the player actually played in isolation of anything else. The teamPosition is the best guess for which position the player actually played if we add the constraint that each team must have one top player, one jungle, one middle, etc. Generally the recommendation is to use the teamPosition field over the individualPosition field.
	TeamPosition string               `json:"teamPosition,omitempty"`
	Perks        MatchPerksV5DTO      `json:"perks"`
	Challenges   MatchChallengesV5DTO `json:"challenges"`
	Missions     MatchMissionsV5DTO   `json:"missions"`
	// Yellow crossed swords
	AllInPings int `json:"allInPings,omitempty"`
	// Green flag
	AssistMePings int `json:"assistMePings,omitempty"`
	Assists       int `json:"assists,omitempty"`
	BaitPings     int `json:"baitPings,omitempty"`
	BaronKills    int `json:"baronKills,omitempty"`
	// https://github.com/RiotGames/developer-relations/issues/814
	BasicPings      int `json:"basicPings,omitempty"`
	BountyLevel     int `json:"bountyLevel,omitempty"`
	ChampExperience int `json:"champExperience,omitempty"`
	ChampLevel      int `json:"champLevel,omitempty"`
	// Prior to patch 11.4, on Feb 18th, 2021, this field returned invalid championIds. We recommend determining the champion based on the championName field for matches played prior to patch 11.4.
	ChampionID     int `json:"championId,omitempty"`
	ChampionSkinID int `json:"championSkinId,omitempty"`
	// This field is currently only utilized for Kayn's transformations. (Legal values: 0 - None, 1 - Slayer, 2 - Assassin)
	ChampionTransform int `json:"championTransform,omitempty"`
	// Blue generic ping (ALT+click)
	CommandPings            int `json:"commandPings,omitempty"`
	ConsumablesPurchased    int `json:"consumablesPurchased,omitempty"`
	DamageDealtToBuildings  int `json:"damageDealtToBuildings,omitempty"`
	DamageDealtToObjectives int `json:"damageDealtToObjectives,omitempty"`
	DamageDealtToTurrets    int `json:"damageDealtToTurrets,omitempty"`
	DamageSelfMitigated     int `json:"damageSelfMitigated,omitempty"`
	// https://github.com/RiotGames/developer-relations/issues/870
	DangerPings         int `json:"dangerPings,omitempty"`
	Deaths              int `json:"deaths,omitempty"`
	DetectorWardsPlaced int `json:"detectorWardsPlaced,omitempty"`
	DoubleKills         int `json:"doubleKills,omitempty"`
	DragonKills         int `json:"dragonKills,omitempty"`
	// Yellow questionmark
	EnemyMissingPings int `json:"enemyMissingPings,omitempty"`
	// Red eyeball
	EnemyVisionPings int `json:"enemyVisionPings,omitempty"`
	// Yellow circle with horizontal line
	GetBackPings                int `json:"getBackPings,omitempty"`
	GoldEarned                  int `json:"goldEarned,omitempty"`
	GoldSpent                   int `json:"goldSpent,omitempty"`
	HoldPings                   int `json:"holdPings,omitempty"`
	InhibitorKills              int `json:"inhibitorKills,omitempty"`
	InhibitorTakedowns          int `json:"inhibitorTakedowns,omitempty"`
	InhibitorsLost              int `json:"inhibitorsLost,omitempty"`
	Item0                       int `json:"item0,omitempty"`
	Item1                       int `json:"item1,omitempty"`
	Item2                       int `json:"item2,omitempty"`
	Item3                       int `json:"item3,omitempty"`
	Item4                       int `json:"item4,omitempty"`
	Item5                       int `json:"item5,omitempty"`
	Item6                       int `json:"item6,omitempty"`
	ItemsPurchased              int `json:"itemsPurchased,omitempty"`
	KillingSprees               int `json:"killingSprees,omitempty"`
	Kills                       int `json:"kills,omitempty"`
	LargestCriticalStrike       int `json:"largestCriticalStrike,omitempty"`
	LargestKillingSpree         int `json:"largestKillingSpree,omitempty"`
	LargestMultiKill            int `json:"largestMultiKill,omitempty"`
	LongestTimeSpentLiving      int `json:"longestTimeSpentLiving,omitempty"`
	MagicDamageDealt            int `json:"magicDamageDealt,omitempty"`
	MagicDamageDealtToChampions int `json:"magicDamageDealtToChampions,omitempty"`
	MagicDamageTaken            int `json:"magicDamageTaken,omitempty"`
	// Green ward
	NeedVisionPings int `json:"needVisionPings,omitempty"`
	// neutralMinionsKilled = mNeutralMinionsKilled, which is incremented on kills of kPet and kJungleMonster
	NeutralMinionsKilled    int `json:"neutralMinionsKilled,omitempty"`
	NexusKills              int `json:"nexusKills,omitempty"`
	NexusLost               int `json:"nexusLost,omitempty"`
	NexusTakedowns          int `json:"nexusTakedowns,omitempty"`
	ObjectivesStolen        int `json:"objectivesStolen,omitempty"`
	ObjectivesStolenAssists int `json:"objectivesStolenAssists,omitempty"`
	// Blue arrow pointing at ground
	OnMyWayPings                   int     `json:"onMyWayPings,omitempty"`
	ParticipantID                  int     `json:"participantId,omitempty"`
	PentaKills                     int     `json:"pentaKills,omitempty"`
	PhysicalDamageDealt            int     `json:"physicalDamageDealt,omitempty"`
	PhysicalDamageDealtToChampions int     `json:"physicalDamageDealtToChampions,omitempty"`
	PhysicalDamageTaken            int     `json:"physicalDamageTaken,omitempty"`
	Placement                      int     `json:"placement,omitempty"`
	PlayerAugment1                 int     `json:"playerAugment1,omitempty"`
	PlayerAugment2                 int     `json:"playerAugment2,omitempty"`
	PlayerAugment3                 int     `json:"playerAugment3,omitempty"`
	PlayerAugment4                 int     `json:"playerAugment4,omitempty"`
	PlayerAugment5                 int     `json:"playerAugment5,omitempty"`
	PlayerAugment6                 int     `json:"playerAugment6,omitempty"`
	PlayerScore0                   float64 `json:"playerScore0,omitempty"`
	PlayerScore1                   float64 `json:"playerScore1,omitempty"`
	PlayerScore10                  float64 `json:"playerScore10,omitempty"`
	PlayerScore11                  float64 `json:"playerScore11,omitempty"`
	PlayerScore2                   float64 `json:"playerScore2,omitempty"`
	PlayerScore3                   float64 `json:"playerScore3,omitempty"`
	PlayerScore4                   float64 `json:"playerScore4,omitempty"`
	PlayerScore5                   float64 `json:"playerScore5,omitempty"`
	PlayerScore6                   float64 `json:"playerScore6,omitempty"`
	PlayerScore7                   float64 `json:"playerScore7,omitempty"`
	PlayerScore8                   float64 `json:"playerScore8,omitempty"`
	PlayerScore9                   float64 `json:"playerScore9,omitempty"`
	PlayerSubteamID                int     `json:"playerSubteamId,omitempty"`
	ProfileIcon                    int     `json:"profileIcon,omitempty"`
	// Green minion
	PushPings   int `json:"pushPings,omitempty"`
	QuadraKills int `json:"quadraKills,omitempty"`
	// https://github.com/RiotGames/developer-relations/issues/814
	RetreatPings                   int  `json:"retreatPings,omitempty"`
	SightWardsBoughtInGame         int  `json:"sightWardsBoughtInGame,omitempty"`
	Spell1Casts                    int  `json:"spell1Casts,omitempty"`
	Spell2Casts                    int  `json:"spell2Casts,omitempty"`
	Spell3Casts                    int  `json:"spell3Casts,omitempty"`
	Spell4Casts                    int  `json:"spell4Casts,omitempty"`
	SubteamPlacement               int  `json:"subteamPlacement,omitempty"`
	Summoner1Casts                 int  `json:"summoner1Casts,omitempty"`
	Summoner1ID                    int  `json:"summoner1Id,omitempty"`
	Summoner2Casts                 int  `json:"summoner2Casts,omitempty"`
	Summoner2ID                    int  `json:"summoner2Id,omitempty"`
	SummonerLevel                  int  `json:"summonerLevel,omitempty"`
	TeamID                         Team `json:"teamId,omitempty"`
	TimeCCingOthers                int  `json:"timeCCingOthers,omitempty"`
	TimePlayed                     int  `json:"timePlayed,omitempty"`
	TotalAllyJungleMinionsKilled   int  `json:"totalAllyJungleMinionsKilled,omitempty"`
	TotalDamageDealt               int  `json:"totalDamageDealt,omitempty"`
	TotalDamageDealtToChampions    int  `json:"totalDamageDealtToChampions,omitempty"`
	TotalDamageShieldedOnTeammates int  `json:"totalDamageShieldedOnTeammates,omitempty"`
	TotalDamageTaken               int  `json:"totalDamageTaken,omitempty"`
	TotalEnemyJungleMinionsKilled  int  `json:"totalEnemyJungleMinionsKilled,omitempty"`
	// Whenever positive health is applied (which translates to all heals in the game but not things like regeneration), totalHeal is incremented by the amount of health received. This includes healing enemies, jungle monsters, yourself, etc
	TotalHeal int `json:"totalHeal,omitempty"`
	// Whenever positive health is applied (which translates to all heals in the game but not things like regeneration), totalHealsOnTeammates is incremented by the amount of health received.  This is post modified, so if you heal someone missing 5 health for 100 you will get +5 totalHealsOnTeammates
	TotalHealsOnTeammates int `json:"totalHealsOnTeammates,omitempty"`
	// totalMillionsKilled = mMinionsKilled, which is only incremented on kills of kTeamMinion, kMeleeLaneMinion, kSuperLaneMinion, kRangedLaneMinion and kSiegeLaneMinion
	TotalMinionsKilled         int  `json:"totalMinionsKilled,omitempty"`
	TotalTimeCcdealt           int  `json:"totalTimeCCDealt,omitempty"`
	TotalTimeSpentDead         int  `json:"totalTimeSpentDead,omitempty"`
	TotalUnitsHealed           int  `json:"totalUnitsHealed,omitempty"`
	TripleKills                int  `json:"tripleKills,omitempty"`
	TrueDamageDealt            int  `json:"trueDamageDealt,omitempty"`
	TrueDamageDealtToChampions int  `json:"trueDamageDealtToChampions,omitempty"`
	TrueDamageTaken            int  `json:"trueDamageTaken,omitempty"`
	TurretKills                int  `json:"turretKills,omitempty"`
	TurretTakedowns            int  `json:"turretTakedowns,omitempty"`
	TurretsLost                int  `json:"turretsLost,omitempty"`
	UnrealKills                int  `json:"unrealKills,omitempty"`
	VisionClearedPings         int  `json:"visionClearedPings,omitempty"`
	VisionScore                int  `json:"visionScore,omitempty"`
	VisionWardsBoughtInGame    int  `json:"visionWardsBoughtInGame,omitempty"`
	WardsKilled                int  `json:"wardsKilled,omitempty"`
	WardsPlaced                int  `json:"wardsPlaced,omitempty"`
	EligibleForProgression     bool `json:"eligibleForProgression,omitempty"`
	FirstBloodAssist           bool `json:"firstBloodAssist,omitempty"`
	FirstBloodKill             bool `json:"firstBloodKill,omitempty"`
	FirstTowerAssist           bool `json:"firstTowerAssist,omitempty"`
	FirstTowerKill             bool `json:"firstTowerKill,omitempty"`
	// This is an offshoot of the OneStone challenge. The code checks if a spell with the same instance ID does the final point of damage to at least 2 Champions. It doesn't matter if they're enemies, but you cannot hurt your friends.
	GameEndedInEarlySurrender bool `json:"gameEndedInEarlySurrender,omitempty"`
	GameEndedInSurrender      bool `json:"gameEndedInSurrender,omitempty"`
	TeamEarlySurrendered      bool `json:"teamEarlySurrendered,omitempty"`
	Win                       bool `json:"win,omitempty"`
}

// match-v5.PerkStatsDto
type MatchPerkStatsV5DTO struct {
	Defense int `json:"defense,omitempty"`
	Flex    int `json:"flex,omitempty"`
	Offense int `json:"offense,omitempty"`
}

// match-v5.PerkStyleSelectionDto
type MatchPerkStyleSelectionV5DTO struct {
	Perk int `json:"perk,omitempty"`
	Var1 int `json:"var1,omitempty"`
	Var2 int `json:"var2,omitempty"`
	Var3 int `json:"var3,omitempty"`
}

// match-v5.PerkStyleDto
type MatchPerkStyleV5DTO struct {
	Description string                         `json:"description,omitempty"`
	Selections  []MatchPerkStyleSelectionV5DTO `json:"selections,omitempty"`
	Style       int                            `json:"style,omitempty"`
}

// match-v5.PerksDto
type MatchPerksV5DTO struct {
	Styles    []MatchPerkStyleV5DTO `json:"styles,omitempty"`
	StatPerks MatchPerkStatsV5DTO   `json:"statPerks"`
}

// match-v5.PositionDto
type MatchPositionV5DTO struct {
	X int `json:"x,omitempty"`
	Y int `json:"y,omitempty"`
}

// match-v5.TeamDto
type MatchTeamV5DTO struct {
	Bans       []MatchBanV5DTO      `json:"bans,omitempty"`
	Feats      MatchFeatsV5DTO      `json:"feats"`
	Objectives MatchObjectivesV5DTO `json:"objectives"`
	TeamID     Team                 `json:"teamId,omitempty"`
	Win        bool                 `json:"win,omitempty"`
}

// match-v5.TimelineDto
type MatchTimelineV5DTO struct {
	// Match metadata.
	Metadata MatchMetadataTimeLineV5DTO `json:"metadata"`
	// Match info.
	Info MatchInfoTimeLineV5DTO `json:"info"`
}

// match-v5.MatchTimelineVictimDamage
type MatchTimelineVictimDamageV5DTO struct {
	Name           string `json:"name,omitempty"`
	SpellName      string `json:"spellName,omitempty"`
	Type           string `json:"type,omitempty"`
	MagicDamage    int    `json:"magicDamage,omitempty"`
	ParticipantID  int    `json:"participantId,omitempty"`
	PhysicalDamage int    `json:"physicalDamage,omitempty"`
	SpellSlot      int    `json:"spellSlot,omitempty"`
	TrueDamage     int    `json:"trueDamage,omitempty"`
	Basic          bool   `json:"basic,omitempty"`
}

// match-v5.MatchDto
type MatchV5DTO struct {
	// Match metadata.
	Metadata MatchMetadataV5DTO `json:"metadata"`
	// Match info.
	Info MatchInfoV5DTO `json:"info"`
}

// spectator-v5.BannedChampion
type SpectatorBannedChampionV5DTO struct {
	// The ID of the banned champion
	ChampionID int `json:"championId,omitempty"`
	// The turn during which the champion was banned
	PickTurn int `json:"pickTurn,omitempty"`
	// The ID of the team that banned the champion
	TeamID Team `json:"teamId,omitempty"`
}

// spectator-v5.CurrentGameInfo
type SpectatorCurrentGameInfoV5DTO struct {
	// The game mode
	GameMode GameMode `json:"gameMode,omitempty"`
	// The game type
	GameType GameType `json:"gameType,omitempty"`
	// The observer information
	Observers SpectatorObserverV5DTO `json:"observers"`
	// The ID of the platform on which the game is being played
	PlatformID string `json:"platformId,omitempty"`
	// Banned champion information
	BannedChampions []SpectatorBannedChampionV5DTO `json:"bannedChampions,omitempty"`
	// The participant information
	Participants []SpectatorCurrentGameParticipantV5DTO `json:"participants,omitempty"`
	// The ID of the game
	GameID int `json:"gameId,omitempty"`
	// The amount of time in seconds that has passed since the game started
	GameLength int `json:"gameLength,omitempty"`
	// The queue type (queue types are documented on the Game Constants page)
	GameQueueConfigID Queue `json:"gameQueueConfigId,omitempty"`
	// The game start time represented in epoch milliseconds
	GameStartTime int `json:"gameStartTime,omitempty"`
	// The ID of the map
	MapID Map `json:"mapId,omitempty"`
}

// spectator-v5.CurrentGameParticipant
type SpectatorCurrentGameParticipantV5DTO struct {
	// The encrypted puuid of this participant
	PUUID  string `json:"puuid,omitempty"`
	RiotID string `json:"riotId,omitempty"`
	// List of Game Customizations
	GameCustomizationObjects []SpectatorGameCustomizationObjectV5DTO `json:"gameCustomizationObjects,omitempty"`
	// Perks/Runes Reforged Information
	Perks SpectatorPerksV5DTO `json:"perks"`
	// The ID of the champion played by this participant
	ChampionID int `json:"championId,omitempty"`
	// The ID of the profile icon used by this participant
	ProfileIconID int `json:"profileIconId,omitempty"`
	// The ID of the first summoner spell used by this participant
	Spell1ID int `json:"spell1Id,omitempty"`
	// The ID of the second summoner spell used by this participant
	Spell2ID int `json:"spell2Id,omitempty"`
	// The team ID of this participant, indicating the participant's team
	TeamID Team `json:"teamId,omitempty"`
	// Flag indicating whether or not this participant is a bot
	Bot bool `json:"bot,omitempty"`
}

// spectator-v5.FeaturedGameInfo
type SpectatorFeaturedGameInfoV5DTO struct {
	// The game mode
	//
	// (Legal values:  CLASSIC,  ODIN,  ARAM,  TUTORIAL,  ONEFORALL,  ASCENSION,  FIRSTBLOOD,  KINGPORO)
	GameMode GameMode `json:"gameMode,omitempty"`
	// The game type
	//
	// (Legal values:  CUSTOM_GAME,  MATCHED_GAME,  TUTORIAL_GAME)
	GameType GameType `json:"gameType,omitempty"`
	// The observer information
	Observers SpectatorObserverV5DTO `json:"observers"`
	// The ID of the platform on which the game is being played
	PlatformID string `json:"platformId,omitempty"`
	// Banned champion information
	BannedChampions []SpectatorBannedChampionV5DTO `json:"bannedChampions,omitempty"`
	// The participant information
	Participants []SpectatorParticipantV5DTO `json:"participants,omitempty"`
	// The ID of the game
	GameID int `json:"gameId,omitempty"`
	// The amount of time in seconds that has passed since the game started
	GameLength int `json:"gameLength,omitempty"`
	// The queue type (queue types are documented on the Game Constants page)
	GameQueueConfigID Queue `json:"gameQueueConfigId,omitempty"`
	// The ID of the map
	MapID Map `json:"mapId,omitempty"`
}

// spectator-v5.FeaturedGames
type SpectatorFeaturedGamesV5DTO struct {
	// The list of featured games
	GameList []SpectatorFeaturedGameInfoV5DTO `json:"gameList,omitempty"`
	// The suggested interval to wait before requesting FeaturedGames again
	ClientRefreshInterval int `json:"clientRefreshInterval,omitempty"`
}

// spectator-v5.GameCustomizationObject
type SpectatorGameCustomizationObjectV5DTO struct {
	// Category identifier for Game Customization
	Category string `json:"category,omitempty"`
	// Game Customization content
	Content string `json:"content,omitempty"`
}

// spectator-v5.Observer
type SpectatorObserverV5DTO struct {
	// Key used to decrypt the spectator grid game data for playback
	EncryptionKey string `json:"encryptionKey,omitempty"`
}

// spectator-v5.Participant
type SpectatorParticipantV5DTO struct {
	// Encrypted puuid of this participant
	PUUID  string `json:"puuid,omitempty"`
	RiotID string `json:"riotId,omitempty"`
	// The ID of the champion played by this participant
	ChampionID int `json:"championId,omitempty"`
	// The ID of the profile icon used by this participant
	ProfileIconID int `json:"profileIconId,omitempty"`
	// The ID of the first summoner spell used by this participant
	Spell1ID int `json:"spell1Id,omitempty"`
	// The ID of the second summoner spell used by this participant
	Spell2ID int `json:"spell2Id,omitempty"`
	// The team ID of this participant, indicating the participant's team
	TeamID Team `json:"teamId,omitempty"`
	// Flag indicating whether or not this participant is a bot
	Bot bool `json:"bot,omitempty"`
}

// spectator-v5.Perks
type SpectatorPerksV5DTO struct {
	// IDs of the perks/runes assigned.
	PerkIDs []int `json:"perkIds,omitempty"`
	// Primary runes path
	PerkStyle int `json:"perkStyle,omitempty"`
	// Secondary runes path
	PerkSubStyle int `json:"perkSubStyle,omitempty"`
}

// lol-status-v4.ContentDto
type StatusContentV4DTO struct {
	Content string `json:"content,omitempty"`
	Locale  string `json:"locale,omitempty"`
}

// lol-status-v4.PlatformDataDto
type StatusPlatformDataV4DTO struct {
	ID           string        `json:"id,omitempty"`
	Name         string        `json:"name,omitempty"`
	Incidents    []StatusV4DTO `json:"incidents,omitempty"`
	Locales      []string      `json:"locales,omitempty"`
	Maintenances []StatusV4DTO `json:"maintenances,omitempty"`
}

// lol-status-v4.UpdateDto
type StatusUpdateV4DTO struct {
	Author    string `json:"author,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	UpdatedAt string `json:"updated_at,omitempty"`
	// (Legal values: riotclient, riotstatus, game)
	PublishLocations []string             `json:"publish_locations,omitempty"`
	Translations     []StatusContentV4DTO `json:"translations,omitempty"`
	ID               int                  `json:"id,omitempty"`
	Publish          bool                 `json:"publish,omitempty"`
}

// lol-status-v4.StatusDto
type StatusV4DTO struct {
	ArchiveAt string `json:"archive_at,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	// (Legal values:  info,  warning,  critical)
	IncidentSeverity string `json:"incident_severity,omitempty"`
	// (Legal values:  scheduled,  in_progress,  complete)
	MaintenanceStatus string `json:"maintenance_status,omitempty"`
	UpdatedAt         string `json:"updated_at,omitempty"`
	// (Legal values: windows, macos, android, ios, ps4, xbone, switch)
	Platforms []string             `json:"platforms,omitempty"`
	Titles    []StatusContentV4DTO `json:"titles,omitempty"`
	Updates   []StatusUpdateV4DTO  `json:"updates,omitempty"`
	ID        int                  `json:"id,omitempty"`
}

// summoner-v4.SummonerDTO
type SummonerV4DTO struct {
	// Encrypted summoner ID. This field is deprecated and will be removed. Use `puuid` instead.
	//
	// Deprecated
	ID string `json:"id,omitempty"`
	// Encrypted PUUID. Exact length of 78 characters.
	PUUID string `json:"puuid,omitempty"`
	// ID of the summoner icon associated with the summoner.
	ProfileIconID int `json:"profileIconId,omitempty"`
	// Date summoner was last modified specified as epoch milliseconds. The following events will update this timestamp: profile icon change, playing the tutorial or advanced tutorial, finishing a game, summoner name change.
	RevisionDate int `json:"revisionDate,omitempty"`
	// Summoner level associated with the summoner.
	SummonerLevel int `json:"summonerLevel,omitempty"`
}

// tournament-v5.TournamentCodeParametersV5
type TournamentCodeParametersV5DTO struct {
	// The map type of the game.
	//
	// (Legal values:  SUMMONERS_RIFT,  HOWLING_ABYSS)
	MapType string `json:"mapType,omitempty"`
	// Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.
	Metadata string `json:"metadata,omitempty"`
	// The pick type of the game.
	//
	// (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
	PickType string `json:"pickType,omitempty"`
	// The spectator type of the game.
	//
	// (Legal values:  NONE,  LOBBYONLY,  ALL)
	SpectatorType string `json:"spectatorType,omitempty"`
	// Optional list of encrypted puuids in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.
	AllowedParticipants []string `json:"allowedParticipants,omitempty"`
	// The team size of the game. Valid values are 1-5.
	TeamSize int `json:"teamSize,omitempty"`
	// Checks if allowed participants are enough to make full teams.
	EnoughPlayers bool `json:"enoughPlayers,omitempty"`
}

// tournament-v5.TournamentCodeUpdateParametersV5
type TournamentCodeUpdateParametersV5DTO struct {
	// The map type
	//
	// (Legal values:  SUMMONERS_RIFT,  HOWLING_ABYSS)
	MapType string `json:"mapType,omitempty"`
	// The pick type
	//
	// (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
	PickType string `json:"pickType,omitempty"`
	// The spectator type
	//
	// (Legal values:  NONE,  LOBBYONLY,  ALL)
	SpectatorType string `json:"spectatorType,omitempty"`
	// Optional list of encrypted puuids in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.
	AllowedParticipants []string `json:"allowedParticipants,omitempty"`
}

// tournament-v5.TournamentCodeV5DTO
type TournamentCodeV5DTO struct {
	// The tournament code.
	Code string `json:"code,omitempty"`
	// The lobby name for the tournament code game.
	LobbyName string `json:"lobbyName,omitempty"`
	// The game map for the tournament code game
	Map string `json:"map,omitempty"`
	// The metadata for tournament code.
	MetaData string `json:"metaData,omitempty"`
	// The password for the tournament code game.
	Password string `json:"password,omitempty"`
	// The pick mode for tournament code game.
	PickType string `json:"pickType,omitempty"`
	// The tournament code's region.
	//
	// (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR,  KR,  PH,  SG,  TH,  TW,  VN)
	Region TournamentRegion `json:"region,omitempty"`
	// The spectator mode for the tournament code game.
	Spectators string `json:"spectators,omitempty"`
	// The puuids of the participants (Encrypted)
	Participants []string `json:"participants,omitempty"`
	// The tournament code's ID.
	ID int `json:"id,omitempty"`
	// The provider's ID.
	ProviderID int `json:"providerId,omitempty"`
	// The team size for the tournament code game.
	TeamSize int `json:"teamSize,omitempty"`
	// The tournament's ID.
	TournamentID int `json:"tournamentId,omitempty"`
}

// tournament-v5.TournamentGamesV5
type TournamentGamesV5DTO struct {
	GameMode string `json:"gameMode,omitempty"`
	GameName string `json:"gameName,omitempty"`
	GameType string `json:"gameType,omitempty"`
	// Metadata for the TournamentCode
	MetaData string `json:"metaData,omitempty"`
	// Region of the game
	Region TournamentRegion `json:"region,omitempty"`
	// Tournament Code
	ShortCode   string                `json:"shortCode,omitempty"`
	LosingTeam  []TournamentTeamV5DTO `json:"losingTeam,omitempty"`
	WinningTeam []TournamentTeamV5DTO `json:"winningTeam,omitempty"`
	GameID      int                   `json:"gameId,omitempty"`
	// Game Map ID
	GameMap   int `json:"gameMap,omitempty"`
	StartTime int `json:"startTime,omitempty"`
}

// tournament-v5.LobbyEventV5DTO
type TournamentLobbyEventV5DTO struct {
	// The type of event that was triggered
	EventType string `json:"eventType,omitempty"`
	// The puuid that triggered the event (Encrypted)
	PUUID string `json:"puuid,omitempty"`
	// Timestamp from the event
	Timestamp string `json:"timestamp,omitempty"`
}

// tournament-v5.LobbyEventV5DTOWrapper
type TournamentLobbyEventWrapperV5DTO struct {
	EventList []TournamentLobbyEventV5DTO `json:"eventList,omitempty"`
}

// tournament-v5.ProviderRegistrationParametersV5
type TournamentProviderRegistrationParametersV5DTO struct {
	// The region in which the provider will be running tournaments.
	//
	// (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR,  KR,  PH,  SG,  TH,  TW,  VN)
	Region TournamentRegion `json:"region,omitempty"`
	// The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443).
	URL string `json:"url,omitempty"`
}

// tournament-v5.TournamentRegistrationParametersV5
type TournamentRegistrationParametersV5DTO struct {
	// The optional name of the tournament.
	Name string `json:"name,omitempty"`
	// The provider ID to specify the regional registered provider data to associate this tournament.
	ProviderID int `json:"providerId,omitempty"`
}

// tournament-stub-v5.TournamentCodeParametersV5
type TournamentStubCodeParametersV5DTO struct {
	// The map type of the game.
	//
	// (Legal values:  SUMMONERS_RIFT,  HOWLING_ABYSS)
	MapType string `json:"mapType,omitempty"`
	// Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.
	Metadata string `json:"metadata,omitempty"`
	// The pick type of the game.
	//
	// (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
	PickType string `json:"pickType,omitempty"`
	// The spectator type of the game.
	//
	// (Legal values:  NONE,  LOBBYONLY,  ALL)
	SpectatorType string `json:"spectatorType,omitempty"`
	// Optional list of encrypted puuids in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.
	AllowedParticipants []string `json:"allowedParticipants,omitempty"`
	// The team size of the game. Valid values are 1-5.
	TeamSize int `json:"teamSize,omitempty"`
	// Checks if allowed participants are enough to make full teams.
	EnoughPlayers bool `json:"enoughPlayers,omitempty"`
}

// tournament-stub-v5.TournamentCodeV5DTO
type TournamentStubCodeV5DTO struct {
	// The tournament code.
	Code string `json:"code,omitempty"`
	// The lobby name for the tournament code game.
	LobbyName string `json:"lobbyName,omitempty"`
	// The game map for the tournament code game
	Map string `json:"map,omitempty"`
	// The metadata for tournament code.
	MetaData string `json:"metaData,omitempty"`
	// The password for the tournament code game.
	Password string `json:"password,omitempty"`
	// The pick mode for tournament code game.
	PickType string `json:"pickType,omitempty"`
	// The tournament code's region.
	//
	// (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR,  KR)
	Region TournamentRegion `json:"region,omitempty"`
	// The puuids of the participants (Encrypted)
	Participants []string `json:"participants,omitempty"`
	// The tournament code's ID.
	ID int `json:"id,omitempty"`
	// The provider's ID.
	ProviderID int `json:"providerId,omitempty"`
	// The team size for the tournament code game.
	TeamSize int `json:"teamSize,omitempty"`
	// The tournament's ID.
	TournamentID int `json:"tournamentId,omitempty"`
}

// tournament-stub-v5.LobbyEventV5DTO
type TournamentStubLobbyEventV5DTO struct {
	// The type of event that was triggered
	EventType string `json:"eventType,omitempty"`
	// The puuid that triggered the event (Encrypted)
	PUUID string `json:"puuid,omitempty"`
	// Timestamp from the event
	Timestamp string `json:"timestamp,omitempty"`
}

// tournament-stub-v5.LobbyEventV5DTOWrapper
type TournamentStubLobbyEventWrapperV5DTO struct {
	EventList []TournamentStubLobbyEventV5DTO `json:"eventList,omitempty"`
}

// tournament-stub-v5.ProviderRegistrationParametersV5
type TournamentStubProviderRegistrationParametersV5DTO struct {
	// The region in which the provider will be running tournaments.
	//
	// (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR,  KR)
	Region TournamentRegion `json:"region,omitempty"`
	// The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443).
	URL string `json:"url,omitempty"`
}

// tournament-stub-v5.TournamentRegistrationParametersV5
type TournamentStubRegistrationParametersV5DTO struct {
	// The optional name of the tournament.
	Name string `json:"name,omitempty"`
	// The provider ID to specify the regional registered provider data to associate this tournament.
	ProviderID int `json:"providerId,omitempty"`
}

// tournament-v5.TournamentTeamV5
type TournamentTeamV5DTO struct {
	// Player Unique UUID (Encrypted)
	PUUID string `json:"puuid,omitempty"`
}
