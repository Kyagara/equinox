package lol

///////////////////////////////////////////////
//                                           //
//                     !                     //
//   This file is automatically generated!   //
//           Do not directly edit!           //
//                                           //
///////////////////////////////////////////////

// Spec version = 3261d1c333d2269147205cdd87e62d64b898e005

// lol-challenges-v1.ApexPlayerInfoDto
type ChallengesApexPlayerInfoV1DTO struct {
	PUUID    string  `json:"puuid,omitempty"`
	Position int32   `json:"position,omitempty"`
	Value    float64 `json:"value,omitempty"`
}

// lol-challenges-v1.ChallengeConfigInfoDto
type ChallengesChallengeConfigInfoV1DTO struct {
	LocalizedNames map[string]map[string]string `json:"localizedNames,omitempty"`
	Thresholds     map[string]float64           `json:"thresholds,omitempty"`
	// DISABLED - not visible and not calculated, HIDDEN - not visible, but calculated, ENABLED - visible and calculated, ARCHIVED - visible, but not calculated
	State string `json:"state,omitempty"`
	// LIFETIME - stats are incremented without reset, SEASON - stats are accumulated by season and reset at the beginning of new season
	Tracking       string `json:"tracking,omitempty"`
	EndTimestamp   int64  `json:"endTimestamp,omitempty"`
	ID             int64  `json:"id,omitempty"`
	StartTimestamp int64  `json:"startTimestamp,omitempty"`
	Leaderboard    bool   `json:"leaderboard,omitempty"`
}

// lol-challenges-v1.ChallengeInfo
type ChallengesChallengeInfoV1DTO struct {
	Level          Tier    `json:"level,omitempty"`
	AchievedTime   int64   `json:"achievedTime,omitempty"`
	ChallengeID    int64   `json:"challengeId,omitempty"`
	Percentile     float64 `json:"percentile,omitempty"`
	PlayersInLevel int64   `json:"playersInLevel,omitempty"`
	Position       int64   `json:"position,omitempty"`
	Value          float64 `json:"value,omitempty"`
}

// lol-challenges-v1.ChallengePoints
type ChallengesChallengePointsV1DTO struct {
	Level      Tier    `json:"level,omitempty"`
	Current    int64   `json:"current,omitempty"`
	Max        int64   `json:"max,omitempty"`
	Percentile float64 `json:"percentile,omitempty"`
}

// lol-challenges-v1.Level
type ChallengesLevelV1DTO struct {
}

// lol-challenges-v1.PlayerClientPreferences
type ChallengesPlayerClientPreferencesV1DTO struct {
	BannerAccent             string  `json:"bannerAccent,omitempty"`
	CrestBorder              string  `json:"crestBorder,omitempty"`
	Title                    string  `json:"title,omitempty"`
	ChallengeIDs             []int64 `json:"challengeIds,omitempty"`
	PrestigeCrestBorderLevel int32   `json:"prestigeCrestBorderLevel,omitempty"`
}

// lol-challenges-v1.PlayerInfoDto
type ChallengesPlayerInfoV1DTO struct {
	CategoryPoints map[string]ChallengesChallengePointsV1DTO `json:"categoryPoints,omitempty"`
	Challenges     []ChallengesChallengeInfoV1DTO            `json:"challenges,omitempty"`
	Preferences    ChallengesPlayerClientPreferencesV1DTO    `json:"preferences,omitempty"`
	TotalPoints    ChallengesChallengePointsV1DTO            `json:"totalPoints,omitempty"`
}

// lol-challenges-v1.State
type ChallengesStateV1DTO struct {
}

// lol-challenges-v1.Tracking
type ChallengesTrackingV1DTO struct {
}

// champion-mastery-v4.NextSeasonMilestonesDto
type ChampionMasteryNextSeasonMilestonesV4DTO struct {
	RequireGradeCounts map[string]int32 `json:"requireGradeCounts,omitempty"`
	// Reward configuration.
	RewardConfig ChampionMasteryRewardConfigV4DTO `json:"rewardConfig,omitempty"`
	// Reward marks.
	RewardMarks        int32 `json:"rewardMarks,omitempty"`
	TotalGamesRequires int32 `json:"totalGamesRequires,omitempty"`
	// Bonus.
	Bonus bool `json:"bonus,omitempty"`
}

// champion-mastery-v4.RewardConfigDto
type ChampionMasteryRewardConfigV4DTO struct {
	// Reward type
	RewardType string `json:"rewardType,omitempty"`
	// Reward value
	RewardValue string `json:"rewardValue,omitempty"`
	// Maximun reward
	MaximumReward int32 `json:"maximumReward,omitempty"`
}

// champion-mastery-v4.ChampionMasteryDto
type ChampionMasteryV4DTO struct {
	// Player Universal Unique Identifier. Exact length of 78 characters. (Encrypted)
	PUUID               string                                   `json:"puuid,omitempty"`
	MilestoneGrades     []string                                 `json:"milestoneGrades,omitempty"`
	NextSeasonMilestone ChampionMasteryNextSeasonMilestonesV4DTO `json:"nextSeasonMilestone,omitempty"`
	// Champion ID for this entry.
	ChampionID int64 `json:"championId,omitempty"`
	// Number of points earned since current level has been achieved.
	ChampionPointsSinceLastLevel int64 `json:"championPointsSinceLastLevel,omitempty"`
	// Number of points needed to achieve next level. Zero if player reached maximum champion level for this champion.
	ChampionPointsUntilNextLevel int64 `json:"championPointsUntilNextLevel,omitempty"`
	// Last time this champion was played by this player - in Unix milliseconds time format.
	LastPlayTime int64 `json:"lastPlayTime,omitempty"`
	// Champion level for specified player and champion combination.
	ChampionLevel int32 `json:"championLevel,omitempty"`
	// Total number of champion points for this player and champion combination - they are used to determine championLevel.
	ChampionPoints           int32 `json:"championPoints,omitempty"`
	ChampionSeasonMilestone  int32 `json:"championSeasonMilestone,omitempty"`
	MarkRequiredForNextLevel int32 `json:"markRequiredForNextLevel,omitempty"`
	// The token earned for this champion at the current championLevel. When the championLevel is advanced the tokensEarned resets to 0.
	TokensEarned int32 `json:"tokensEarned,omitempty"`
	// Is chest granted for this champion or not in current season.
	ChestGranted bool `json:"chestGranted,omitempty"`
}

// champion-v3.ChampionInfo
type ChampionRotationV3DTO struct {
	FreeChampionIDs              []int32 `json:"freeChampionIds,omitempty"`
	FreeChampionIDsForNewPlayers []int32 `json:"freeChampionIdsForNewPlayers,omitempty"`
	MaxNewPlayerLevel            int32   `json:"maxNewPlayerLevel,omitempty"`
}

// clash-v1.PlayerDto
type ClashPlayerV1DTO struct {
	// (Legal values:  UNSELECTED,  FILL,  TOP,  JUNGLE,  MIDDLE,  BOTTOM,  UTILITY)
	Position string `json:"position,omitempty"`
	// (Legal values:  CAPTAIN,  MEMBER)
	Role       string `json:"role,omitempty"`
	SummonerID string `json:"summonerId,omitempty"`
	TeamID     string `json:"teamId,omitempty"`
}

// clash-v1.TeamDto
type ClashTeamV1DTO struct {
	Abbreviation string `json:"abbreviation,omitempty"`
	// Summoner ID of the team captain.
	Captain string `json:"captain,omitempty"`
	ID      string `json:"id,omitempty"`
	Name    string `json:"name,omitempty"`
	// Team members.
	Players      []ClashPlayerV1DTO `json:"players,omitempty"`
	IconID       int32              `json:"iconId,omitempty"`
	Tier         int32              `json:"tier,omitempty"`
	TournamentID int32              `json:"tournamentId,omitempty"`
}

// clash-v1.TournamentPhaseDto
type ClashTournamentPhaseV1DTO struct {
	Cancelled        bool  `json:"cancelled,omitempty"`
	ID               int32 `json:"id,omitempty"`
	RegistrationTime int64 `json:"registrationTime,omitempty"`
	StartTime        int64 `json:"startTime,omitempty"`
}

// clash-v1.TournamentDto
type ClashTournamentV1DTO struct {
	NameKey          string `json:"nameKey,omitempty"`
	NameKeySecondary string `json:"nameKeySecondary,omitempty"`
	// Tournament phase.
	Schedule []ClashTournamentPhaseV1DTO `json:"schedule,omitempty"`
	ID       int32                       `json:"id,omitempty"`
	ThemeID  int32                       `json:"themeId,omitempty"`
}

// league-v4.LeagueEntryDTO
type LeagueEntryV4DTO struct {
	LeagueID  string    `json:"leagueId,omitempty"`
	QueueType QueueType `json:"queueType,omitempty"`
	// The player's division within a tier.
	Rank Division `json:"rank,omitempty"`
	// Player's encrypted summonerId.
	SummonerID   string                `json:"summonerId,omitempty"`
	Tier         Tier                  `json:"tier,omitempty"`
	MiniSeries   LeagueMiniSeriesV4DTO `json:"miniSeries,omitempty"`
	LeaguePoints int32                 `json:"leaguePoints,omitempty"`
	// Losing team on Summoners Rift.
	Losses int32 `json:"losses,omitempty"`
	// Winning team on Summoners Rift.
	Wins       int32 `json:"wins,omitempty"`
	FreshBlood bool  `json:"freshBlood,omitempty"`
	HotStreak  bool  `json:"hotStreak,omitempty"`
	Inactive   bool  `json:"inactive,omitempty"`
	Veteran    bool  `json:"veteran,omitempty"`
}

// league-exp-v4.LeagueEntryDTO
type LeagueExpLeagueEntryV4DTO struct {
	LeagueID  string    `json:"leagueId,omitempty"`
	QueueType QueueType `json:"queueType,omitempty"`
	// The player's division within a tier.
	Rank Division `json:"rank,omitempty"`
	// Player's summonerId (Encrypted)
	SummonerID   string                   `json:"summonerId,omitempty"`
	Tier         Tier                     `json:"tier,omitempty"`
	MiniSeries   LeagueExpMiniSeriesV4DTO `json:"miniSeries,omitempty"`
	LeaguePoints int32                    `json:"leaguePoints,omitempty"`
	// Losing team on Summoners Rift. Second through eighth placement in Teamfight Tactics.
	Losses int32 `json:"losses,omitempty"`
	// Winning team on Summoners Rift. First placement in Teamfight Tactics.
	Wins       int32 `json:"wins,omitempty"`
	FreshBlood bool  `json:"freshBlood,omitempty"`
	HotStreak  bool  `json:"hotStreak,omitempty"`
	Inactive   bool  `json:"inactive,omitempty"`
	Veteran    bool  `json:"veteran,omitempty"`
}

// league-exp-v4.MiniSeriesDTO
type LeagueExpMiniSeriesV4DTO struct {
	Progress string `json:"progress,omitempty"`
	Losses   int32  `json:"losses,omitempty"`
	Target   int32  `json:"target,omitempty"`
	Wins     int32  `json:"wins,omitempty"`
}

// league-v4.LeagueItemDTO
type LeagueItemV4DTO struct {
	Rank Division `json:"rank,omitempty"`
	// Player's encrypted summonerId.
	SummonerID   string                `json:"summonerId,omitempty"`
	MiniSeries   LeagueMiniSeriesV4DTO `json:"miniSeries,omitempty"`
	LeaguePoints int32                 `json:"leaguePoints,omitempty"`
	// Losing team on Summoners Rift.
	Losses int32 `json:"losses,omitempty"`
	// Winning team on Summoners Rift.
	Wins       int32 `json:"wins,omitempty"`
	FreshBlood bool  `json:"freshBlood,omitempty"`
	HotStreak  bool  `json:"hotStreak,omitempty"`
	Inactive   bool  `json:"inactive,omitempty"`
	Veteran    bool  `json:"veteran,omitempty"`
}

// league-v4.LeagueListDTO
type LeagueListV4DTO struct {
	LeagueID string            `json:"leagueId,omitempty"`
	Name     string            `json:"name,omitempty"`
	Queue    QueueType         `json:"queue,omitempty"`
	Tier     Tier              `json:"tier,omitempty"`
	Entries  []LeagueItemV4DTO `json:"entries,omitempty"`
}

// league-v4.MiniSeriesDTO
type LeagueMiniSeriesV4DTO struct {
	Progress string `json:"progress,omitempty"`
	Losses   int32  `json:"losses,omitempty"`
	Target   int32  `json:"target,omitempty"`
	Wins     int32  `json:"wins,omitempty"`
}

// match-v5.BanDto
type MatchBanV5DTO struct {
	ChampionID int32 `json:"championId,omitempty"`
	PickTurn   int32 `json:"pickTurn,omitempty"`
}

// match-v5.ChallengesDto
type MatchChallengesV5DTO struct {
	LegendaryItemUsed                         []int32 `json:"legendaryItemUsed,omitempty"`
	AlliedJungleMonsterKills                  float64 `json:"alliedJungleMonsterKills,omitempty"`
	BaronBuffGoldAdvantageOverThreshold       float64 `json:"baronBuffGoldAdvantageOverThreshold,omitempty"`
	ControlWardTimeCoverageInRiverOrEnemyHalf float64 `json:"controlWardTimeCoverageInRiverOrEnemyHalf,omitempty"`
	DamagePerMinute                           float64 `json:"damagePerMinute,omitempty"`
	DamageTakenOnTeamPercentage               float64 `json:"damageTakenOnTeamPercentage,omitempty"`
	EarliestBaron                             float64 `json:"earliestBaron,omitempty"`
	EarliestDragonTakedown                    float64 `json:"earliestDragonTakedown,omitempty"`
	EarliestElderDragon                       float64 `json:"earliestElderDragon,omitempty"`
	EarlyLaningPhaseGoldExpAdvantage          float64 `json:"earlyLaningPhaseGoldExpAdvantage,omitempty"`
	EnemyJungleMonsterKills                   float64 `json:"enemyJungleMonsterKills,omitempty"`
	FasterSupportQuestCompletion              float64 `json:"fasterSupportQuestCompletion,omitempty"`
	FastestLegendary                          float64 `json:"fastestLegendary,omitempty"`
	FirstTurretKilled                         float64 `json:"firstTurretKilled,omitempty"`
	GameLength                                float64 `json:"gameLength,omitempty"`
	GoldPerMinute                             float64 `json:"goldPerMinute,omitempty"`
	HadAfkTeammate                            float64 `json:"hadAfkTeammate,omitempty"`
	HighestChampionDamage                     float64 `json:"highestChampionDamage,omitempty"`
	HighestCrowdControlScore                  float64 `json:"highestCrowdControlScore,omitempty"`
	HighestWardKills                          float64 `json:"highestWardKills,omitempty"`
	InfernalScalePickup                       float64 `json:"InfernalScalePickup,omitempty"`
	JungleCsBefore10Minutes                   float64 `json:"jungleCsBefore10Minutes,omitempty"`
	JunglerKillsEarlyJungle                   float64 `json:"junglerKillsEarlyJungle,omitempty"`
	Kda                                       float64 `json:"kda,omitempty"`
	KillParticipation                         float64 `json:"killParticipation,omitempty"`
	KillsOnLanersEarlyJungleAsJungler         float64 `json:"killsOnLanersEarlyJungleAsJungler,omitempty"`
	LaningPhaseGoldExpAdvantage               float64 `json:"laningPhaseGoldExpAdvantage,omitempty"`
	LegendaryCount                            float64 `json:"legendaryCount,omitempty"`
	MaxCsAdvantageOnLaneOpponent              float64 `json:"maxCsAdvantageOnLaneOpponent,omitempty"`
	MaxLevelLeadLaneOpponent                  float64 `json:"maxLevelLeadLaneOpponent,omitempty"`
	MoreEnemyJungleThanOpponent               float64 `json:"moreEnemyJungleThanOpponent,omitempty"`
	MostWardsDestroyedOneSweeper              float64 `json:"mostWardsDestroyedOneSweeper,omitempty"`
	MythicItemUsed                            float64 `json:"mythicItemUsed,omitempty"`
	PlayedChampSelectPosition                 float64 `json:"playedChampSelectPosition,omitempty"`
	SoloTurretsLategame                       float64 `json:"soloTurretsLategame,omitempty"`
	TakedownsFirst25Minutes                   float64 `json:"takedownsFirst25Minutes,omitempty"`
	TeamDamagePercentage                      float64 `json:"teamDamagePercentage,omitempty"`
	TeleportTakedowns                         float64 `json:"teleportTakedowns,omitempty"`
	ThirdInhibitorDestroyedTime               float64 `json:"thirdInhibitorDestroyedTime,omitempty"`
	ThreeWardsOneSweeperCount                 float64 `json:"threeWardsOneSweeperCount,omitempty"`
	VisionScoreAdvantageLaneOpponent          float64 `json:"visionScoreAdvantageLaneOpponent,omitempty"`
	VisionScorePerMinute                      float64 `json:"visionScorePerMinute,omitempty"`
	AbilityUses                               int32   `json:"abilityUses,omitempty"`
	AcesBefore15Minutes                       int32   `json:"acesBefore15Minutes,omitempty"`
	BaronTakedowns                            int32   `json:"baronTakedowns,omitempty"`
	BlastConeOppositeOpponentCount            int32   `json:"blastConeOppositeOpponentCount,omitempty"`
	BountyGold                                int32   `json:"bountyGold,omitempty"`
	BuffsStolen                               int32   `json:"buffsStolen,omitempty"`
	CompleteSupportQuestInTime                int32   `json:"completeSupportQuestInTime,omitempty"`
	ControlWardsPlaced                        int32   `json:"controlWardsPlaced,omitempty"`
	DancedWithRiftHerald                      int32   `json:"dancedWithRiftHerald,omitempty"`
	DeathsByEnemyChamps                       int32   `json:"deathsByEnemyChamps,omitempty"`
	DodgeSkillShotsSmallWindow                int32   `json:"dodgeSkillShotsSmallWindow,omitempty"`
	DoubleAces                                int32   `json:"doubleAces,omitempty"`
	DragonTakedowns                           int32   `json:"dragonTakedowns,omitempty"`
	EffectiveHealAndShielding                 float32 `json:"effectiveHealAndShielding,omitempty"`
	ElderDragonKillsWithOpposingSoul          int32   `json:"elderDragonKillsWithOpposingSoul,omitempty"`
	ElderDragonMultikills                     int32   `json:"elderDragonMultikills,omitempty"`
	EnemyChampionImmobilizations              int32   `json:"enemyChampionImmobilizations,omitempty"`
	EpicMonsterKillsNearEnemyJungler          int32   `json:"epicMonsterKillsNearEnemyJungler,omitempty"`
	EpicMonsterKillsWithin30SecondsOfSpawn    int32   `json:"epicMonsterKillsWithin30SecondsOfSpawn,omitempty"`
	EpicMonsterSteals                         int32   `json:"epicMonsterSteals,omitempty"`
	EpicMonsterStolenWithoutSmite             int32   `json:"epicMonsterStolenWithoutSmite,omitempty"`
	FirstTurretKilledTime                     float32 `json:"firstTurretKilledTime,omitempty"`
	FistBumpParticipation                     int32   `json:"fistBumpParticipation,omitempty"`
	FlawlessAces                              int32   `json:"flawlessAces,omitempty"`
	FullTeamTakedown                          int32   `json:"fullTeamTakedown,omitempty"`
	GetTakedownsInAllLanesEarlyJungleAsLaner  int32   `json:"getTakedownsInAllLanesEarlyJungleAsLaner,omitempty"`
	HadOpenNexus                              int32   `json:"hadOpenNexus,omitempty"`
	ImmobilizeAndKillWithAlly                 int32   `json:"immobilizeAndKillWithAlly,omitempty"`
	InitialBuffCount                          int32   `json:"initialBuffCount,omitempty"`
	InitialCrabCount                          int32   `json:"initialCrabCount,omitempty"`
	JunglerTakedownsNearDamagedEpicMonster    int32   `json:"junglerTakedownsNearDamagedEpicMonster,omitempty"`
	KTurretsDestroyedBeforePlatesFall         int32   `json:"kTurretsDestroyedBeforePlatesFall,omitempty"`
	KillAfterHiddenWithAlly                   int32   `json:"killAfterHiddenWithAlly,omitempty"`
	KilledChampTookFullTeamDamageSurvived     int32   `json:"killedChampTookFullTeamDamageSurvived,omitempty"`
	KillingSprees                             int32   `json:"killingSprees,omitempty"`
	KillsNearEnemyTurret                      int32   `json:"killsNearEnemyTurret,omitempty"`
	KillsOnOtherLanesEarlyJungleAsLaner       int32   `json:"killsOnOtherLanesEarlyJungleAsLaner,omitempty"`
	KillsOnRecentlyHealedByAramPack           int32   `json:"killsOnRecentlyHealedByAramPack,omitempty"`
	KillsUnderOwnTurret                       int32   `json:"killsUnderOwnTurret,omitempty"`
	KillsWithHelpFromEpicMonster              int32   `json:"killsWithHelpFromEpicMonster,omitempty"`
	KnockEnemyIntoTeamAndKill                 int32   `json:"knockEnemyIntoTeamAndKill,omitempty"`
	LandSkillShotsEarlyGame                   int32   `json:"landSkillShotsEarlyGame,omitempty"`
	LaneMinionsFirst10Minutes                 int32   `json:"laneMinionsFirst10Minutes,omitempty"`
	LostAnInhibitor                           int32   `json:"lostAnInhibitor,omitempty"`
	MaxKillDeficit                            int32   `json:"maxKillDeficit,omitempty"`
	MejaisFullStackInTime                     int32   `json:"mejaisFullStackInTime,omitempty"`
	// This is an offshoot of the OneStone challenge. The code checks if a spell with the same instance ID does the final point of damage to at least 2 Champions. It doesn't matter if they're enemies, but you cannot hurt your friends.
	MultiKillOneSpell                   int32   `json:"multiKillOneSpell,omitempty"`
	MultiTurretRiftHeraldCount          int32   `json:"multiTurretRiftHeraldCount,omitempty"`
	Multikills                          int32   `json:"multikills,omitempty"`
	MultikillsAfterAggressiveFlash      int32   `json:"multikillsAfterAggressiveFlash,omitempty"`
	OuterTurretExecutesBefore10Minutes  int32   `json:"outerTurretExecutesBefore10Minutes,omitempty"`
	OutnumberedKills                    int32   `json:"outnumberedKills,omitempty"`
	OutnumberedNexusKill                int32   `json:"outnumberedNexusKill,omitempty"`
	PerfectDragonSoulsTaken             int32   `json:"perfectDragonSoulsTaken,omitempty"`
	PerfectGame                         int32   `json:"perfectGame,omitempty"`
	PickKillWithAlly                    int32   `json:"pickKillWithAlly,omitempty"`
	PoroExplosions                      int32   `json:"poroExplosions,omitempty"`
	QuickCleanse                        int32   `json:"quickCleanse,omitempty"`
	QuickFirstTurret                    int32   `json:"quickFirstTurret,omitempty"`
	QuickSoloKills                      int32   `json:"quickSoloKills,omitempty"`
	RiftHeraldTakedowns                 int32   `json:"riftHeraldTakedowns,omitempty"`
	SaveAllyFromDeath                   int32   `json:"saveAllyFromDeath,omitempty"`
	ScuttleCrabKills                    int32   `json:"scuttleCrabKills,omitempty"`
	ShortestTimeToAceFromFirstTakedown  float32 `json:"shortestTimeToAceFromFirstTakedown,omitempty"`
	SkillshotsDodged                    int32   `json:"skillshotsDodged,omitempty"`
	SkillshotsHit                       int32   `json:"skillshotsHit,omitempty"`
	SnowballsHit                        int32   `json:"snowballsHit,omitempty"`
	SoloBaronKills                      int32   `json:"soloBaronKills,omitempty"`
	SoloKills                           int32   `json:"soloKills,omitempty"`
	StealthWardsPlaced                  int32   `json:"stealthWardsPlaced,omitempty"`
	SurvivedSingleDigitHpCount          int32   `json:"survivedSingleDigitHpCount,omitempty"`
	SurvivedThreeImmobilizesInFight     int32   `json:"survivedThreeImmobilizesInFight,omitempty"`
	SwarmDefeatAatrox                   int32   `json:"SWARM_DefeatAatrox,omitempty"`
	SwarmDefeatBriar                    int32   `json:"SWARM_DefeatBriar,omitempty"`
	SwarmDefeatMiniBosses               int32   `json:"SWARM_DefeatMiniBosses,omitempty"`
	SwarmEvolveWeapon                   int32   `json:"SWARM_EvolveWeapon,omitempty"`
	SwarmHave3Passives                  int32   `json:"SWARM_Have3Passives,omitempty"`
	SwarmKillEnemy                      int32   `json:"SWARM_KillEnemy,omitempty"`
	SwarmPickupGold                     int32   `json:"SWARM_PickupGold,omitempty"`
	SwarmReachLevel50                   int32   `json:"SWARM_ReachLevel50,omitempty"`
	SwarmSurvive15Min                   int32   `json:"SWARM_Survive15Min,omitempty"`
	SwarmWinWith5EvolvedWeapons         int32   `json:"SWARM_WinWith5EvolvedWeapons,omitempty"`
	TakedownOnFirstTurret               int32   `json:"takedownOnFirstTurret,omitempty"`
	Takedowns                           int32   `json:"takedowns,omitempty"`
	TakedownsAfterGainingLevelAdvantage int32   `json:"takedownsAfterGainingLevelAdvantage,omitempty"`
	TakedownsBeforeJungleMinionSpawn    int32   `json:"takedownsBeforeJungleMinionSpawn,omitempty"`
	TakedownsFirstXMinutes              int32   `json:"takedownsFirstXMinutes,omitempty"`
	TakedownsInAlcove                   int32   `json:"takedownsInAlcove,omitempty"`
	TakedownsInEnemyFountain            int32   `json:"takedownsInEnemyFountain,omitempty"`
	TeamBaronKills                      int32   `json:"teamBaronKills,omitempty"`
	TeamElderDragonKills                int32   `json:"teamElderDragonKills,omitempty"`
	TeamRiftHeraldKills                 int32   `json:"teamRiftHeraldKills,omitempty"`
	TookLargeDamageSurvived             int32   `json:"tookLargeDamageSurvived,omitempty"`
	TurretPlatesTaken                   int32   `json:"turretPlatesTaken,omitempty"`
	TurretTakedowns                     int32   `json:"turretTakedowns,omitempty"`
	// Any player who damages a tower that is destroyed within 30 seconds of a Rift Herald charge will receive credit. A player who does not damage the tower will not receive credit.
	TurretsTakenWithRiftHerald   int32 `json:"turretsTakenWithRiftHerald,omitempty"`
	TwentyMinionsIn3SecondsCount int32 `json:"twentyMinionsIn3SecondsCount,omitempty"`
	TwoWardsOneSweeperCount      int32 `json:"twoWardsOneSweeperCount,omitempty"`
	UnseenRecalls                int32 `json:"unseenRecalls,omitempty"`
	VoidMonsterKill              int32 `json:"voidMonsterKill,omitempty"`
	WardTakedowns                int32 `json:"wardTakedowns,omitempty"`
	WardTakedownsBefore20M       int32 `json:"wardTakedownsBefore20M,omitempty"`
	WardsGuarded                 int32 `json:"wardsGuarded,omitempty"`
	X12AssistStreakCount         int32 `json:"12AssistStreakCount,omitempty"`
}

// match-v5.ChampionStatsDto
type MatchChampionStatsV5DTO struct {
	AbilityHaste         int32 `json:"abilityHaste,omitempty"`
	AbilityPower         int32 `json:"abilityPower,omitempty"`
	Armor                int32 `json:"armor,omitempty"`
	ArmorPen             int32 `json:"armorPen,omitempty"`
	ArmorPenPercent      int32 `json:"armorPenPercent,omitempty"`
	AttackDamage         int32 `json:"attackDamage,omitempty"`
	AttackSpeed          int32 `json:"attackSpeed,omitempty"`
	BonusArmorPenPercent int32 `json:"bonusArmorPenPercent,omitempty"`
	BonusMagicPenPercent int32 `json:"bonusMagicPenPercent,omitempty"`
	CcReduction          int32 `json:"ccReduction,omitempty"`
	CooldownReduction    int32 `json:"cooldownReduction,omitempty"`
	Health               int32 `json:"health,omitempty"`
	HealthMax            int32 `json:"healthMax,omitempty"`
	HealthRegen          int32 `json:"healthRegen,omitempty"`
	Lifesteal            int32 `json:"lifesteal,omitempty"`
	MagicPen             int32 `json:"magicPen,omitempty"`
	MagicPenPercent      int32 `json:"magicPenPercent,omitempty"`
	MagicResist          int32 `json:"magicResist,omitempty"`
	MovementSpeed        int32 `json:"movementSpeed,omitempty"`
	Omnivamp             int32 `json:"omnivamp,omitempty"`
	PhysicalVamp         int32 `json:"physicalVamp,omitempty"`
	Power                int32 `json:"power,omitempty"`
	PowerMax             int32 `json:"powerMax,omitempty"`
	PowerRegen           int32 `json:"powerRegen,omitempty"`
	SpellVamp            int32 `json:"spellVamp,omitempty"`
}

// match-v5.DamageStatsDto
type MatchDamageStatsV5DTO struct {
	MagicDamageDone               int32 `json:"magicDamageDone,omitempty"`
	MagicDamageDoneToChampions    int32 `json:"magicDamageDoneToChampions,omitempty"`
	MagicDamageTaken              int32 `json:"magicDamageTaken,omitempty"`
	PhysicalDamageDone            int32 `json:"physicalDamageDone,omitempty"`
	PhysicalDamageDoneToChampions int32 `json:"physicalDamageDoneToChampions,omitempty"`
	PhysicalDamageTaken           int32 `json:"physicalDamageTaken,omitempty"`
	TotalDamageDone               int32 `json:"totalDamageDone,omitempty"`
	TotalDamageDoneToChampions    int32 `json:"totalDamageDoneToChampions,omitempty"`
	TotalDamageTaken              int32 `json:"totalDamageTaken,omitempty"`
	TrueDamageDone                int32 `json:"trueDamageDone,omitempty"`
	TrueDamageDoneToChampions     int32 `json:"trueDamageDoneToChampions,omitempty"`
	TrueDamageTaken               int32 `json:"trueDamageTaken,omitempty"`
}

// match-v5.EventsTimeLineDto
type MatchEventsTimeLineV5DTO struct {
	BuildingType            string                           `json:"buildingType,omitempty"`
	KillType                string                           `json:"killType,omitempty"`
	LaneType                string                           `json:"laneType,omitempty"`
	LevelUpType             string                           `json:"levelUpType,omitempty"`
	MonsterSubType          string                           `json:"monsterSubType,omitempty"`
	MonsterType             string                           `json:"monsterType,omitempty"`
	Name                    string                           `json:"name,omitempty"`
	TowerType               string                           `json:"towerType,omitempty"`
	TransformType           string                           `json:"transformType,omitempty"`
	Type                    string                           `json:"type,omitempty"`
	WardType                string                           `json:"wardType,omitempty"`
	AssistingParticipantIDs []int32                          `json:"assistingParticipantIds,omitempty"`
	VictimDamageDealt       []MatchTimelineVictimDamageV5DTO `json:"victimDamageDealt,omitempty"`
	VictimDamageReceived    []MatchTimelineVictimDamageV5DTO `json:"victimDamageReceived,omitempty"`
	ActualStartTime         int64                            `json:"actualStartTime,omitempty"`
	GameID                  int64                            `json:"gameId,omitempty"`
	RealTimestamp           int64                            `json:"realTimestamp,omitempty"`
	Timestamp               int64                            `json:"timestamp,omitempty"`
	Position                MatchPositionV5DTO               `json:"position,omitempty"`
	AfterID                 int32                            `json:"afterId,omitempty"`
	BeforeID                int32                            `json:"beforeId,omitempty"`
	Bounty                  int32                            `json:"bounty,omitempty"`
	CreatorID               int32                            `json:"creatorId,omitempty"`
	GoldGain                int32                            `json:"goldGain,omitempty"`
	ItemID                  int32                            `json:"itemId,omitempty"`
	KillStreakLength        int32                            `json:"killStreakLength,omitempty"`
	KillerID                int32                            `json:"killerId,omitempty"`
	KillerTeamID            Team                             `json:"killerTeamId,omitempty"`
	Level                   int32                            `json:"level,omitempty"`
	MultiKillLength         int32                            `json:"multiKillLength,omitempty"`
	ParticipantID           int32                            `json:"participantId,omitempty"`
	ShutdownBounty          int32                            `json:"shutdownBounty,omitempty"`
	SkillSlot               int32                            `json:"skillSlot,omitempty"`
	TeamID                  Team                             `json:"teamId,omitempty"`
	VictimID                int32                            `json:"victimId,omitempty"`
	WinningTeam             int32                            `json:"winningTeam,omitempty"`
}

// match-v5.FramesTimeLineDto
type MatchFramesTimeLineV5DTO struct {
	ParticipantFrames map[int32]MatchParticipantFrameV5DTO `json:"participantFrames,omitempty"`
	Events            []MatchEventsTimeLineV5DTO           `json:"events,omitempty"`
	Timestamp         int32                                `json:"timestamp,omitempty"`
}

// match-v5.InfoTimeLineDto
type MatchInfoTimeLineV5DTO struct {
	// Refer to indicate if the game ended in termination.
	EndOfGameResult string                          `json:"endOfGameResult,omitempty"`
	Frames          []MatchFramesTimeLineV5DTO      `json:"frames,omitempty"`
	Participants    []MatchParticipantTimeLineV5DTO `json:"participants,omitempty"`
	FrameInterval   int64                           `json:"frameInterval,omitempty"`
	GameID          int64                           `json:"gameId,omitempty"`
}

// match-v5.InfoDto
type MatchInfoV5DTO struct {
	// Refer to indicate if the game ended in termination.
	EndOfGameResult string `json:"endOfGameResult,omitempty"`
	// Refer to the Game Constants documentation.
	GameMode GameMode `json:"gameMode,omitempty"`
	GameName string   `json:"gameName,omitempty"`
	GameType GameType `json:"gameType,omitempty"`
	// The first two parts can be used to determine the patch a game was played on.
	GameVersion string `json:"gameVersion,omitempty"`
	// Platform where the match was played.
	PlatformID string `json:"platformId,omitempty"`
	// Tournament code used to generate the match. This field was added to match-v5 in patch 11.13 on June 23rd, 2021.
	TournamentCode string                  `json:"tournamentCode,omitempty"`
	Participants   []MatchParticipantV5DTO `json:"participants,omitempty"`
	Teams          []MatchTeamV5DTO        `json:"teams,omitempty"`
	// Unix timestamp for when the game is created on the game server (i.e., the loading screen).
	GameCreation int64 `json:"gameCreation,omitempty"`
	// Prior to patch 11.20, this field returns the game length in milliseconds calculated from gameEndTimestamp - gameStartTimestamp. Post patch 11.20, this field returns the max timePlayed of any participant in the game in seconds, which makes the behavior of this field consistent with that of match-v4. The best way to handling the change in this field is to treat the value as milliseconds if the gameEndTimestamp field isn't in the response and to treat the value as seconds if gameEndTimestamp is in the response.
	GameDuration int64 `json:"gameDuration,omitempty"`
	// Unix timestamp for when match ends on the game server. This timestamp can occasionally be significantly longer than when the match "ends". The most reliable way of determining the timestamp for the end of the match would be to add the max time played of any participant to the gameStartTimestamp. This field was added to match-v5 in patch 11.20 on Oct 5th, 2021.
	GameEndTimestamp int64 `json:"gameEndTimestamp,omitempty"`
	GameID           int64 `json:"gameId,omitempty"`
	// Unix timestamp for when match starts on the game server.
	GameStartTimestamp int64 `json:"gameStartTimestamp,omitempty"`
	// Refer to the Game Constants documentation.
	MapID Map `json:"mapId,omitempty"`
	// Refer to the Game Constants documentation.
	QueueID Queue `json:"queueId,omitempty"`
}

// match-v5.MetadataTimeLineDto
type MatchMetadataTimeLineV5DTO struct {
	// Match data version.
	DataVersion string `json:"dataVersion,omitempty"`
	// Match id.
	MatchID string `json:"matchId,omitempty"`
	// A list of participant PUUIDs.
	Participants []string `json:"participants,omitempty"`
}

// match-v5.MetadataDto
type MatchMetadataV5DTO struct {
	// Match data version.
	DataVersion string `json:"dataVersion,omitempty"`
	// Match id.
	MatchID string `json:"matchId,omitempty"`
	// A list of participant PUUIDs.
	Participants []string `json:"participants,omitempty"`
}

// match-v5.MissionsDto
type MatchMissionsV5DTO struct {
	PlayerScore0  int32 `json:"playerScore0,omitempty"`
	PlayerScore1  int32 `json:"playerScore1,omitempty"`
	PlayerScore10 int32 `json:"playerScore10,omitempty"`
	PlayerScore11 int32 `json:"playerScore11,omitempty"`
	PlayerScore2  int32 `json:"playerScore2,omitempty"`
	PlayerScore3  int32 `json:"playerScore3,omitempty"`
	PlayerScore4  int32 `json:"playerScore4,omitempty"`
	PlayerScore5  int32 `json:"playerScore5,omitempty"`
	PlayerScore6  int32 `json:"playerScore6,omitempty"`
	PlayerScore7  int32 `json:"playerScore7,omitempty"`
	PlayerScore8  int32 `json:"playerScore8,omitempty"`
	PlayerScore9  int32 `json:"playerScore9,omitempty"`
}

// match-v5.ObjectiveDto
type MatchObjectiveV5DTO struct {
	First bool  `json:"first,omitempty"`
	Kills int32 `json:"kills,omitempty"`
}

// match-v5.ObjectivesDto
type MatchObjectivesV5DTO struct {
	Baron      MatchObjectiveV5DTO `json:"baron,omitempty"`
	Champion   MatchObjectiveV5DTO `json:"champion,omitempty"`
	Dragon     MatchObjectiveV5DTO `json:"dragon,omitempty"`
	Horde      MatchObjectiveV5DTO `json:"horde,omitempty"`
	Inhibitor  MatchObjectiveV5DTO `json:"inhibitor,omitempty"`
	RiftHerald MatchObjectiveV5DTO `json:"riftHerald,omitempty"`
	Tower      MatchObjectiveV5DTO `json:"tower,omitempty"`
}

// match-v5.ParticipantFrameDto
type MatchParticipantFrameV5DTO struct {
	ChampionStats            MatchChampionStatsV5DTO `json:"championStats,omitempty"`
	CurrentGold              int32                   `json:"currentGold,omitempty"`
	DamageStats              MatchDamageStatsV5DTO   `json:"damageStats,omitempty"`
	GoldPerSecond            int32                   `json:"goldPerSecond,omitempty"`
	JungleMinionsKilled      int32                   `json:"jungleMinionsKilled,omitempty"`
	Level                    int32                   `json:"level,omitempty"`
	MinionsKilled            int32                   `json:"minionsKilled,omitempty"`
	ParticipantID            int32                   `json:"participantId,omitempty"`
	Position                 MatchPositionV5DTO      `json:"position,omitempty"`
	TimeEnemySpentControlled int32                   `json:"timeEnemySpentControlled,omitempty"`
	TotalGold                int32                   `json:"totalGold,omitempty"`
	XP                       int32                   `json:"xp,omitempty"`
}

// match-v5.ParticipantFramesDto
type MatchParticipantFramesV5DTO struct {
	// Key value mapping for each participant
	X19 MatchParticipantFrameV5DTO `json:"1-9,omitempty"`
}

// match-v5.ParticipantTimeLineDto
type MatchParticipantTimeLineV5DTO struct {
	PUUID         string `json:"puuid,omitempty"`
	ParticipantID int32  `json:"participantId,omitempty"`
}

// match-v5.ParticipantDto
type MatchParticipantV5DTO struct {
	ChampionName string `json:"championName,omitempty"`
	// Both individualPosition and teamPosition are computed by the game server and are different versions of the most likely position played by a player. The individualPosition is the best guess for which position the player actually played in isolation of anything else. The teamPosition is the best guess for which position the player actually played if we add the constraint that each team must have one top player, one jungle, one middle, etc. Generally the recommendation is to use the teamPosition field over the individualPosition field.
	IndividualPosition string `json:"individualPosition,omitempty"`
	Lane               string `json:"lane,omitempty"`
	PUUID              string `json:"puuid,omitempty"`
	RiotIDGameName     string `json:"riotIdGameName,omitempty"`
	RiotIDName         string `json:"riotIdName,omitempty"`
	RiotIDTagline      string `json:"riotIdTagline,omitempty"`
	Role               string `json:"role,omitempty"`
	SummonerID         string `json:"summonerId,omitempty"`
	SummonerName       string `json:"summonerName,omitempty"`
	// Both individualPosition and teamPosition are computed by the game server and are different versions of the most likely position played by a player. The individualPosition is the best guess for which position the player actually played in isolation of anything else. The teamPosition is the best guess for which position the player actually played if we add the constraint that each team must have one top player, one jungle, one middle, etc. Generally the recommendation is to use the teamPosition field over the individualPosition field.
	TeamPosition string               `json:"teamPosition,omitempty"`
	Perks        MatchPerksV5DTO      `json:"perks,omitempty"`
	Challenges   MatchChallengesV5DTO `json:"challenges,omitempty"`
	Missions     MatchMissionsV5DTO   `json:"missions,omitempty"`
	// Yellow crossed swords
	AllInPings int32 `json:"allInPings,omitempty"`
	// Green flag
	AssistMePings int32 `json:"assistMePings,omitempty"`
	Assists       int32 `json:"assists,omitempty"`
	BaitPings     int32 `json:"baitPings,omitempty"`
	BaronKills    int32 `json:"baronKills,omitempty"`
	// https://github.com/RiotGames/developer-relations/issues/814
	BasicPings      int32 `json:"basicPings,omitempty"`
	BountyLevel     int32 `json:"bountyLevel,omitempty"`
	ChampExperience int32 `json:"champExperience,omitempty"`
	ChampLevel      int32 `json:"champLevel,omitempty"`
	// Prior to patch 11.4, on Feb 18th, 2021, this field returned invalid championIds. We recommend determining the champion based on the championName field for matches played prior to patch 11.4.
	ChampionID int32 `json:"championId,omitempty"`
	// This field is currently only utilized for Kayn's transformations. (Legal values: 0 - None, 1 - Slayer, 2 - Assassin)
	ChampionTransform int32 `json:"championTransform,omitempty"`
	// Blue generic ping (ALT+click)
	CommandPings            int32 `json:"commandPings,omitempty"`
	ConsumablesPurchased    int32 `json:"consumablesPurchased,omitempty"`
	DamageDealtToBuildings  int32 `json:"damageDealtToBuildings,omitempty"`
	DamageDealtToObjectives int32 `json:"damageDealtToObjectives,omitempty"`
	DamageDealtToTurrets    int32 `json:"damageDealtToTurrets,omitempty"`
	DamageSelfMitigated     int32 `json:"damageSelfMitigated,omitempty"`
	// https://github.com/RiotGames/developer-relations/issues/870
	DangerPings         int32 `json:"dangerPings,omitempty"`
	Deaths              int32 `json:"deaths,omitempty"`
	DetectorWardsPlaced int32 `json:"detectorWardsPlaced,omitempty"`
	DoubleKills         int32 `json:"doubleKills,omitempty"`
	DragonKills         int32 `json:"dragonKills,omitempty"`
	// Yellow questionmark
	EnemyMissingPings int32 `json:"enemyMissingPings,omitempty"`
	// Red eyeball
	EnemyVisionPings int32 `json:"enemyVisionPings,omitempty"`
	// Yellow circle with horizontal line
	GetBackPings                int32 `json:"getBackPings,omitempty"`
	GoldEarned                  int32 `json:"goldEarned,omitempty"`
	GoldSpent                   int32 `json:"goldSpent,omitempty"`
	HoldPings                   int32 `json:"holdPings,omitempty"`
	InhibitorKills              int32 `json:"inhibitorKills,omitempty"`
	InhibitorTakedowns          int32 `json:"inhibitorTakedowns,omitempty"`
	InhibitorsLost              int32 `json:"inhibitorsLost,omitempty"`
	Item0                       int32 `json:"item0,omitempty"`
	Item1                       int32 `json:"item1,omitempty"`
	Item2                       int32 `json:"item2,omitempty"`
	Item3                       int32 `json:"item3,omitempty"`
	Item4                       int32 `json:"item4,omitempty"`
	Item5                       int32 `json:"item5,omitempty"`
	Item6                       int32 `json:"item6,omitempty"`
	ItemsPurchased              int32 `json:"itemsPurchased,omitempty"`
	KillingSprees               int32 `json:"killingSprees,omitempty"`
	Kills                       int32 `json:"kills,omitempty"`
	LargestCriticalStrike       int32 `json:"largestCriticalStrike,omitempty"`
	LargestKillingSpree         int32 `json:"largestKillingSpree,omitempty"`
	LargestMultiKill            int32 `json:"largestMultiKill,omitempty"`
	LongestTimeSpentLiving      int32 `json:"longestTimeSpentLiving,omitempty"`
	MagicDamageDealt            int32 `json:"magicDamageDealt,omitempty"`
	MagicDamageDealtToChampions int32 `json:"magicDamageDealtToChampions,omitempty"`
	MagicDamageTaken            int32 `json:"magicDamageTaken,omitempty"`
	// Green ward
	NeedVisionPings int32 `json:"needVisionPings,omitempty"`
	// neutralMinionsKilled = mNeutralMinionsKilled, which is incremented on kills of kPet and kJungleMonster
	NeutralMinionsKilled    int32 `json:"neutralMinionsKilled,omitempty"`
	NexusKills              int32 `json:"nexusKills,omitempty"`
	NexusLost               int32 `json:"nexusLost,omitempty"`
	NexusTakedowns          int32 `json:"nexusTakedowns,omitempty"`
	ObjectivesStolen        int32 `json:"objectivesStolen,omitempty"`
	ObjectivesStolenAssists int32 `json:"objectivesStolenAssists,omitempty"`
	// Blue arrow pointing at ground
	OnMyWayPings                   int32 `json:"onMyWayPings,omitempty"`
	ParticipantID                  int32 `json:"participantId,omitempty"`
	PentaKills                     int32 `json:"pentaKills,omitempty"`
	PhysicalDamageDealt            int32 `json:"physicalDamageDealt,omitempty"`
	PhysicalDamageDealtToChampions int32 `json:"physicalDamageDealtToChampions,omitempty"`
	PhysicalDamageTaken            int32 `json:"physicalDamageTaken,omitempty"`
	Placement                      int32 `json:"placement,omitempty"`
	PlayerAugment1                 int32 `json:"playerAugment1,omitempty"`
	PlayerAugment2                 int32 `json:"playerAugment2,omitempty"`
	PlayerAugment3                 int32 `json:"playerAugment3,omitempty"`
	PlayerAugment4                 int32 `json:"playerAugment4,omitempty"`
	PlayerAugment5                 int32 `json:"playerAugment5,omitempty"`
	PlayerAugment6                 int32 `json:"playerAugment6,omitempty"`
	PlayerScore0                   int32 `json:"playerScore0,omitempty"`
	PlayerScore1                   int32 `json:"playerScore1,omitempty"`
	PlayerScore10                  int32 `json:"playerScore10,omitempty"`
	PlayerScore11                  int32 `json:"playerScore11,omitempty"`
	PlayerScore2                   int32 `json:"playerScore2,omitempty"`
	PlayerScore3                   int32 `json:"playerScore3,omitempty"`
	PlayerScore4                   int32 `json:"playerScore4,omitempty"`
	PlayerScore5                   int32 `json:"playerScore5,omitempty"`
	PlayerScore6                   int32 `json:"playerScore6,omitempty"`
	PlayerScore7                   int32 `json:"playerScore7,omitempty"`
	PlayerScore8                   int32 `json:"playerScore8,omitempty"`
	PlayerScore9                   int32 `json:"playerScore9,omitempty"`
	PlayerSubteamID                int32 `json:"playerSubteamId,omitempty"`
	ProfileIcon                    int32 `json:"profileIcon,omitempty"`
	// Green minion
	PushPings                      int32 `json:"pushPings,omitempty"`
	QuadraKills                    int32 `json:"quadraKills,omitempty"`
	SightWardsBoughtInGame         int32 `json:"sightWardsBoughtInGame,omitempty"`
	Spell1Casts                    int32 `json:"spell1Casts,omitempty"`
	Spell2Casts                    int32 `json:"spell2Casts,omitempty"`
	Spell3Casts                    int32 `json:"spell3Casts,omitempty"`
	Spell4Casts                    int32 `json:"spell4Casts,omitempty"`
	SubteamPlacement               int32 `json:"subteamPlacement,omitempty"`
	Summoner1Casts                 int32 `json:"summoner1Casts,omitempty"`
	Summoner1ID                    int32 `json:"summoner1Id,omitempty"`
	Summoner2Casts                 int32 `json:"summoner2Casts,omitempty"`
	Summoner2ID                    int32 `json:"summoner2Id,omitempty"`
	SummonerLevel                  int32 `json:"summonerLevel,omitempty"`
	TeamID                         Team  `json:"teamId,omitempty"`
	TimeCCingOthers                int32 `json:"timeCCingOthers,omitempty"`
	TimePlayed                     int32 `json:"timePlayed,omitempty"`
	TotalAllyJungleMinionsKilled   int32 `json:"totalAllyJungleMinionsKilled,omitempty"`
	TotalDamageDealt               int32 `json:"totalDamageDealt,omitempty"`
	TotalDamageDealtToChampions    int32 `json:"totalDamageDealtToChampions,omitempty"`
	TotalDamageShieldedOnTeammates int32 `json:"totalDamageShieldedOnTeammates,omitempty"`
	TotalDamageTaken               int32 `json:"totalDamageTaken,omitempty"`
	TotalEnemyJungleMinionsKilled  int32 `json:"totalEnemyJungleMinionsKilled,omitempty"`
	// Whenever positive health is applied (which translates to all heals in the game but not things like regeneration), totalHeal is incremented by the amount of health received. This includes healing enemies, jungle monsters, yourself, etc
	TotalHeal int32 `json:"totalHeal,omitempty"`
	// Whenever positive health is applied (which translates to all heals in the game but not things like regeneration), totalHealsOnTeammates is incremented by the amount of health received.  This is post modified, so if you heal someone missing 5 health for 100 you will get +5 totalHealsOnTeammates
	TotalHealsOnTeammates int32 `json:"totalHealsOnTeammates,omitempty"`
	// totalMillionsKilled = mMinionsKilled, which is only incremented on kills of kTeamMinion, kMeleeLaneMinion, kSuperLaneMinion, kRangedLaneMinion and kSiegeLaneMinion
	TotalMinionsKilled         int32 `json:"totalMinionsKilled,omitempty"`
	TotalTimeCcdealt           int32 `json:"totalTimeCCDealt,omitempty"`
	TotalTimeSpentDead         int32 `json:"totalTimeSpentDead,omitempty"`
	TotalUnitsHealed           int32 `json:"totalUnitsHealed,omitempty"`
	TripleKills                int32 `json:"tripleKills,omitempty"`
	TrueDamageDealt            int32 `json:"trueDamageDealt,omitempty"`
	TrueDamageDealtToChampions int32 `json:"trueDamageDealtToChampions,omitempty"`
	TrueDamageTaken            int32 `json:"trueDamageTaken,omitempty"`
	TurretKills                int32 `json:"turretKills,omitempty"`
	TurretTakedowns            int32 `json:"turretTakedowns,omitempty"`
	TurretsLost                int32 `json:"turretsLost,omitempty"`
	UnrealKills                int32 `json:"unrealKills,omitempty"`
	VisionClearedPings         int32 `json:"visionClearedPings,omitempty"`
	VisionScore                int32 `json:"visionScore,omitempty"`
	VisionWardsBoughtInGame    int32 `json:"visionWardsBoughtInGame,omitempty"`
	WardsKilled                int32 `json:"wardsKilled,omitempty"`
	WardsPlaced                int32 `json:"wardsPlaced,omitempty"`
	EligibleForProgression     bool  `json:"eligibleForProgression,omitempty"`
	FirstBloodAssist           bool  `json:"firstBloodAssist,omitempty"`
	FirstBloodKill             bool  `json:"firstBloodKill,omitempty"`
	FirstTowerAssist           bool  `json:"firstTowerAssist,omitempty"`
	FirstTowerKill             bool  `json:"firstTowerKill,omitempty"`
	// This is an offshoot of the OneStone challenge. The code checks if a spell with the same instance ID does the final point of damage to at least 2 Champions. It doesn't matter if they're enemies, but you cannot hurt your friends.
	GameEndedInEarlySurrender bool `json:"gameEndedInEarlySurrender,omitempty"`
	GameEndedInSurrender      bool `json:"gameEndedInSurrender,omitempty"`
	TeamEarlySurrendered      bool `json:"teamEarlySurrendered,omitempty"`
	Win                       bool `json:"win,omitempty"`
}

// match-v5.PerkStatsDto
type MatchPerkStatsV5DTO struct {
	Defense int32 `json:"defense,omitempty"`
	Flex    int32 `json:"flex,omitempty"`
	Offense int32 `json:"offense,omitempty"`
}

// match-v5.PerkStyleSelectionDto
type MatchPerkStyleSelectionV5DTO struct {
	Perk int32 `json:"perk,omitempty"`
	Var1 int32 `json:"var1,omitempty"`
	Var2 int32 `json:"var2,omitempty"`
	Var3 int32 `json:"var3,omitempty"`
}

// match-v5.PerkStyleDto
type MatchPerkStyleV5DTO struct {
	Description string                         `json:"description,omitempty"`
	Selections  []MatchPerkStyleSelectionV5DTO `json:"selections,omitempty"`
	Style       int32                          `json:"style,omitempty"`
}

// match-v5.PerksDto
type MatchPerksV5DTO struct {
	Styles    []MatchPerkStyleV5DTO `json:"styles,omitempty"`
	StatPerks MatchPerkStatsV5DTO   `json:"statPerks,omitempty"`
}

// match-v5.PositionDto
type MatchPositionV5DTO struct {
	X int32 `json:"x,omitempty"`
	Y int32 `json:"y,omitempty"`
}

// match-v5.TeamDto
type MatchTeamV5DTO struct {
	Bans       []MatchBanV5DTO      `json:"bans,omitempty"`
	Objectives MatchObjectivesV5DTO `json:"objectives,omitempty"`
	TeamID     Team                 `json:"teamId,omitempty"`
	Win        bool                 `json:"win,omitempty"`
}

// match-v5.TimelineDto
type MatchTimelineV5DTO struct {
	// Match metadata.
	Metadata MatchMetadataTimeLineV5DTO `json:"metadata,omitempty"`
	// Match info.
	Info MatchInfoTimeLineV5DTO `json:"info,omitempty"`
}

// match-v5.MatchTimelineVictimDamage
type MatchTimelineVictimDamageV5DTO struct {
	Name           string `json:"name,omitempty"`
	SpellName      string `json:"spellName,omitempty"`
	Type           string `json:"type,omitempty"`
	MagicDamage    int32  `json:"magicDamage,omitempty"`
	ParticipantID  int32  `json:"participantId,omitempty"`
	PhysicalDamage int32  `json:"physicalDamage,omitempty"`
	SpellSlot      int32  `json:"spellSlot,omitempty"`
	TrueDamage     int32  `json:"trueDamage,omitempty"`
	Basic          bool   `json:"basic,omitempty"`
}

// match-v5.MatchDto
type MatchV5DTO struct {
	// Match metadata.
	Metadata MatchMetadataV5DTO `json:"metadata,omitempty"`
	// Match info.
	Info MatchInfoV5DTO `json:"info,omitempty"`
}

// lol-rso-match-v1.MatchDto
type RsoMatchMatchV1DTO struct {
}

// lol-rso-match-v1.TimelineDto
type RsoMatchTimelineV1DTO struct {
}

// spectator-v5.BannedChampion
type SpectatorBannedChampionV5DTO struct {
	// The ID of the banned champion
	ChampionID int64 `json:"championId,omitempty"`
	// The turn during which the champion was banned
	PickTurn int32 `json:"pickTurn,omitempty"`
	// The ID of the team that banned the champion
	TeamID Team `json:"teamId,omitempty"`
}

// spectator-v5.CurrentGameInfo
type SpectatorCurrentGameInfoV5DTO struct {
	// The game mode
	GameMode GameMode `json:"gameMode,omitempty"`
	// The game type
	GameType GameType `json:"gameType,omitempty"`
	// The observer information
	Observers SpectatorObserverV5DTO `json:"observers,omitempty"`
	// The ID of the platform on which the game is being played
	PlatformID string `json:"platformId,omitempty"`
	// Banned champion information
	BannedChampions []SpectatorBannedChampionV5DTO `json:"bannedChampions,omitempty"`
	// The participant information
	Participants []SpectatorCurrentGameParticipantV5DTO `json:"participants,omitempty"`
	// The ID of the game
	GameID int64 `json:"gameId,omitempty"`
	// The amount of time in seconds that has passed since the game started
	GameLength int64 `json:"gameLength,omitempty"`
	// The game start time represented in epoch milliseconds
	GameStartTime int64 `json:"gameStartTime,omitempty"`
	// The ID of the map
	MapID Map `json:"mapId,omitempty"`
	// The queue type (queue types are documented on the Game Constants page)
	GameQueueConfigID Queue `json:"gameQueueConfigId,omitempty"`
}

// spectator-v5.CurrentGameParticipant
type SpectatorCurrentGameParticipantV5DTO struct {
	// The encrypted puuid of this participant
	PUUID  string `json:"puuid,omitempty"`
	RiotID string `json:"riotId,omitempty"`
	// The encrypted summoner ID of this participant
	SummonerID string `json:"summonerId,omitempty"`
	// List of Game Customizations
	GameCustomizationObjects []SpectatorGameCustomizationObjectV5DTO `json:"gameCustomizationObjects,omitempty"`
	// Perks/Runes Reforged Information
	Perks SpectatorPerksV5DTO `json:"perks,omitempty"`
	// The ID of the champion played by this participant
	ChampionID int64 `json:"championId,omitempty"`
	// The ID of the profile icon used by this participant
	ProfileIconID int64 `json:"profileIconId,omitempty"`
	// The ID of the first summoner spell used by this participant
	Spell1ID int64 `json:"spell1Id,omitempty"`
	// The ID of the second summoner spell used by this participant
	Spell2ID int64 `json:"spell2Id,omitempty"`
	// The team ID of this participant, indicating the participant's team
	TeamID Team `json:"teamId,omitempty"`
	// Flag indicating whether or not this participant is a bot
	Bot bool `json:"bot,omitempty"`
}

// spectator-v5.FeaturedGameInfo
type SpectatorFeaturedGameInfoV5DTO struct {
	// The game mode
	//
	// (Legal values:  CLASSIC,  ODIN,  ARAM,  TUTORIAL,  ONEFORALL,  ASCENSION,  FIRSTBLOOD,  KINGPORO)
	GameMode GameMode `json:"gameMode,omitempty"`
	// The game type
	//
	// (Legal values:  CUSTOM_GAME,  MATCHED_GAME,  TUTORIAL_GAME)
	GameType GameType `json:"gameType,omitempty"`
	// The observer information
	Observers SpectatorObserverV5DTO `json:"observers,omitempty"`
	// The ID of the platform on which the game is being played
	PlatformID string `json:"platformId,omitempty"`
	// Banned champion information
	BannedChampions []SpectatorBannedChampionV5DTO `json:"bannedChampions,omitempty"`
	// The participant information
	Participants []SpectatorParticipantV5DTO `json:"participants,omitempty"`
	// The ID of the game
	GameID int64 `json:"gameId,omitempty"`
	// The amount of time in seconds that has passed since the game started
	GameLength int64 `json:"gameLength,omitempty"`
	// The ID of the map
	MapID Map `json:"mapId,omitempty"`
	// The queue type (queue types are documented on the Game Constants page)
	GameQueueConfigID Queue `json:"gameQueueConfigId,omitempty"`
}

// spectator-v5.FeaturedGames
type SpectatorFeaturedGamesV5DTO struct {
	// The list of featured games
	GameList []SpectatorFeaturedGameInfoV5DTO `json:"gameList,omitempty"`
	// The suggested interval to wait before requesting FeaturedGames again
	ClientRefreshInterval int64 `json:"clientRefreshInterval,omitempty"`
}

// spectator-v5.GameCustomizationObject
type SpectatorGameCustomizationObjectV5DTO struct {
	// Category identifier for Game Customization
	Category string `json:"category,omitempty"`
	// Game Customization content
	Content string `json:"content,omitempty"`
}

// spectator-v5.Observer
type SpectatorObserverV5DTO struct {
	// Key used to decrypt the spectator grid game data for playback
	EncryptionKey string `json:"encryptionKey,omitempty"`
}

// spectator-v5.Participant
type SpectatorParticipantV5DTO struct {
	// Encrypted puuid of this participant
	PUUID  string `json:"puuid,omitempty"`
	RiotID string `json:"riotId,omitempty"`
	// Encrypted summoner ID of this participant
	SummonerID string `json:"summonerId,omitempty"`
	// The ID of the champion played by this participant
	ChampionID int64 `json:"championId,omitempty"`
	// The ID of the profile icon used by this participant
	ProfileIconID int64 `json:"profileIconId,omitempty"`
	// The ID of the first summoner spell used by this participant
	Spell1ID int64 `json:"spell1Id,omitempty"`
	// The ID of the second summoner spell used by this participant
	Spell2ID int64 `json:"spell2Id,omitempty"`
	// The team ID of this participant, indicating the participant's team
	TeamID Team `json:"teamId,omitempty"`
	// Flag indicating whether or not this participant is a bot
	Bot bool `json:"bot,omitempty"`
}

// spectator-v5.Perks
type SpectatorPerksV5DTO struct {
	// IDs of the perks/runes assigned.
	PerkIDs []int64 `json:"perkIds,omitempty"`
	// Primary runes path
	PerkStyle int64 `json:"perkStyle,omitempty"`
	// Secondary runes path
	PerkSubStyle int64 `json:"perkSubStyle,omitempty"`
}

// lol-status-v4.ContentDto
type StatusContentV4DTO struct {
	Content string `json:"content,omitempty"`
	Locale  string `json:"locale,omitempty"`
}

// lol-status-v4.PlatformDataDto
type StatusPlatformDataV4DTO struct {
	ID           string        `json:"id,omitempty"`
	Name         string        `json:"name,omitempty"`
	Incidents    []StatusV4DTO `json:"incidents,omitempty"`
	Locales      []string      `json:"locales,omitempty"`
	Maintenances []StatusV4DTO `json:"maintenances,omitempty"`
}

// lol-status-v4.UpdateDto
type StatusUpdateV4DTO struct {
	Author    string `json:"author,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	UpdatedAt string `json:"updated_at,omitempty"`
	// (Legal values: riotclient, riotstatus, game)
	PublishLocations []string             `json:"publish_locations,omitempty"`
	Translations     []StatusContentV4DTO `json:"translations,omitempty"`
	ID               int32                `json:"id,omitempty"`
	Publish          bool                 `json:"publish,omitempty"`
}

// lol-status-v4.StatusDto
type StatusV4DTO struct {
	ArchiveAt string `json:"archive_at,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	// (Legal values:  info,  warning,  critical)
	IncidentSeverity string `json:"incident_severity,omitempty"`
	// (Legal values:  scheduled,  in_progress,  complete)
	MaintenanceStatus string `json:"maintenance_status,omitempty"`
	UpdatedAt         string `json:"updated_at,omitempty"`
	// (Legal values: windows, macos, android, ios, ps4, xbone, switch)
	Platforms []string             `json:"platforms,omitempty"`
	Titles    []StatusContentV4DTO `json:"titles,omitempty"`
	Updates   []StatusUpdateV4DTO  `json:"updates,omitempty"`
	ID        int32                `json:"id,omitempty"`
}

// summoner-v4.SummonerDTO
type SummonerV4DTO struct {
	// Encrypted account ID. Max length 56 characters.
	AccountID string `json:"accountId,omitempty"`
	// Encrypted summoner ID. Max length 63 characters.
	ID string `json:"id,omitempty"`
	// Encrypted PUUID. Exact length of 78 characters.
	PUUID string `json:"puuid,omitempty"`
	// ID of the summoner icon associated with the summoner.
	ProfileIconID int32 `json:"profileIconId,omitempty"`
	// Date summoner was last modified specified as epoch milliseconds. The following events will update this timestamp: profile icon change, playing the tutorial or advanced tutorial, finishing a game, summoner name change
	RevisionDate int64 `json:"revisionDate,omitempty"`
	// Summoner level associated with the summoner.
	SummonerLevel int64 `json:"summonerLevel,omitempty"`
}

// tournament-v5.TournamentCodeParametersV5
type TournamentCodeParametersV5DTO struct {
	// The map type of the game.
	//
	// (Legal values:  SUMMONERS_RIFT,  HOWLING_ABYSS)
	MapType string `json:"mapType,omitempty"`
	// Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.
	Metadata string `json:"metadata,omitempty"`
	// The pick type of the game.
	//
	// (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
	PickType string `json:"pickType,omitempty"`
	// The spectator type of the game.
	//
	// (Legal values:  NONE,  LOBBYONLY,  ALL)
	SpectatorType string `json:"spectatorType,omitempty"`
	// Optional list of encrypted puuids in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.
	AllowedParticipants []string `json:"allowedParticipants,omitempty"`
	// The team size of the game. Valid values are 1-5.
	TeamSize int32 `json:"teamSize,omitempty"`
	// Checks if allowed participants are enough to make full teams.
	EnoughPlayers bool `json:"enoughPlayers,omitempty"`
}

// tournament-v5.TournamentCodeUpdateParametersV5
type TournamentCodeUpdateParametersV5DTO struct {
	// The map type
	//
	// (Legal values:  SUMMONERS_RIFT,  HOWLING_ABYSS)
	MapType string `json:"mapType,omitempty"`
	// The pick type
	//
	// (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
	PickType string `json:"pickType,omitempty"`
	// The spectator type
	//
	// (Legal values:  NONE,  LOBBYONLY,  ALL)
	SpectatorType string `json:"spectatorType,omitempty"`
	// Optional list of encrypted puuids in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.
	AllowedParticipants []string `json:"allowedParticipants,omitempty"`
}

// tournament-v5.TournamentCodeV5DTO
type TournamentCodeV5DTO struct {
	// The tournament code.
	Code string `json:"code,omitempty"`
	// The lobby name for the tournament code game.
	LobbyName string `json:"lobbyName,omitempty"`
	// The game map for the tournament code game
	Map string `json:"map,omitempty"`
	// The metadata for tournament code.
	MetaData string `json:"metaData,omitempty"`
	// The password for the tournament code game.
	Password string `json:"password,omitempty"`
	// The pick mode for tournament code game.
	PickType string `json:"pickType,omitempty"`
	// The tournament code's region.
	//
	// (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR,  KR,  PH,  SG,  TH,  TW,  VN)
	Region string `json:"region,omitempty"`
	// The spectator mode for the tournament code game.
	Spectators string `json:"spectators,omitempty"`
	// The puuids of the participants (Encrypted)
	Participants []string `json:"participants,omitempty"`
	// The tournament code's ID.
	ID int32 `json:"id,omitempty"`
	// The provider's ID.
	ProviderID int32 `json:"providerId,omitempty"`
	// The team size for the tournament code game.
	TeamSize int32 `json:"teamSize,omitempty"`
	// The tournament's ID.
	TournamentID int32 `json:"tournamentId,omitempty"`
}

// tournament-v5.TournamentGamesV5
type TournamentGamesV5DTO struct {
	GameMode string `json:"gameMode,omitempty"`
	GameName string `json:"gameName,omitempty"`
	GameType string `json:"gameType,omitempty"`
	// Metadata for the TournamentCode
	MetaData string `json:"metaData,omitempty"`
	// Region of the game
	Region string `json:"region,omitempty"`
	// Tournament Code
	ShortCode   string                `json:"shortCode,omitempty"`
	LosingTeam  []TournamentTeamV5DTO `json:"losingTeam,omitempty"`
	WinningTeam []TournamentTeamV5DTO `json:"winningTeam,omitempty"`
	GameID      int64                 `json:"gameId,omitempty"`
	// Game Map ID
	GameMap int32 `json:"gameMap,omitempty"`
}

// tournament-v5.LobbyEventV5DTO
type TournamentLobbyEventV5DTO struct {
	// The type of event that was triggered
	EventType string `json:"eventType,omitempty"`
	// The puuid that triggered the event (Encrypted)
	PUUID string `json:"puuid,omitempty"`
	// Timestamp from the event
	Timestamp string `json:"timestamp,omitempty"`
}

// tournament-v5.LobbyEventV5DTOWrapper
type TournamentLobbyEventWrapperV5DTO struct {
	EventList []TournamentLobbyEventV5DTO `json:"eventList,omitempty"`
}

// tournament-v5.ProviderRegistrationParametersV5
type TournamentProviderRegistrationParametersV5DTO struct {
	// The region in which the provider will be running tournaments.
	//
	// (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR,  KR,  PH,  SG,  TH,  TW,  VN)
	Region string `json:"region,omitempty"`
	// The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443).
	URL string `json:"url,omitempty"`
}

// tournament-v5.TournamentRegistrationParametersV5
type TournamentRegistrationParametersV5DTO struct {
	// The optional name of the tournament.
	Name string `json:"name,omitempty"`
	// The provider ID to specify the regional registered provider data to associate this tournament.
	ProviderID int32 `json:"providerId,omitempty"`
}

// tournament-stub-v5.TournamentCodeParametersV5
type TournamentStubCodeParametersV5DTO struct {
	// The map type of the game.
	//
	// (Legal values:  SUMMONERS_RIFT,  HOWLING_ABYSS)
	MapType string `json:"mapType,omitempty"`
	// Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.
	Metadata string `json:"metadata,omitempty"`
	// The pick type of the game.
	//
	// (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
	PickType string `json:"pickType,omitempty"`
	// The spectator type of the game.
	//
	// (Legal values:  NONE,  LOBBYONLY,  ALL)
	SpectatorType string `json:"spectatorType,omitempty"`
	// Optional list of encrypted puuids in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.
	AllowedParticipants []string `json:"allowedParticipants,omitempty"`
	// The team size of the game. Valid values are 1-5.
	TeamSize int32 `json:"teamSize,omitempty"`
	// Checks if allowed participants are enough to make full teams.
	EnoughPlayers bool `json:"enoughPlayers,omitempty"`
}

// tournament-stub-v5.TournamentCodeV5DTO
type TournamentStubCodeV5DTO struct {
	// The tournament code.
	Code string `json:"code,omitempty"`
	// The lobby name for the tournament code game.
	LobbyName string `json:"lobbyName,omitempty"`
	// The game map for the tournament code game
	Map string `json:"map,omitempty"`
	// The metadata for tournament code.
	MetaData string `json:"metaData,omitempty"`
	// The password for the tournament code game.
	Password string `json:"password,omitempty"`
	// The pick mode for tournament code game.
	PickType string `json:"pickType,omitempty"`
	// The tournament code's region.
	//
	// (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR,  KR)
	Region string `json:"region,omitempty"`
	// The spectator mode for the tournament code game.
	Spectators string `json:"spectators,omitempty"`
	// The puuids of the participants (Encrypted)
	Participants []string `json:"participants,omitempty"`
	// The tournament code's ID.
	ID int32 `json:"id,omitempty"`
	// The provider's ID.
	ProviderID int32 `json:"providerId,omitempty"`
	// The team size for the tournament code game.
	TeamSize int32 `json:"teamSize,omitempty"`
	// The tournament's ID.
	TournamentID int32 `json:"tournamentId,omitempty"`
}

// tournament-stub-v5.LobbyEventV5DTO
type TournamentStubLobbyEventV5DTO struct {
	// The type of event that was triggered
	EventType string `json:"eventType,omitempty"`
	// The puuid that triggered the event (Encrypted)
	PUUID string `json:"puuid,omitempty"`
	// Timestamp from the event
	Timestamp string `json:"timestamp,omitempty"`
}

// tournament-stub-v5.LobbyEventV5DTOWrapper
type TournamentStubLobbyEventWrapperV5DTO struct {
	EventList []TournamentStubLobbyEventV5DTO `json:"eventList,omitempty"`
}

// tournament-stub-v5.ProviderRegistrationParametersV5
type TournamentStubProviderRegistrationParametersV5DTO struct {
	// The region in which the provider will be running tournaments.
	//
	// (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR,  KR)
	Region string `json:"region,omitempty"`
	// The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443).
	URL string `json:"url,omitempty"`
}

// tournament-stub-v5.TournamentRegistrationParametersV5
type TournamentStubRegistrationParametersV5DTO struct {
	// The optional name of the tournament.
	Name string `json:"name,omitempty"`
	// The provider ID to specify the regional registered provider data to associate this tournament.
	ProviderID int32 `json:"providerId,omitempty"`
}

// tournament-v5.TournamentTeamV5
type TournamentTeamV5DTO struct {
	// Player Unique UUID (Encrypted)
	PUUID string `json:"puuid,omitempty"`
}
