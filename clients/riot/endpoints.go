package riot

///////////////////////////////////////////////
//                                           //
//                     !                     //
//   This file is automatically generated!   //
//           Do not directly edit!           //
//                                           //
///////////////////////////////////////////////

// Spec version = ed83574d1b85ef4c52f267ee5558e3c1c3ffb412

import (
	"fmt"
	"net/http"
    
	"github.com/Kyagara/equinox/api"
	"github.com/Kyagara/equinox/internal"
	"go.uber.org/zap"
)

// AccountV1 endpoints handle.
//
// Note: this struct is automatically generated.
//
// [account-v1]: https://developer.riotgames.com/apis#account-v1
type AccountV1 struct {
	internalClient *internal.InternalClient
}

// Get account by puuid
//
// # Parameters
//   - `route` - Route to query.
//   - `puuid` (required, in path)
//
// # Riot API Reference
//
// [account-v1.getByPuuid]
//
// Note: this method is automatically generated.
//
// [account-v1.getByPuuid]: https://developer.riotgames.com/api-methods/#account-v1/GET_getByPuuid
func (e *AccountV1) ByPUUID(route api.RegionalRoute, puuid string) (*AccountV1DTO, error) {
  logger := e.internalClient.Logger("Riot", "AccountV1", "ByPUUID")
  logger.Debug("Method started execution")
  request, err := e.internalClient.Request(api.BaseURLFormat, http.MethodGet, route, fmt.Sprintf("/riot/account/v1/accounts/by-puuid/%v", puuid), nil)
  if err != nil {
    logger.Error("Error creating request", zap.Error(err))
    return nil, err
	}
  var data AccountV1DTO
  err = e.internalClient.Execute(request, &data)
  if err != nil {
    logger.Error("Error executing request", zap.Error(err))
    return nil, err
  }
  logger.Debug("Method executed successfully")
  return &data, nil
}

// Get account by riot id
//
// # Parameters
//   - `route` - Route to query.
//   - `tag_line` (required, in path) - When querying for a player by their riot id, the gameName and tagLine query params are required. However not all accounts have a gameName and tagLine associated so these fields may not be included in the response.
//   - `game_name` (required, in path) - When querying for a player by their riot id, the gameName and tagLine query params are required. However not all accounts have a gameName and tagLine associated so these fields may not be included in the response.
//
// # Riot API Reference
//
// [account-v1.getByRiotId]
//
// Note: this method is automatically generated.
//
// [account-v1.getByRiotId]: https://developer.riotgames.com/api-methods/#account-v1/GET_getByRiotId
func (e *AccountV1) ByRiotID(route api.RegionalRoute, gameName string, tagLine string) (*AccountV1DTO, error) {
  logger := e.internalClient.Logger("Riot", "AccountV1", "ByRiotID")
  logger.Debug("Method started execution")
  request, err := e.internalClient.Request(api.BaseURLFormat, http.MethodGet, route, fmt.Sprintf("/riot/account/v1/accounts/by-riot-id/%v/%v", gameName, tagLine), nil)
  if err != nil {
    logger.Error("Error creating request", zap.Error(err))
    return nil, err
	}
  var data AccountV1DTO
  err = e.internalClient.Execute(request, &data)
  if err != nil {
    logger.Error("Error executing request", zap.Error(err))
    return nil, err
  }
  logger.Debug("Method executed successfully")
  return &data, nil
}

// Get account by access token
//
// # Parameters
//   - `route` - Route to query.
//   - `authorization` (required, in header)
//
// # Riot API Reference
//
// [account-v1.getByAccessToken]
//
// Note: this method is automatically generated.
//
// [account-v1.getByAccessToken]: https://developer.riotgames.com/api-methods/#account-v1/GET_getByAccessToken
func (e *AccountV1) ByAccessToken(route api.RegionalRoute, authorization string) (*AccountV1DTO, error) {
  logger := e.internalClient.Logger("Riot", "AccountV1", "ByAccessToken")
  logger.Debug("Method started execution")
  request, err := e.internalClient.Request(api.BaseURLFormat, http.MethodGet, route, "/riot/account/v1/accounts/me", nil)
  if err != nil {
    logger.Error("Error creating request", zap.Error(err))
    return nil, err
	}
  if authorization == "" {
    return new(AccountV1DTO), fmt.Errorf("'authorization' header is required")
  }
  request.Header.Set("authorization", fmt.Sprint(authorization))
  var data AccountV1DTO
  err = e.internalClient.Execute(request, &data)
  if err != nil {
    logger.Error("Error executing request", zap.Error(err))
    return nil, err
  }
  logger.Debug("Method executed successfully")
  return &data, nil
}

// Get active shard for a player
//
// # Parameters
//   - `route` - Route to query.
//   - `game` (required, in path)
//   - `puuid` (required, in path)
//
// # Riot API Reference
//
// [account-v1.getActiveShard]
//
// Note: this method is automatically generated.
//
// [account-v1.getActiveShard]: https://developer.riotgames.com/api-methods/#account-v1/GET_getActiveShard
func (e *AccountV1) ActiveShard(route api.RegionalRoute, game string, puuid string) (*ActiveShardV1DTO, error) {
  logger := e.internalClient.Logger("Riot", "AccountV1", "ActiveShard")
  logger.Debug("Method started execution")
  request, err := e.internalClient.Request(api.BaseURLFormat, http.MethodGet, route, fmt.Sprintf("/riot/account/v1/active-shards/by-game/%v/by-puuid/%v", game, puuid), nil)
  if err != nil {
    logger.Error("Error creating request", zap.Error(err))
    return nil, err
	}
  var data ActiveShardV1DTO
  err = e.internalClient.Execute(request, &data)
  if err != nil {
    logger.Error("Error executing request", zap.Error(err))
    return nil, err
  }
  logger.Debug("Method executed successfully")
  return &data, nil
}
