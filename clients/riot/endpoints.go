package riot

///////////////////////////////////////////////
//                                           //
//                     !                     //
//   This file is automatically generated!   //
//           Do not directly edit!           //
//                                           //
///////////////////////////////////////////////

// Spec version = 2099d6a309eb237d31b9c5fc1071c36eca85d91f

import (
	"context"
	"fmt"
	"net/http"

	"github.com/Kyagara/equinox/api"
	"github.com/Kyagara/equinox/internal"
)

// # Riot API Reference
//
// [account-v1]
//
// Note: this struct is automatically generated.
//
// [account-v1]: https://developer.riotgames.com/apis#account-v1
type AccountV1 struct {
	internal *internal.InternalClient
}

// Get account by puuid
//
// # Parameters
//   - `route` - Route to query.
//   - `puuid` (required, in path)
//
// # Riot API Reference
//
// [account-v1.getByPuuid]
//
// Note: this method is automatically generated.
//
// [account-v1.getByPuuid]: https://developer.riotgames.com/api-methods/#account-v1/GET_getByPuuid
func (e *AccountV1) ByPUUID(ctx context.Context, route api.RegionalRoute, puuid string) (*AccountV1DTO, error) {
	logger := e.internal.Logger("Riot_AccountV1_ByPUUID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/riot/account/v1/accounts/by-puuid/%v", puuid), "account-v1.getByPuuid", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data AccountV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Get account by riot id
//
// # Parameters
//   - `route` - Route to query.
//   - `tagLine` (required, in path) - When querying for a player by their riot id, the gameName and tagLine query params are required.
//   - `gameName` (required, in path) - When querying for a player by their riot id, the gameName and tagLine query params are required.
//
// # Riot API Reference
//
// [account-v1.getByRiotId]
//
// Note: this method is automatically generated.
//
// [account-v1.getByRiotId]: https://developer.riotgames.com/api-methods/#account-v1/GET_getByRiotId
func (e *AccountV1) ByRiotID(ctx context.Context, route api.RegionalRoute, gameName string, tagLine string) (*AccountV1DTO, error) {
	logger := e.internal.Logger("Riot_AccountV1_ByRiotID")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/riot/account/v1/accounts/by-riot-id/%v/%v", gameName, tagLine), "account-v1.getByRiotId", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data AccountV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Get account by access token
//
// # Parameters
//   - `route` - Route to query.
//   - `authorization` (required, in header)
//
// # Riot API Reference
//
// [account-v1.getByAccessToken]
//
// Note: this method is automatically generated.
//
// [account-v1.getByAccessToken]: https://developer.riotgames.com/api-methods/#account-v1/GET_getByAccessToken
func (e *AccountV1) ByAccessToken(ctx context.Context, route api.RegionalRoute, authorization string) (*AccountV1DTO, error) {
	logger := e.internal.Logger("Riot_AccountV1_ByAccessToken")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, "/riot/account/v1/accounts/me", "account-v1.getByAccessToken", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	if authorization == "" {
		return new(AccountV1DTO), fmt.Errorf("'authorization' header is required")
	}
	equinoxReq.Request.Header.Set("authorization", authorization)
	var data AccountV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}

// Get active shard for a player
//
// # Parameters
//   - `route` - Route to query.
//   - `game` (required, in path)
//   - `puuid` (required, in path)
//
// # Riot API Reference
//
// [account-v1.getActiveShard]
//
// Note: this method is automatically generated.
//
// [account-v1.getActiveShard]: https://developer.riotgames.com/api-methods/#account-v1/GET_getActiveShard
func (e *AccountV1) ActiveShard(ctx context.Context, route api.RegionalRoute, game string, puuid string) (*ActiveShardV1DTO, error) {
	logger := e.internal.Logger("Riot_AccountV1_ActiveShard")
	logger.Debug().Msg("Method started execution")
	equinoxReq, err := e.internal.Request(ctx, logger, api.RIOT_API_BASE_URL_FORMAT, http.MethodGet, route, fmt.Sprintf("/riot/account/v1/active-shards/by-game/%v/by-puuid/%v", game, puuid), "account-v1.getActiveShard", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data ActiveShardV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	logger.Debug().Msg("Method executed successfully")
	return &data, nil
}
