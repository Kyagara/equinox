package riot

///////////////////////////////////////////////
//                                           //
//                     !                     //
//   This file is automatically generated!   //
//           Do not directly edit!           //
//                                           //
///////////////////////////////////////////////

// Spec version = a70746fcf353ba0ad0aceceafcc70d4ba8de4431

import (
	"context"
	"fmt"
	"net/http"

	"github.com/Kyagara/equinox/api"
	"github.com/Kyagara/equinox/internal"
)

// # Riot API Reference
//
// [account-v1]
//
// [account-v1]: https://developer.riotgames.com/apis#account-v1
type AccountV1 struct {
	internal *internal.Client
}

// Get active shard for a player
//
// # Parameters
//   - route : Route to query.
//   - game
//   - puuid
//
// # Riot API Reference
//
// [account-v1.getActiveShard]
//
// [account-v1.getActiveShard]: https://developer.riotgames.com/api-methods/#account-v1/GET_getActiveShard
func (endpoint *AccountV1) ActiveShard(ctx context.Context, route api.RegionalRoute, game string, puuid string) (*AccountActiveShardV1DTO, error) {
	logger := endpoint.internal.Logger("Riot_AccountV1_ActiveShard")
	urlComponents := []string{"https://", route.String(), api.RIOT_API_BASE_URL_FORMAT, "/riot/account/v1/active-shards/by-game/", game, "/by-puuid/", puuid}
	request, err := endpoint.internal.Request(ctx, logger, http.MethodGet, urlComponents, "account-v1.getActiveShard", nil)
	if err != nil {
		return nil, err
	}
	var data AccountActiveShardV1DTO
	err = endpoint.internal.Execute(ctx, request, &data)
	if err != nil {
		return nil, err
	}
	return &data, nil
}

// Get account by access token
//
// # Parameters
//   - route : Route to query.
//   - Authorization
//
// # Riot API Reference
//
// [account-v1.getByAccessToken]
//
// [account-v1.getByAccessToken]: https://developer.riotgames.com/api-methods/#account-v1/GET_getByAccessToken
func (endpoint *AccountV1) ByAccessToken(ctx context.Context, route api.RegionalRoute, authorization string) (*AccountV1DTO, error) {
	if authorization == "" {
		return nil, fmt.Errorf("'authorization' header is required")
	}
	logger := endpoint.internal.Logger("Riot_AccountV1_ByAccessToken")
	urlComponents := []string{"https://", route.String(), api.RIOT_API_BASE_URL_FORMAT, "/riot/account/v1/accounts/me"}
	request, err := endpoint.internal.Request(ctx, logger, http.MethodGet, urlComponents, "account-v1.getByAccessToken", nil)
	if err != nil {
		return nil, err
	}
	request.Request.Header = request.Request.Header.Clone()
	request.Request.Header.Add("Authorization", authorization)
	var data AccountV1DTO
	err = endpoint.internal.Execute(ctx, request, &data)
	if err != nil {
		return nil, err
	}
	return &data, nil
}

// Get account by puuid
//
// # Parameters
//   - route : Route to query.
//   - puuid
//
// # Riot API Reference
//
// [account-v1.getByPuuid]
//
// [account-v1.getByPuuid]: https://developer.riotgames.com/api-methods/#account-v1/GET_getByPuuid
func (endpoint *AccountV1) ByPUUID(ctx context.Context, route api.RegionalRoute, puuid string) (*AccountV1DTO, error) {
	logger := endpoint.internal.Logger("Riot_AccountV1_ByPUUID")
	urlComponents := []string{"https://", route.String(), api.RIOT_API_BASE_URL_FORMAT, "/riot/account/v1/accounts/by-puuid/", puuid}
	request, err := endpoint.internal.Request(ctx, logger, http.MethodGet, urlComponents, "account-v1.getByPuuid", nil)
	if err != nil {
		return nil, err
	}
	var data AccountV1DTO
	err = endpoint.internal.Execute(ctx, request, &data)
	if err != nil {
		return nil, err
	}
	return &data, nil
}

// Get account by riot id
//
// # Parameters
//   - route : Route to query.
//   - tagLine : When querying for a player by their riot id, the gameName and tagLine query params are required.
//   - gameName : When querying for a player by their riot id, the gameName and tagLine query params are required.
//
// # Riot API Reference
//
// [account-v1.getByRiotId]
//
// [account-v1.getByRiotId]: https://developer.riotgames.com/api-methods/#account-v1/GET_getByRiotId
func (endpoint *AccountV1) ByRiotID(ctx context.Context, route api.RegionalRoute, gameName string, tagLine string) (*AccountV1DTO, error) {
	logger := endpoint.internal.Logger("Riot_AccountV1_ByRiotID")
	urlComponents := []string{"https://", route.String(), api.RIOT_API_BASE_URL_FORMAT, "/riot/account/v1/accounts/by-riot-id/", gameName, "/", tagLine}
	request, err := endpoint.internal.Request(ctx, logger, http.MethodGet, urlComponents, "account-v1.getByRiotId", nil)
	if err != nil {
		return nil, err
	}
	var data AccountV1DTO
	err = endpoint.internal.Execute(ctx, request, &data)
	if err != nil {
		return nil, err
	}
	return &data, nil
}
