package tft

///////////////////////////////////////////////
//                                           //
//                     !                     //
//   This file is automatically generated!   //
//           Do not directly edit!           //
//                                           //
///////////////////////////////////////////////

// Spec version = d712d94a43004a22ad9f31b9ebfbcaa9e0820305

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"

	"github.com/Kyagara/equinox/api"
	"github.com/Kyagara/equinox/internal"
)

// # Riot API Reference
//
// [tft-league-v1]
//
// [tft-league-v1]: https://developer.riotgames.com/apis#tft-league-v1
type LeagueV1 struct {
	internal *internal.Client
}

// Get league with given ID, including inactive entries.
//
// # Parameters
//   - `route` - Route to query.
//   - `leagueId` - The UUID of the league.
//
// # Riot API Reference
//
// [tft-league-v1.getLeagueById]
//
// [tft-league-v1.getLeagueById]: https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueById
func (e *LeagueV1) ByID(ctx context.Context, route PlatformRoute, leagueId string) (*LeagueListV1DTO, error) {
	logger := e.internal.Logger("TFT_LeagueV1_ByID")
	logger.Trace().Msg("Method started execution")
	urlComponents := []string{"https://", route.String(), api.RIOT_API_BASE_URL_FORMAT, "/tft/league/v1/leagues/", leagueId}
	equinoxReq, err := e.internal.Request(ctx, logger, http.MethodGet, urlComponents, "tft-league-v1.getLeagueById", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data LeagueListV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	return &data, nil
}

// Get the challenger league.
//
// # Parameters
//   - `route` - Route to query.
//   - `queue` (optional) - Defaults to RANKED_TFT.
//
// # Riot API Reference
//
// [tft-league-v1.getChallengerLeague]
//
// [tft-league-v1.getChallengerLeague]: https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getChallengerLeague
func (e *LeagueV1) ChallengerByQueue(ctx context.Context, route PlatformRoute, queue string) (*LeagueListV1DTO, error) {
	logger := e.internal.Logger("TFT_LeagueV1_ChallengerByQueue")
	logger.Trace().Msg("Method started execution")
	urlComponents := []string{"https://", route.String(), api.RIOT_API_BASE_URL_FORMAT, "/tft/league/v1/challenger"}
	equinoxReq, err := e.internal.Request(ctx, logger, http.MethodGet, urlComponents, "tft-league-v1.getChallengerLeague", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	values := url.Values{}
	if queue != "" {
		values.Add("queue", queue)
	}
	equinoxReq.Request.URL.RawQuery = values.Encode()
	var data LeagueListV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	return &data, nil
}

// Get all the league entries.
//
// # Parameters
//   - `route` - Route to query.
//   - `tier`
//   - `division`
//   - `queue` (optional) - Defaults to RANKED_TFT.
//   - `page` (optional) - Defaults to 1. Starts with page 1.
//
// # Riot API Reference
//
// [tft-league-v1.getLeagueEntries]
//
// [tft-league-v1.getLeagueEntries]: https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntries
func (e *LeagueV1) Entries(ctx context.Context, route PlatformRoute, tier Tier, division string, queue string, page int32) ([]LeagueEntryV1DTO, error) {
	logger := e.internal.Logger("TFT_LeagueV1_Entries")
	logger.Trace().Msg("Method started execution")
	urlComponents := []string{"https://", route.String(), api.RIOT_API_BASE_URL_FORMAT, "/tft/league/v1/entries/", tier.String(), "/", division}
	equinoxReq, err := e.internal.Request(ctx, logger, http.MethodGet, urlComponents, "tft-league-v1.getLeagueEntries", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	values := url.Values{}
	if page != -1 {
		values.Add("page", strconv.FormatInt(int64(page), 10))
	}
	if queue != "" {
		values.Add("queue", queue)
	}
	equinoxReq.Request.URL.RawQuery = values.Encode()
	var data []LeagueEntryV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	return data, nil
}

// Get the grandmaster league.
//
// # Parameters
//   - `route` - Route to query.
//   - `queue` (optional) - Defaults to RANKED_TFT.
//
// # Riot API Reference
//
// [tft-league-v1.getGrandmasterLeague]
//
// [tft-league-v1.getGrandmasterLeague]: https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getGrandmasterLeague
func (e *LeagueV1) GrandmasterByQueue(ctx context.Context, route PlatformRoute, queue string) (*LeagueListV1DTO, error) {
	logger := e.internal.Logger("TFT_LeagueV1_GrandmasterByQueue")
	logger.Trace().Msg("Method started execution")
	urlComponents := []string{"https://", route.String(), api.RIOT_API_BASE_URL_FORMAT, "/tft/league/v1/grandmaster"}
	equinoxReq, err := e.internal.Request(ctx, logger, http.MethodGet, urlComponents, "tft-league-v1.getGrandmasterLeague", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	values := url.Values{}
	if queue != "" {
		values.Add("queue", queue)
	}
	equinoxReq.Request.URL.RawQuery = values.Encode()
	var data LeagueListV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	return &data, nil
}

// Get the master league.
//
// # Parameters
//   - `route` - Route to query.
//   - `queue` (optional) - Defaults to RANKED_TFT.
//
// # Riot API Reference
//
// [tft-league-v1.getMasterLeague]
//
// [tft-league-v1.getMasterLeague]: https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getMasterLeague
func (e *LeagueV1) MasterByQueue(ctx context.Context, route PlatformRoute, queue string) (*LeagueListV1DTO, error) {
	logger := e.internal.Logger("TFT_LeagueV1_MasterByQueue")
	logger.Trace().Msg("Method started execution")
	urlComponents := []string{"https://", route.String(), api.RIOT_API_BASE_URL_FORMAT, "/tft/league/v1/master"}
	equinoxReq, err := e.internal.Request(ctx, logger, http.MethodGet, urlComponents, "tft-league-v1.getMasterLeague", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	values := url.Values{}
	if queue != "" {
		values.Add("queue", queue)
	}
	equinoxReq.Request.URL.RawQuery = values.Encode()
	var data LeagueListV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	return &data, nil
}

// Get league entries for a given summoner ID.
//
// # Parameters
//   - `route` - Route to query.
//   - `summonerId`
//
// # Riot API Reference
//
// [tft-league-v1.getLeagueEntriesForSummoner]
//
// [tft-league-v1.getLeagueEntriesForSummoner]: https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntriesForSummoner
func (e *LeagueV1) SummonerEntries(ctx context.Context, route PlatformRoute, summonerId string) ([]LeagueEntryV1DTO, error) {
	logger := e.internal.Logger("TFT_LeagueV1_SummonerEntries")
	logger.Trace().Msg("Method started execution")
	urlComponents := []string{"https://", route.String(), api.RIOT_API_BASE_URL_FORMAT, "/tft/league/v1/entries/by-summoner/", summonerId}
	equinoxReq, err := e.internal.Request(ctx, logger, http.MethodGet, urlComponents, "tft-league-v1.getLeagueEntriesForSummoner", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data []LeagueEntryV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	return data, nil
}

// Get the top rated ladder for given queue
//
// # Parameters
//   - `route` - Route to query.
//   - `queue`
//
// # Riot API Reference
//
// [tft-league-v1.getTopRatedLadder]
//
// [tft-league-v1.getTopRatedLadder]: https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getTopRatedLadder
func (e *LeagueV1) TopRatedLadder(ctx context.Context, route PlatformRoute, queue QueueType) ([]TopRatedLadderEntryV1DTO, error) {
	logger := e.internal.Logger("TFT_LeagueV1_TopRatedLadder")
	logger.Trace().Msg("Method started execution")
	urlComponents := []string{"https://", route.String(), api.RIOT_API_BASE_URL_FORMAT, "/tft/league/v1/rated-ladders/", queue.String(), "/top"}
	equinoxReq, err := e.internal.Request(ctx, logger, http.MethodGet, urlComponents, "tft-league-v1.getTopRatedLadder", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data []TopRatedLadderEntryV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	return data, nil
}

// # Riot API Reference
//
// [tft-match-v1]
//
// [tft-match-v1]: https://developer.riotgames.com/apis#tft-match-v1
type MatchV1 struct {
	internal *internal.Client
}

// Get a match by match id
//
// # Parameters
//   - `route` - Route to query.
//   - `matchId`
//
// # Riot API Reference
//
// [tft-match-v1.getMatch]
//
// [tft-match-v1.getMatch]: https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatch
func (e *MatchV1) ByID(ctx context.Context, route api.RegionalRoute, matchId string) (*MatchV1DTO, error) {
	logger := e.internal.Logger("TFT_MatchV1_ByID")
	logger.Trace().Msg("Method started execution")
	urlComponents := []string{"https://", route.String(), api.RIOT_API_BASE_URL_FORMAT, "/tft/match/v1/matches/", matchId}
	equinoxReq, err := e.internal.Request(ctx, logger, http.MethodGet, urlComponents, "tft-match-v1.getMatch", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data MatchV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	return &data, nil
}

// Get a list of match ids by PUUID
//
// # Parameters
//   - `route` - Route to query.
//   - `puuid`
//   - `start` (optional) - Defaults to 0. Start index.
//   - `endTime` (optional) - Epoch timestamp in seconds.
//   - `startTime` (optional) - Epoch timestamp in seconds. The matchlist started storing timestamps on June 16th, 2021. Any matches played before June 16th, 2021 won't be included in the results if the startTime filter is set.
//   - `count` (optional) - Defaults to 20. Number of match ids to return.
//
// # Riot API Reference
//
// [tft-match-v1.getMatchIdsByPUUID]
//
// [tft-match-v1.getMatchIdsByPUUID]: https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatchIdsByPUUID
func (e *MatchV1) ListByPUUID(ctx context.Context, route api.RegionalRoute, puuid string, start int32, endTime int64, startTime int64, count int32) ([]string, error) {
	logger := e.internal.Logger("TFT_MatchV1_ListByPUUID")
	logger.Trace().Msg("Method started execution")
	urlComponents := []string{"https://", route.String(), api.RIOT_API_BASE_URL_FORMAT, "/tft/match/v1/matches/by-puuid/", puuid, "/ids"}
	equinoxReq, err := e.internal.Request(ctx, logger, http.MethodGet, urlComponents, "tft-match-v1.getMatchIdsByPUUID", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	values := url.Values{}
	if count != -1 {
		values.Add("count", strconv.FormatInt(int64(count), 10))
	}
	if endTime != -1 {
		values.Add("endTime", strconv.FormatInt(endTime, 10))
	}
	if start != -1 {
		values.Add("start", strconv.FormatInt(int64(start), 10))
	}
	if startTime != -1 {
		values.Add("startTime", strconv.FormatInt(startTime, 10))
	}
	equinoxReq.Request.URL.RawQuery = values.Encode()
	var data []string
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	return data, nil
}

// # Riot API Reference
//
// [tft-status-v1]
//
// [tft-status-v1]: https://developer.riotgames.com/apis#tft-status-v1
type StatusV1 struct {
	internal *internal.Client
}

// Get Teamfight Tactics status for the given platform.
//
// # Parameters
//   - `route` - Route to query.
//
// # Riot API Reference
//
// [tft-status-v1.getPlatformData]
//
// [tft-status-v1.getPlatformData]: https://developer.riotgames.com/api-methods/#tft-status-v1/GET_getPlatformData
func (e *StatusV1) Platform(ctx context.Context, route PlatformRoute) (*PlatformDataV1DTO, error) {
	logger := e.internal.Logger("TFT_StatusV1_Platform")
	logger.Trace().Msg("Method started execution")
	urlComponents := []string{"https://", route.String(), api.RIOT_API_BASE_URL_FORMAT, "/tft/status/v1/platform-data"}
	equinoxReq, err := e.internal.Request(ctx, logger, http.MethodGet, urlComponents, "tft-status-v1.getPlatformData", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data PlatformDataV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	return &data, nil
}

// # Riot API Reference
//
// [tft-summoner-v1]
//
// [tft-summoner-v1]: https://developer.riotgames.com/apis#tft-summoner-v1
type SummonerV1 struct {
	internal *internal.Client
}

// Get a summoner by access token.
//
// # Parameters
//   - `route` - Route to query.
//   - `Authorization` (optional) - Bearer token.
//
// # Riot API Reference
//
// [tft-summoner-v1.getByAccessToken]
//
// [tft-summoner-v1.getByAccessToken]: https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByAccessToken
func (e *SummonerV1) ByAccessToken(ctx context.Context, route PlatformRoute, authorization string) (*SummonerV1DTO, error) {
	logger := e.internal.Logger("TFT_SummonerV1_ByAccessToken")
	logger.Trace().Msg("Method started execution")
	if authorization == "" {
		return nil, fmt.Errorf("'authorization' header is required")
	}
	urlComponents := []string{"https://", route.String(), api.RIOT_API_BASE_URL_FORMAT, "/tft/summoner/v1/summoners/me"}
	equinoxReq, err := e.internal.Request(ctx, logger, http.MethodGet, urlComponents, "tft-summoner-v1.getByAccessToken", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	equinoxReq.Request.Header = equinoxReq.Request.Header.Clone()
	equinoxReq.Request.Header.Add("Authorization", authorization)
	var data SummonerV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	return &data, nil
}

// Get a summoner by account ID.
//
// # Parameters
//   - `route` - Route to query.
//   - `encryptedAccountId`
//
// # Riot API Reference
//
// [tft-summoner-v1.getByAccountId]
//
// [tft-summoner-v1.getByAccountId]: https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByAccountId
func (e *SummonerV1) ByAccountID(ctx context.Context, route PlatformRoute, encryptedAccountId string) (*SummonerV1DTO, error) {
	logger := e.internal.Logger("TFT_SummonerV1_ByAccountID")
	logger.Trace().Msg("Method started execution")
	urlComponents := []string{"https://", route.String(), api.RIOT_API_BASE_URL_FORMAT, "/tft/summoner/v1/summoners/by-account/", encryptedAccountId}
	equinoxReq, err := e.internal.Request(ctx, logger, http.MethodGet, urlComponents, "tft-summoner-v1.getByAccountId", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data SummonerV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	return &data, nil
}

// Get a summoner by summoner name.
//
// # Parameters
//   - `route` - Route to query.
//   - `summonerName` - Summoner Name
//
// # Riot API Reference
//
// [tft-summoner-v1.getBySummonerName]
//
// [tft-summoner-v1.getBySummonerName]: https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerName
func (e *SummonerV1) ByName(ctx context.Context, route PlatformRoute, summonerName string) (*SummonerV1DTO, error) {
	logger := e.internal.Logger("TFT_SummonerV1_ByName")
	logger.Trace().Msg("Method started execution")
	urlComponents := []string{"https://", route.String(), api.RIOT_API_BASE_URL_FORMAT, "/tft/summoner/v1/summoners/by-name/", summonerName}
	equinoxReq, err := e.internal.Request(ctx, logger, http.MethodGet, urlComponents, "tft-summoner-v1.getBySummonerName", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data SummonerV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	return &data, nil
}

// Get a summoner by PUUID.
//
// # Parameters
//   - `route` - Route to query.
//   - `encryptedPUUID` - Summoner ID
//
// # Riot API Reference
//
// [tft-summoner-v1.getByPUUID]
//
// [tft-summoner-v1.getByPUUID]: https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByPUUID
func (e *SummonerV1) ByPUUID(ctx context.Context, route PlatformRoute, encryptedPUUID string) (*SummonerV1DTO, error) {
	logger := e.internal.Logger("TFT_SummonerV1_ByPUUID")
	logger.Trace().Msg("Method started execution")
	urlComponents := []string{"https://", route.String(), api.RIOT_API_BASE_URL_FORMAT, "/tft/summoner/v1/summoners/by-puuid/", encryptedPUUID}
	equinoxReq, err := e.internal.Request(ctx, logger, http.MethodGet, urlComponents, "tft-summoner-v1.getByPUUID", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data SummonerV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	return &data, nil
}

// Get a summoner by summoner ID.
//
// # Parameters
//   - `route` - Route to query.
//   - `encryptedSummonerId` - Summoner ID
//
// # Riot API Reference
//
// [tft-summoner-v1.getBySummonerId]
//
// [tft-summoner-v1.getBySummonerId]: https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerId
func (e *SummonerV1) BySummonerID(ctx context.Context, route PlatformRoute, encryptedSummonerId string) (*SummonerV1DTO, error) {
	logger := e.internal.Logger("TFT_SummonerV1_BySummonerID")
	logger.Trace().Msg("Method started execution")
	urlComponents := []string{"https://", route.String(), api.RIOT_API_BASE_URL_FORMAT, "/tft/summoner/v1/summoners/", encryptedSummonerId}
	equinoxReq, err := e.internal.Request(ctx, logger, http.MethodGet, urlComponents, "tft-summoner-v1.getBySummonerId", nil)
	if err != nil {
		logger.Error().Err(err).Msg("Error creating request")
		return nil, err
	}
	var data SummonerV1DTO
	err = e.internal.Execute(ctx, equinoxReq, &data)
	if err != nil {
		logger.Error().Err(err).Msg("Error executing request")
		return nil, err
	}
	return &data, nil
}
