package val

///////////////////////////////////////////////
//                                           //
//                     !                     //
//   This file is automatically generated!   //
//           Do not directly edit!           //
//                                           //
///////////////////////////////////////////////

// Spec version = 6461993a9c4165ddca053929f19f6d0e3eb1ca14

// val-content-v1.ActDto
type ContentActV1DTO struct {
	// This field is excluded from the response when a locale is set
	LocalizedNames ContentLocalizedNamesV1DTO `json:"localizedNames,omitempty"`
	ID             string                     `json:"id,omitempty"`
	Name           string                     `json:"name,omitempty"`
	ParentID       string                     `json:"parentId,omitempty"`
	Type           string                     `json:"type,omitempty"`
	IsActive       bool                       `json:"isActive,omitempty"`
}

// val-content-v1.ContentItemDto
type ContentItemV1DTO struct {
	AssetName string `json:"assetName,omitempty"`
	// This field is only included for maps and game modes. These values are used in the match response.
	AssetPath string `json:"assetPath,omitempty"`
	ID        string `json:"id,omitempty"`
	// This field is excluded from the response when a locale is set
	LocalizedNames ContentLocalizedNamesV1DTO `json:"localizedNames,omitempty"`
	Name           string                     `json:"name,omitempty"`
}

// val-content-v1.LocalizedNamesDto
type ContentLocalizedNamesV1DTO struct {
	ArAe string `json:"ar-AE,omitempty"`
	DeDe string `json:"de-DE,omitempty"`
	EnGb string `json:"en-GB,omitempty"`
	EnUs string `json:"en-US,omitempty"`
	EsEs string `json:"es-ES,omitempty"`
	EsMx string `json:"es-MX,omitempty"`
	FrFr string `json:"fr-FR,omitempty"`
	IdID string `json:"id-ID,omitempty"`
	ItIt string `json:"it-IT,omitempty"`
	JaJp string `json:"ja-JP,omitempty"`
	KoKr string `json:"ko-KR,omitempty"`
	PlPl string `json:"pl-PL,omitempty"`
	PtBr string `json:"pt-BR,omitempty"`
	RuRu string `json:"ru-RU,omitempty"`
	ThTh string `json:"th-TH,omitempty"`
	TrTr string `json:"tr-TR,omitempty"`
	ViVn string `json:"vi-VN,omitempty"`
	ZhCn string `json:"zh-CN,omitempty"`
	ZhTw string `json:"zh-TW,omitempty"`
}

// val-content-v1.ContentDto
type ContentV1DTO struct {
	Version      string             `json:"version,omitempty"`
	Acts         []ContentActV1DTO  `json:"acts,omitempty"`
	Ceremonies   []ContentItemV1DTO `json:"ceremonies,omitempty"`
	Characters   []ContentItemV1DTO `json:"characters,omitempty"`
	CharmLevels  []ContentItemV1DTO `json:"charmLevels,omitempty"`
	Charms       []ContentItemV1DTO `json:"charms,omitempty"`
	Chromas      []ContentItemV1DTO `json:"chromas,omitempty"`
	Equips       []ContentItemV1DTO `json:"equips,omitempty"`
	GameModes    []ContentItemV1DTO `json:"gameModes,omitempty"`
	Maps         []ContentItemV1DTO `json:"maps,omitempty"`
	PlayerCards  []ContentItemV1DTO `json:"playerCards,omitempty"`
	PlayerTitles []ContentItemV1DTO `json:"playerTitles,omitempty"`
	SkinLevels   []ContentItemV1DTO `json:"skinLevels,omitempty"`
	Skins        []ContentItemV1DTO `json:"skins,omitempty"`
	SprayLevels  []ContentItemV1DTO `json:"sprayLevels,omitempty"`
	Sprays       []ContentItemV1DTO `json:"sprays,omitempty"`
	// Unknown type, this is a placeholder subject to change.
	Totems []string `json:"totems,omitempty"`
}

// val-match-v1.AbilityCastsDto
type MatchAbilityCastsV1DTO struct {
	Ability1Casts int32 `json:"ability1Casts,omitempty"`
	Ability2Casts int32 `json:"ability2Casts,omitempty"`
	GrenadeCasts  int32 `json:"grenadeCasts,omitempty"`
	UltimateCasts int32 `json:"ultimateCasts,omitempty"`
}

// val-match-v1.AbilityDto
type MatchAbilityV1DTO struct {
	Ability1Effects string `json:"ability1Effects,omitempty"`
	Ability2Effects string `json:"ability2Effects,omitempty"`
	GrenadeEffects  string `json:"grenadeEffects,omitempty"`
	UltimateEffects string `json:"ultimateEffects,omitempty"`
}

// val-match-v1.CoachDto
type MatchCoachV1DTO struct {
	PUUID  string `json:"puuid,omitempty"`
	TeamID string `json:"teamId,omitempty"`
}

// val-match-v1.DamageDto
type MatchDamageV1DTO struct {
	// PUUID
	Receiver  string `json:"receiver,omitempty"`
	Bodyshots int32  `json:"bodyshots,omitempty"`
	Damage    int32  `json:"damage,omitempty"`
	Headshots int32  `json:"headshots,omitempty"`
	Legshots  int32  `json:"legshots,omitempty"`
}

// val-match-v1.EconomyDto
type MatchEconomyV1DTO struct {
	Armor        string `json:"armor,omitempty"`
	Weapon       string `json:"weapon,omitempty"`
	LoadoutValue int32  `json:"loadoutValue,omitempty"`
	Remaining    int32  `json:"remaining,omitempty"`
	Spent        int32  `json:"spent,omitempty"`
}

// val-match-v1.FinishingDamageDto
type MatchFinishingDamageV1DTO struct {
	DamageItem          string `json:"damageItem,omitempty"`
	DamageType          string `json:"damageType,omitempty"`
	IsSecondaryFireMode bool   `json:"isSecondaryFireMode,omitempty"`
}

// val-match-v1.MatchInfoDto
type MatchInfoV1DTO struct {
	PremierMatchInfo   map[string]any `json:"premierMatchInfo,omitempty"`
	CustomGameName     string         `json:"customGameName,omitempty"`
	GameMode           string         `json:"gameMode,omitempty"`
	GameVersion        string         `json:"gameVersion,omitempty"`
	MapID              string         `json:"mapId,omitempty"`
	MatchID            string         `json:"matchId,omitempty"`
	ProvisioningFlowID string         `json:"provisioningFlowId,omitempty"`
	QueueID            string         `json:"queueId,omitempty"`
	Region             string         `json:"region,omitempty"`
	SeasonID           string         `json:"seasonId,omitempty"`
	GameStartMillis    int64          `json:"gameStartMillis,omitempty"`
	GameLengthMillis   int32          `json:"gameLengthMillis,omitempty"`
	IsCompleted        bool           `json:"isCompleted,omitempty"`
	IsRanked           bool           `json:"isRanked,omitempty"`
}

// val-match-v1.KillDto
type MatchKillV1DTO struct {
	// PUUID
	Killer string `json:"killer,omitempty"`
	// PUUID
	Victim          string                    `json:"victim,omitempty"`
	FinishingDamage MatchFinishingDamageV1DTO `json:"finishingDamage,omitempty"`
	// List of PUUIDs
	Assistants                []string                    `json:"assistants,omitempty"`
	PlayerLocations           []MatchPlayerLocationsV1DTO `json:"playerLocations,omitempty"`
	VictimLocation            MatchLocationV1DTO          `json:"victimLocation,omitempty"`
	TimeSinceGameStartMillis  int32                       `json:"timeSinceGameStartMillis,omitempty"`
	TimeSinceRoundStartMillis int32                       `json:"timeSinceRoundStartMillis,omitempty"`
}

// val-match-v1.LocationDto
type MatchLocationV1DTO struct {
	X int32 `json:"x,omitempty"`
	Y int32 `json:"y,omitempty"`
}

// val-match-v1.PlayerLocationsDto
type MatchPlayerLocationsV1DTO struct {
	PUUID       string             `json:"puuid,omitempty"`
	Location    MatchLocationV1DTO `json:"location,omitempty"`
	ViewRadians float32            `json:"viewRadians,omitempty"`
}

// val-match-v1.PlayerRoundStatsDto
type MatchPlayerRoundStatsV1DTO struct {
	Ability MatchAbilityV1DTO  `json:"ability,omitempty"`
	PUUID   string             `json:"puuid,omitempty"`
	Damage  []MatchDamageV1DTO `json:"damage,omitempty"`
	Kills   []MatchKillV1DTO   `json:"kills,omitempty"`
	Economy MatchEconomyV1DTO  `json:"economy,omitempty"`
	Score   int32              `json:"score,omitempty"`
}

// val-match-v1.PlayerStatsDto
type MatchPlayerStatsV1DTO struct {
	AbilityCasts   MatchAbilityCastsV1DTO `json:"abilityCasts,omitempty"`
	Assists        int32                  `json:"assists,omitempty"`
	Deaths         int32                  `json:"deaths,omitempty"`
	Kills          int32                  `json:"kills,omitempty"`
	PlaytimeMillis int32                  `json:"playtimeMillis,omitempty"`
	RoundsPlayed   int32                  `json:"roundsPlayed,omitempty"`
	Score          int32                  `json:"score,omitempty"`
}

// val-match-v1.PlayerDto
type MatchPlayerV1DTO struct {
	CharacterID     string                `json:"characterId,omitempty"`
	GameName        string                `json:"gameName,omitempty"`
	PUUID           string                `json:"puuid,omitempty"`
	PartyID         string                `json:"partyId,omitempty"`
	PlayerCard      string                `json:"playerCard,omitempty"`
	PlayerTitle     string                `json:"playerTitle,omitempty"`
	TagLine         string                `json:"tagLine,omitempty"`
	TeamID          string                `json:"teamId,omitempty"`
	Stats           MatchPlayerStatsV1DTO `json:"stats,omitempty"`
	AccountLevel    int32                 `json:"accountLevel,omitempty"`
	CompetitiveTier int32                 `json:"competitiveTier,omitempty"`
	IsObserver      bool                  `json:"isObserver,omitempty"`
}

// val-match-v1.RecentMatchesDto
type MatchRecentMatchesV1DTO struct {
	// A list of recent match ids.
	MatchIDs    []string `json:"matchIds,omitempty"`
	CurrentTime int64    `json:"currentTime,omitempty"`
}

// val-match-v1.RoundResultDto
type MatchRoundResultV1DTO struct {
	// PUUID of player
	BombDefuser string `json:"bombDefuser,omitempty"`
	// PUUID of player
	BombPlanter           string                       `json:"bombPlanter,omitempty"`
	PlantSite             string                       `json:"plantSite,omitempty"`
	RoundCeremony         string                       `json:"roundCeremony,omitempty"`
	RoundResult           string                       `json:"roundResult,omitempty"`
	RoundResultCode       string                       `json:"roundResultCode,omitempty"`
	WinningTeam           string                       `json:"winningTeam,omitempty"`
	DefusePlayerLocations []MatchPlayerLocationsV1DTO  `json:"defusePlayerLocations,omitempty"`
	PlantPlayerLocations  []MatchPlayerLocationsV1DTO  `json:"plantPlayerLocations,omitempty"`
	PlayerStats           []MatchPlayerRoundStatsV1DTO `json:"playerStats,omitempty"`
	DefuseLocation        MatchLocationV1DTO           `json:"defuseLocation,omitempty"`
	PlantLocation         MatchLocationV1DTO           `json:"plantLocation,omitempty"`
	DefuseRoundTime       int32                        `json:"defuseRoundTime,omitempty"`
	PlantRoundTime        int32                        `json:"plantRoundTime,omitempty"`
	RoundNum              int32                        `json:"roundNum,omitempty"`
}

// val-match-v1.TeamDto
type MatchTeamV1DTO struct {
	// This is an arbitrary string. Red and Blue in bomb modes. The puuid of the player in deathmatch.
	TeamID string `json:"teamId,omitempty"`
	// Team points scored. Number of kills in deathmatch.
	NumPoints    int32 `json:"numPoints,omitempty"`
	RoundsPlayed int32 `json:"roundsPlayed,omitempty"`
	RoundsWon    int32 `json:"roundsWon,omitempty"`
	Won          bool  `json:"won,omitempty"`
}

// val-match-v1.MatchDto
type MatchV1DTO struct {
	Coaches      []MatchCoachV1DTO       `json:"coaches,omitempty"`
	Players      []MatchPlayerV1DTO      `json:"players,omitempty"`
	RoundResults []MatchRoundResultV1DTO `json:"roundResults,omitempty"`
	Teams        []MatchTeamV1DTO        `json:"teams,omitempty"`
	MatchInfo    MatchInfoV1DTO          `json:"matchInfo,omitempty"`
}

// val-match-v1.MatchlistEntryDto
type MatchlistEntryV1DTO struct {
	MatchID             string `json:"matchId,omitempty"`
	QueueID             string `json:"queueId,omitempty"`
	GameStartTimeMillis int64  `json:"gameStartTimeMillis,omitempty"`
}

// val-match-v1.MatchlistDto
type MatchlistV1DTO struct {
	PUUID   string                `json:"puuid,omitempty"`
	History []MatchlistEntryV1DTO `json:"history,omitempty"`
}

// val-ranked-v1.LeaderboardDto
type RankedLeaderboardV1DTO struct {
	TierDetails map[int64]RankedTierDetailV1DTO `json:"tierDetails,omitempty"`
	// The act id for the given leaderboard. Act ids can be found using the val-content API.
	ActID string `json:"actId,omitempty"`
	Query string `json:"query,omitempty"`
	// The shard for the given leaderboard.
	Shard                 string              `json:"shard,omitempty"`
	Players               []RankedPlayerV1DTO `json:"players,omitempty"`
	ImmortalStartingIndex int64               `json:"immortalStartingIndex,omitempty"`
	ImmortalStartingPage  int64               `json:"immortalStartingPage,omitempty"`
	StartIndex            int64               `json:"startIndex,omitempty"`
	TopTierRrthreshold    int64               `json:"topTierRRThreshold,omitempty"`
	// The total number of players in the leaderboard.
	TotalPlayers int64 `json:"totalPlayers,omitempty"`
}

// val-ranked-v1.PlayerDto
type RankedPlayerV1DTO struct {
	// This field may be omitted if the player has been anonymized.
	GameName string `json:"gameName,omitempty"`
	// This field may be omitted if the player has been anonymized.
	PUUID string `json:"puuid,omitempty"`
	// This field may be omitted if the player has been anonymized.
	TagLine         string `json:"tagLine,omitempty"`
	CompetitiveTier int64  `json:"competitiveTier,omitempty"`
	LeaderboardRank int64  `json:"leaderboardRank,omitempty"`
	NumberOfWins    int64  `json:"numberOfWins,omitempty"`
	RankedRating    int64  `json:"rankedRating,omitempty"`
}

// val-ranked-v1.TierDetailDto
type RankedTierDetailV1DTO struct {
	RankedRatingThreshold int64 `json:"rankedRatingThreshold,omitempty"`
	StartingIndex         int64 `json:"startingIndex,omitempty"`
	StartingPage          int64 `json:"startingPage,omitempty"`
}

// val-status-v1.ContentDto
type StatusContentV1DTO struct {
	Content string `json:"content,omitempty"`
	Locale  string `json:"locale,omitempty"`
}

// val-status-v1.PlatformDataDto
type StatusPlatformDataV1DTO struct {
	ID           string        `json:"id,omitempty"`
	Name         string        `json:"name,omitempty"`
	Incidents    []StatusV1DTO `json:"incidents,omitempty"`
	Locales      []string      `json:"locales,omitempty"`
	Maintenances []StatusV1DTO `json:"maintenances,omitempty"`
}

// val-status-v1.UpdateDto
type StatusUpdateV1DTO struct {
	Author    string `json:"author,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	UpdatedAt string `json:"updated_at,omitempty"`
	// (Legal values: riotclient, riotstatus, game)
	PublishLocations []string             `json:"publish_locations,omitempty"`
	Translations     []StatusContentV1DTO `json:"translations,omitempty"`
	ID               int32                `json:"id,omitempty"`
	Publish          bool                 `json:"publish,omitempty"`
}

// val-status-v1.StatusDto
type StatusV1DTO struct {
	ArchiveAt string `json:"archive_at,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	// (Legal values:  info,  warning,  critical)
	IncidentSeverity string `json:"incident_severity,omitempty"`
	// (Legal values:  scheduled,  in_progress,  complete)
	MaintenanceStatus string `json:"maintenance_status,omitempty"`
	UpdatedAt         string `json:"updated_at,omitempty"`
	// (Legal values: windows, macos, android, ios, ps4, xbone, switch)
	Platforms []string             `json:"platforms,omitempty"`
	Titles    []StatusContentV1DTO `json:"titles,omitempty"`
	Updates   []StatusUpdateV1DTO  `json:"updates,omitempty"`
	ID        int32                `json:"id,omitempty"`
}
