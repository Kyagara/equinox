{{
    const dotUtils = require('./dotUtils.js');
    const spec = dotUtils.spec;
    const routesTable = require('./specs/routesTable.json');
}}
{{= dotUtils.preamble("api", spec.info.version) }}

import (
	"time"

	"github.com/Kyagara/equinox/cache"
	"go.uber.org/zap/zapcore"
)

// Configuration for the Equinox client.
type EquinoxConfig struct {
	// Riot API Key.
	Key string
	// Log level, api.NopLevel disables logging.
	LogLevel LogLevel
	// Timeout for the internal http.Client in seconds, 0 disables the timeout.
	Timeout int
	// Allows retrying a request if it returns a 429 status code.
	Retry bool
	// The cache used to store all GET requests done by the client.
	Cache *cache.Cache
}

func (c *EquinoxConfig) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	encoder.AddBool("retry-if-429", c.Retry)
	encoder.AddInt("http-client-timeout", c.Timeout)
	if c.Cache.TTL > 0 {
		cache := CacheConfig{Store: string(c.Cache.StoreType), TTL: c.Cache.TTL}
		err := encoder.AddObject("cache", cache)
		if err != nil {
			return err
		}
	}
	return nil
}

type CacheConfig struct {
	TTL   time.Duration
	Store string
}

func (c CacheConfig) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	encoder.AddString("store", c.Store)
	encoder.AddDuration("cache-ttl", c.TTL)
	return nil
}

// Base API URLs formats.
const (
	RIOT_API_BASE_URL_FORMAT = "https://%s.api.riotgames.com"
	D_DRAGON_BASE_URL_FORMAT = "https://ddragon.leagueoflegends.com%s"
	C_DRAGON_BASE_URL_FORMAT = "https://cdn.communitydragon.org%s"
)

// Rate limit headers
const (
	X_RATE_LIMIT_TYPE_HEADER = "X-Rate-Limit-Type"
	RETRY_AFTER_HEADER     = "Retry-After"
)

type LogLevel int8

const (
	// NopLevel won't log anything, this is the default behaviour for the Default client.
	NopLevel LogLevel = iota - 2
	// DebugLevel will log everything.
	DebugLevel
	// InfoLevel will log the requests being made and if they were successful.
	InfoLevel
	// WarnLevel will log when a request was rate limited.
	WarnLevel
	// ErrorLevel will log every error.
	ErrorLevel
)

// Regional routes, used in tournament services, Legends of Runeterra (LoR), and some other endpoints.
type RegionalRoute string

const (
{{
    for (const [ name, { id, description, deprecated } ] of Object.entries(routesTable['regional'])) {
        const desc = description.split('\n');
}}
{{~ desc :line }}
    // {{= line }}
{{~}}
{{? deprecated }}
    // Deprecated
{{?}}
    {{= dotUtils.changeCase.constantCase(name) }} RegionalRoute = "{{= name }}"
{{
    }
}}
)
