{{
    const dotUtils = require('./dotUtils.js');
    const spec = dotUtils.spec;
    const gameTypes = require('./specs/gameTypes.json');
    const gameModes = require('./specs/gameModes.json');
    const queueTypes = require('./specs/queueTypes.json');
    const routesTable = require('./specs/routesTable.json');
    const clientName = "{{# def.clientName }}";
    const clientNormalizedName = "{{# def.clientNormalizedName }}";
}}
{{= dotUtils.preamble(clientName, spec.info.version) }}

{{? clientName === "val"}}
// Platform routes for Valorant.
type PlatformRoute string

const (
{{
    for (const [ name, { description, deprecated } ] of Object.entries(routesTable['val-platform'])) {
        if (name) {
            const desc = description.split('\n');
}}
{{~ desc :line }}
    // {{= line }}
{{~}}
{{? deprecated }}
    // Deprecated
{{?}}
    {{= dotUtils.changeCase.constantCase(name) }} PlatformRoute = "{{= name }}"
{{
        }
    }
}}
)
{{?}}
{{? clientName === "lol" || clientName === "tft"}}
// LoL and TFT ranked tiers, such as gold, diamond, challenger, etc.
type Tier string

const (
	IRON        Tier = "IRON"
	BRONZE      Tier = "BRONZE"
	SILVER      Tier = "SILVER"
	GOLD        Tier = "GOLD"
	PLATINUM    Tier = "PLATINUM"
    EMERALD     Tier = "EMERALD"
	DIAMOND     Tier = "DIAMOND"
	MASTER      Tier = "MASTER"
	GRANDMASTER Tier = "GRANDMASTER"
	CHALLENGER  Tier = "CHALLENGER"
)

// LoL and TFT rank divisions, I, II, III, IV, and (deprecated) V.
type Division string

const (
	I   Division = "I"
	II  Division = "II"
	III Division = "III"
	IV  Division = "IV"
    // Deprecated
    V   Division = "V"
)
{{?}}
{{? clientName === "tft" || clientName === "lol"}}
// Platform routes for League of Legends (LoL), Teamfight Tactics (TFT).
type PlatformRoute string

const (
{{
    for (const [ name, { description, deprecated } ] of Object.entries(routesTable['platform'])) {
        const desc = description.split('\n');
}}
{{~ desc :line }}
    // {{= line }}
{{~}}
{{? deprecated }}
    // Deprecated
{{?}}
    {{= dotUtils.changeCase.constantCase(name) }} PlatformRoute = "{{= name }}"
{{
    }
}}
)
{{?}}
{{? clientName === "lol"}}
// Tournament regions for League of Legends (LoL).
type TournamentRegion string

const (
{{
    for (const [ name, { description, tournamentRegion, deprecated } ] of Object.entries(routesTable['platform'])) {
        if (tournamentRegion) {
            const desc = description.split('\n');
}}
{{~ desc :line }}
    // {{= line }}
{{~}}
{{? deprecated }}
    // Deprecated
{{?}}
    {{= dotUtils.changeCase.constantCase(tournamentRegion) }} TournamentRegion = "{{= name }}"
{{
        }
    }
}}
)

// League of Legends game type: matched game, custom game, or tutorial game.
type GameType string

const (
{{
    for (const gameType of gameTypes) {
        const desc = gameType['x-desc'] ? gameType['x-desc'].split('\n') : [];
}}
{{~ desc :line }}
    // {{= line }}
{{~}}
    {{= dotUtils.changeCase.constantCase(gameType['x-name']) }} GameType = "{{= gameType['x-name'] }}"
{{
    }
}}
)

// League of Legends game mode, such as Classic,
// ARAM, URF, One For All, Ascension, etc.
type GameMode string

const (
{{
    for (const gameMode of gameModes) {
        const desc = gameMode['x-desc'] ? gameMode['x-desc'].split('\n') : [];
}}
{{~ desc :line }}
    // {{= line }}
{{~}}
    {{= dotUtils.changeCase.constantCase(gameMode['x-name']) }} GameMode = "{{= gameMode['x-name'] }}"
{{
    }
}}
)

// LoL ranked queue types.
type QueueType string

const (
{{
    for (const queueType of queueTypes) {
        const desc = queueType['x-desc'] ? queueType['x-desc'].split('\n') : [];
        if (queueType['x-name'].includes("TFT")) continue;
}}
{{~ desc :line }}
    // {{= line }}
{{~}}
{{? queueType['x-deprecated'] }}
    //
    // Deprecated: {{= queueType.notes }}
{{?}}
    {{= dotUtils.changeCase.constantCase(queueType['x-name']) }} QueueType = "{{= queueType['x-name'] }}"
{{
    }
}}
)
{{?}}
{{? clientName === "tft"}}
// TFT ranked queue types.
type QueueType string

const (
{{
    for (const queueType of queueTypes) {
        const desc = queueType['x-desc'] ? queueType['x-desc'].split('\n') : [];
        if (!queueType['x-name'].includes("TFT")) continue;
}}
{{~ desc :line }}
    // {{= line }}
{{~}}
{{? queueType['x-deprecated'] }}
    //
    // Deprecated: {{= queueType.notes }}
{{?}}
    {{= dotUtils.changeCase.constantCase(queueType['x-name']) }} QueueType = "{{= queueType['x-name'] }}"
{{
    }
}}
)
{{?}}
